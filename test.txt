it('builds audit trail when old and new account values differ (covers all if branches)', () => {
  // --- stub utils + acctService helpers
  spyOn(component.utils, 'getValidString').and.callFake(v => v ? String(v) : null);
  spyOn(component.utils, 'getDateAndDefaultTime').and.returnValue('2025-08-25');
  spyOn(component.utils, 'getFormatedDecimal').and.callFake(v => v.toString());
  spyOn(component.utils, 'LoadComboBoxData').and.callFake((arr: any[], l: string, c: string, i: string) =>
    arr.map(x => ({ label: `LBL-${x[c] || x[l]}`, value: x[i].toString() }))
  );
  spyOn(component.acctService, 'getAccountStatusDesc').and.returnValue('StatusDesc');

  // --- prepare old vs new with all differences
  component.oldAccountValues = {
    accountNm: 'OLDNM',
    dateopen: '2024-01-01',
    dateclosed: '2024-01-02',
    estacc: '1',
    revshare: '0.1',
    futureuse: 'OLD',
    regionDescription: 'OLDREG',
    disposition3: 'OLD-DISP',
    ofcrNm: 'OLD-OFFICER-NAME',
    officer: '111',
    ozId: 'OLD-OZ',
    pcanumber: 'OLD-PCA',
    estpp: '10',
    actpp: '20',
    endpp: '30',
    feepp: '40',
    cashpp: '50',
    accepfee: '60'
  } as any;

  component.account = {
    accountNm: 'NEWNM',
    dateopen: '2025-01-01',
    dateclosed: '2025-01-02',
    estacc: '2',
    revshare: '0.2',
    futureuse: 'NEW',
    regionDescription: 'NEWREG',
    disposition3: 'NEW-DISP',
    ofcrNm: 'NEW-OFFICER-NAME',
    officer: '222',
    ozId: 'NEW-OZ',
    pcanumber: 'NEW-PCA',
    estpp: '15',
    actpp: '25',
    endpp: '35',
    feepp: '45',
    cashpp: '55',
    accepfee: '65'
  } as any;

  // combos + values
  (component as any).oldcbStatusValue = '1';
  (component as any).cbStatus = { value: '2' };
  (component as any).oldcbDivisionValue = '101';
  (component as any).cbDivision = { value: '102' };
  (component as any).oldcbAltDivisionValue = '201';
  (component as any).cbAltDivision = { value: '202' };
  (component as any).oldcbCycleValue = '301';
  (component as any).cbCycle = { value: '302' };
  (component as any).oldcbFormulaValue = '401';
  (component as any).cbFormula = { value: '402' };
  (component as any).oldcbCategoryValue = '501';
  (component as any).cbCategory = { value: '502' };

  // sample lists for LoadComboBoxData
  component.divisions  = [{ divisionId: 101, divisionCd: 'D1', divisionDesc: 'Div1' },
                          { divisionId: 102, divisionCd: 'D2', divisionDesc: 'Div2' }] as any;
  component.cycles     = [{ cycleId: 301, cycleDesc: 'Cycle1' },
                          { cycleId: 302, cycleDesc: 'Cycle2' }] as any;
  component.formulas   = [{ formulaId: 401, formulaCd: 'F1', formulaDesc: 'Form1' },
                          { formulaId: 402, formulaCd: 'F2', formulaDesc: 'Form2' }] as any;
  component.categories = [{ categoryId: 501, categoryCode: 'C1', categoryDescription: 'Cat1' },
                          { categoryId: 502, categoryCode: 'C2', categoryDescription: 'Cat2' }] as any;

  // --- act
  (component as any).buildAuditTrail?.(); // replace with the real method name you pasted

  // --- assert
  expect((component as any).editAccountAuditData).toBeDefined();
  const audit = (component as any).editAccountAuditData[0];
  expect(audit.OldAccountValue).toContain('OLDNM');
  expect(audit.NewAccountValue).toContain('NEWNM');
  expect(audit.OldAccountValue).toContain('Account Status');
  expect(audit.NewAccountValue).toContain('Account Status');
  expect(audit.OldAccountValue).toContain('Division Cd Desc');
  expect(audit.NewAccountValue).toContain('Division Cd Desc');
  expect(audit.OldAccountValue).toContain('Cycle Id Desc');
  expect(audit.NewAccountValue).toContain('Cycle Id Desc');
  expect(audit.OldAccountValue).toContain('Formula Cd Desc');
  expect(audit.NewAccountValue).toContain('Formula Cd Desc');
  expect(audit.OldAccountValue).toContain('Category Cd Desc');
  expect(audit.NewAccountValue).toContain('Category Cd Desc');
  expect(audit.OldAccountValue).toContain('Revenue Share');
  expect(audit.NewAccountValue).toContain('Revenue Share');
  expect(audit.OldAccountValue).toContain('Officer Name');
  expect(audit.NewAccountValue).toContain('Officer Name');
  expect(audit.OldAccountValue).toContain('Officer Number');
  expect(audit.NewAccountValue).toContain('Officer Number');
  expect(audit.OldAccountValue).toContain('PCA');
  expect(audit.NewAccountValue).toContain('PCA');
  expect(audit.OldAccountValue).toContain('Accep. Fee');
  expect(audit.NewAccountValue).toContain('Accep. Fee');
});
