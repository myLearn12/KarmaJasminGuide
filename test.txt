it('ngOnInit complete: else/complete sets divisionComboBoxData and viewchild.options without null length errors', fakeAsync(() => {
  // Arrange
  spyOn(component['authService'], 'canHideFinanceAdminControls').and.returnValue(false);

  // Realistic API payloads matching your models
  const costcenters = [{ id: 1 }];
  const revShareDivMaps: any[] = []; 
  const revenueShares = [
    {
      selected: false,
      revShareTypeId: 10,
      revShareTypeCd: 'R1',
      revShareTypeDesc: 'Revenue A',
      activeIndic: true
    }
  ];
  const divisions = [
    {
      selected: false,
      divisionId: 20,
      divisionCd: 'D1',
      divisionDesc: 'Division A',
      activeIndic: true
    }
  ];

  // Track actual URLs called
  const calledUrls: string[] = [];
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    const u = String(url || '').toLowerCase();
    calledUrls.push(u);
    if (u.includes('cost') || u.includes('costcenter')) return of(costcenters);
    if (u.includes('revsharediv') || u.includes('revshared')) return of(revShareDivMaps);
    if (u.includes('revsharetype') || u.includes('revsharetypecd')) return of(revenueShares);
    if (u.includes('division')) return of(divisions);
    // fallback safe array so no null length
    return of([]);
  });

  // Make sure LoadComboBoxData returns an array (not null)
  const mappedRevenue = [{ label: 'Revenue A', value: '10' }];
  const mappedDivisions = [{ label: 'Division A', value: '20' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) => {
    if (label === 'revShareTypeDesc') return mappedRevenue;
    if (label === 'divisionDesc') return mappedDivisions;
    return [];
  });

  // Ensure ViewChild mocks exist (component code expects these to be objects, not null)
  (component as any)._revenueShareComboBox = { options: null };
  (component as any)._divisionComboBox = { options: null };

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.ngOnInit();
  tick();

  // Diagnostic checks to help find root cause if something is null
  if (!component.divisionComboBoxData) {
    fail('divisionComboBoxData is null — calledUrls: ' + JSON.stringify(calledUrls));
    return;
  }
  if (!component.revenueShareComboBoxData) {
    fail('revenueShareComboBoxData is null — calledUrls: ' + JSON.stringify(calledUrls));
    return;
  }
  if ((component as any)._revenueShareComboBox == null) {
    fail('_revenueShareComboBox is null — calledUrls: ' + JSON.stringify(calledUrls));
    return;
  }
  if ((component as any)._divisionComboBox == null) {
    fail('_divisionComboBox is null — calledUrls: ' + JSON.stringify(calledUrls));
    return;
  }

  // Assertions (what you intended)
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);
  expect((component as any)._revenueShareComboBox.options).toEqual(JSON.parse(JSON.stringify(revenueShares)));
  expect((component as any)._divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));