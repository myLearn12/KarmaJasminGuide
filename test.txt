import { fakeAsync, tick } from '@angular/core/testing';
import { of, throwError } from 'rxjs';

it('onAcceptButtonClick(ActionType.add) - success: posts, regenerates table, shows success and writes audit log', fakeAsync(() => {
  // Arrange
  const ActionType = { add: 0, update: 1, delete: 2 };

  // avoid early return
  spyOn(component as any, 'ValidateFormControls').and.returnValue(false);

  // make sure arrays exist so .find/.map/.filter used inside component work
  component.categories = [{ categoryId: 7, categoryDescription: 'Cat', categoryCode: '4' }] as any[];
  component.divisions  = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'D1' }] as any[];

  // viewchild combo mocks (component uses .value and .toString())
  (component as any)._categoryComboBox = { value: ['7'] };
  (component as any)._divisionComboBox = { value: ['20'] };

  // provide appConfigService URL (if private on component use (component as any).appConfigService)
  (component as any).appConfigService = (component as any).appConfigService || {};
  (component as any).appConfigService.addCatGlAcctMappingUrl = '/api/addCat';

  // catGlmap minimal model required by payload
  component.catGlmap = { glAcctNbr: 'GL-100' } as any;

  // stub utils used inside method (if they exist)
  const utils = (component as any).utils = (component as any).utils || {};
  spyOn(utils, 'getCurrentUser').and.returnValue('u1');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-25T00:00:00');

  // spies for side-effects
  const postSpy = spyOn((component as any).feeApiservice, 'postRequest').and.returnValue(of({}));
  const genSpy  = spyOn(component as any, 'GenerateTableRows').and.callFake(() => null);
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue').and.callFake(() => null);

  // audit log stub + getUpdatedModel
  (component as any).auditLogService = (component as any).auditLogService || {};
  (component as any).auditLogService.addAction = 'ADD';
  const auditSpy = spyOn((component as any).auditLogService, 'writeAuditLog').and.callFake(() => null);
  spyOn(component as any, 'getUpdatedModel').and.returnValue({ some: 'model' });

  // Act
  (component as any).onAcceptButtonClick(ActionType.add);
  tick();

  // Assert
  expect(postSpy).toHaveBeenCalledWith((component as any).appConfigService.addCatGlAcctMappingUrl, jasmine.any(Object));
  expect(genSpy).toHaveBeenCalled();
  expect(setMsgSpy).toHaveBeenCalledWith(jasmine.anything(), (component as any).addSuccessMessage);
  expect(auditSpy).toHaveBeenCalledWith(
    'NA', 'NA', jasmine.anything(), (component as any).getUpdatedModel(), (component as any).auditLogService.addAction, (component as any).PageTitle
  );
}));


it('onAcceptButtonClick(ActionType.add) - error: postRequest error -> displayServiceErrors called and GenerateTableRows not called', fakeAsync(() => {
  // Arrange
  const ActionType = { add: 0, update: 1, delete: 2 };

  spyOn(component as any, 'ValidateFormControls').and.returnValue(false);

  (component as any)._categoryComboBox = { value: ['7'] };
  (component as any)._divisionComboBox = { value: ['20'] };

  // ensure arrays exist so any category/division lookups don't crash
  component.categories = [{ categoryId: 7, categoryDescription: 'Cat', categoryCode: '4' }] as any[];
  component.divisions  = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'D1' }] as any[];

  (component as any).appConfigService = (component as any).appConfigService || {};
  (component as any).appConfigService.addCatGlAcctMappingUrl = '/api/addCat';

  const err = { error: { statusMessage: 'Add failed' } };
  spyOn((component as any).feeApiservice, 'postRequest').and.returnValue(throwError(() => err));

  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.callFake(() => null);
  const genSpy = spyOn(component as any, 'GenerateTableRows').and.callFake(() => null);

  // Act
  (component as any).onAcceptButtonClick(ActionType.add);
  tick();

  // Assert
  expect(displaySpy).toHaveBeenCalledWith('Add failed');
  expect(genSpy).not.toHaveBeenCalled();
}));