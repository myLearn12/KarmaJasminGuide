import { fakeAsync, tick } from '@angular/core/testing';
import { of, throwError } from 'rxjs';

/**
 * Robust test: rbnTax true -> forkJoin(url+'1', categories) completes and sets combo data & viewchild.options
 */
it('onSearchButtonClick: rbnTax true -> loads catGlmaps + categories and sets category combo', fakeAsync(() => {
  // Arrange: toggle tax radio
  (component as any).rbnTax = { value: true };
  (component as any).rbnNonTax = { value: false };

  // Provide appConfigService (private in component) on the instance so tests can read it
  (component as any).appConfigService = {
    getGetCatGlAcctMappingByIdUrl: '/api/catglmaps/',
    getAllCategoryUrl: '/api/categories'
  } as any;

  const catGlmaps = [{ acct: 'A1' }];
  const categories = [{ categoryId: 7, categoryDescription: 'Estate', categoryCode: '4' }];

  const calledUrls: string[] = [];
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    calledUrls.push(String(url));
    // substring matching is robust to minor URL name differences or query params
    const u = String(url).toLowerCase();
    if (u.includes('catgl') || u.includes('catglmap') || u.includes('getcatgl')) {
      return of(catGlmaps);
    }
    if (u.includes('category') || u.includes('allcategory') || u.includes('getallcategory')) {
      return of(categories);
    }
    // fallback so forkJoin doesn't break if some other request exists
    return of([]);
  });

  // utils.LoadComboBoxData -> predictable result for assertions
  const mappedCategories = [{ label: 'Estate', value: '7' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    if (label === 'categoryDescription') { return mappedCategories; }
    return [];
  });

  // Provide a ViewChild mock for category combo BEFORE calling the method
  (component as any)._categoryComboBox = { options: null };
  (component as any).categoryComboBox = (component as any)._categoryComboBox;

  // prevent heavy side effects
  spyOn(component as any, 'LoadTableRows').and.stub();
  spyOn(component as any, 'displayServiceErrors').and.stub();
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.onSearchButtonClick();
  tick(); // flush forkJoin subscribe next + complete

  // Debug assistance (useful when test fails)
  if (!calledUrls.some(u => /catgl|catglmap|getcatgl/i.test(u)) ||
      !calledUrls.some(u => /category|allcategory|getallcategory/i.test(u))) {
    // if urls didn't match our substring rules, fail with helpful info
    fail('URL matching in test failed. Called URLs: ' + JSON.stringify(calledUrls));
    return;
  }

  // Assert
  expect((component as any).LoadTableRows).toHaveBeenCalledWith(catGlmaps);
  expect(component.categoryComboBoxData).toEqual([{ options: mappedCategories }]);
  expect((component as any)._categoryComboBox.options).toEqual(JSON.parse(JSON.stringify(categories)));
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));

/**
 * Robust test: rbnNonTax true -> forkJoin(url+'2', categories) completes and sets category combo
 */
it('onSearchButtonClick: rbnNonTax true -> loads catGlmaps id "2" + categories and sets category combo', fakeAsync(() => {
  // Arrange
  (component as any).rbnTax = { value: false };
  (component as any).rbnNonTax = { value: true };

  (component as any).appConfigService = {
    getGetCatGlAcctMappingByIdUrl: '/api/catglmaps/',
    getAllCategoryUrl: '/api/categories'
  } as any;

  const catGlmaps = [{ acct: 'B1' }];
  const categories = [{ categoryId: 8, categoryDescription: 'Other', categoryCode: '7' }];

  const calledUrls: string[] = [];
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    calledUrls.push(String(url));
    const u = String(url).toLowerCase();
    if (u.includes('/catglmaps/') && u.includes('2')) { return of(catGlmaps); } // exact-case when url contains '2'
    if (u.includes('category')) { return of(categories); }
    return of([]);
  });

  const mappedCategories = [{ label: 'Other', value: '8' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    if (label === 'categoryDescription') { return mappedCategories; }
    return [];
  });

  (component as any)._categoryComboBox = { options: null };
  (component as any).categoryComboBox = (component as any)._categoryComboBox;

  spyOn(component as any, 'LoadTableRows').and.stub();
  spyOn(component as any, 'displayServiceErrors').and.stub();
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.onSearchButtonClick();
  tick();

  // Debug info if needed
  if (!calledUrls.some(u => /catglmaps/i.test(u)) || !calledUrls.some(u => /category/i.test(u))) {
    fail('URL matching mismatch. Called urls: ' + JSON.stringify(calledUrls));
    return;
  }

  // Assert
  expect((component as any).LoadTableRows).toHaveBeenCalledWith(catGlmaps);
  expect(component.categoryComboBoxData).toEqual([{ options: mappedCategories }]);
  expect((component as any)._categoryComboBox.options).toEqual(JSON.parse(JSON.stringify(categories)));
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));

/**
 * Error path test: when feeApiservice.getRequest for catGlmaps throws -> displayServiceErrors called & catGlmaps cleared
 */
it('onSearchButtonClick: when catGlmaps request errors -> calls displayServiceErrors and clears catGlmaps', fakeAsync(() => {
  // Arrange
  (component as any).rbnTax = { value: true };
  (component as any).rbnNonTax = { value: false };

  (component as any).appConfigService = {
    getGetCatGlAcctMappingByIdUrl: '/api/catglmaps/',
    getAllCategoryUrl: '/api/categories'
  } as any;

  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    const u = String(url).toLowerCase();
    if (u.includes('catgl')) {
      return throwError(() => ({ error: { statusMessage: 'boom' } }));
    }
    if (u.includes('category')) {
      return of([{ categoryId: 7, categoryDescription: 'Estate', categoryCode: '4' }]);
    }
    return of([]);
  });

  (component as any)._categoryComboBox = { options: null };
  (component as any).categoryComboBox = (component as any)._categoryComboBox;

  const displaySpy = spyOn(component as any, 'displayServiceErrors');
  const loadSpy = spyOn(component as any, 'LoadTableRows').and.stub();
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.onSearchButtonClick();
  tick();

  // Assert: displayServiceErrors called with the error message and catGlmaps handling happened
  expect(displaySpy).toHaveBeenCalledWith('boom');
  // Ensure LoadTableRows was not called with success payload
  expect(loadSpy).not.toHaveBeenCalledWith(jasmine.arrayContaining([{ acct: jasmine.anything() }]));
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));