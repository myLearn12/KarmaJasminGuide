it('ValidateFormControls: returns true when any errors/flags are triggered (handles mixed fcn/fon + cb name variants)', fakeAsync(() => {
  // --- controls (support both fcn_ and fon_ names)
  const acctCtrl = { markAsTouched: jasmine.createSpy('mat1'), hasError: (e: string) => e === 'required' };
  const estCtrl  = { markAsTouched: jasmine.createSpy('mat2'), hasError: (e: string) => e === 'hasInvalidCharacter' };
  (component as any).fcn_AcctNumb = acctCtrl;
  (component as any).fon_AcctNumb = acctCtrl;      // alias
  (component as any).fcn_EstAccrual = estCtrl;
  (component as any).fon_EstAccrual = estCtrl;     // alias
  // officer name/number controls used in the big if
  (component as any).fcn_OffcrNumber = { hasError: (e: string) => e === 'required' };
  (component as any).fon_offcrNumber = (component as any).fcn_OffcrNumber; // alias
  (component as any).fcn_offcrName  = { hasError: () => false };

  // --- combos (null -> required flags true). also stub both casings where used
  (component as any).cbStatus   = { value: null, options: null };
  (component as any).cbstatus   = (component as any).cbStatus; // alias
  (component as any).cbDivision = { value: null, options: null };
  (component as any).cbcycle    = { value: null, options: null }; // lower per code
  (component as any).cbCycle    = (component as any).cbcycle;      // safety alias
  (component as any).cbofficer  = { value: null, options: null };
  (component as any).cbFormula  = { value: null, options: null };
  (component as any).cbCategory = { value: null, options: null };
  (component as any).cbcategory = (component as any).cbCategory;    // alias
  (component as any).cbAltDivision = { value: 'X', options: null }; // not null to drive isRevShareReqd

  // --- utils + account (revshare invalid → isRevShareReqd true)
  spyOn(component['utils'], 'isStringValid').and.callFake(v => !!v && String(v).trim().length > 0);
  (component as any).utils.isStringValid.and.returnValue(false); // account.revshare invalid
  component.account = { revshare: '' } as any;

  // --- other flags that appear in the giant if: keep them false unless you want to trip them
  component.isCategoryCdValid = false;  // so (offcrNumber.required && !isCategoryCdValid) → true
  component.isofcrNmbrValid   = false;
  component.isFutureValid     = false;
  component.isRevShareValid   = false;
  component.isDisp3Valid      = false;
  component.isofficerNumValid = false;
  component.isOzIdValid       = false;
  component.isPcaValid        = false;

  // --- helpers called inside: make them no-op
  (component as any).setIsRevSharevalid  = () => {};
  (component as any).onoffcrNumberChange = () => {};
  (component as any).onFutureUseChange   = () => {};
  (component as any).onoffNumberChange   = () => {};
  (component as any).onOzIdChange        = () => {};

  // act
  const result = (component as any).ValidateFormControls();
  tick();

  // touched
  expect(acctCtrl.markAsTouched).toHaveBeenCalled();
  expect(estCtrl.markAsTouched).toHaveBeenCalled();

  // required flags set by nulls
  expect(component.statusRequired).toBeTrue();
  expect(component.divisionRequired).toBeTrue();
  expect(component.cycleRequired).toBeTrue();
  expect(component.officerRequired).toBeTrue();
  expect(component.formulaRequired).toBeTrue();
  expect(component.categoryRequired).toBeTrue();

  // revshare flags: cbAltDivision != null AND revshare invalid => isRevShareReqd true
  expect(component.isRevShareReqd).toBeTrue();
  // altDivisionRequired requires revshare valid && cbAltDivision null → false here
  expect(component.altDivisionRequired).toBeFalse();

  // since several conditions are true, method should return true
  expect(result).toBeTrue();
}));
