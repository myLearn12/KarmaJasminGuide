import { fakeAsync, tick } from '@angular/core/testing';
import { of, throwError } from 'rxjs';
import { ActionType } from '...'; // adjust path if needed

it('onAcceptButtonClick(ActionType.add) - success: posts, regenerates table, shows success and writes audit log', fakeAsync(() => {
  // Arrange: make validateFormControls allow execution
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // Provide the combo viewchild mocks the component expects (they are protected/private in class)
  (component as any)._controlIdComboBox = { value: '200' };
  (component as any)._regionComboBox = { value: '10' };

  // Provide the arrays that getUpdatedModel() will read and call .find() on
  component.controlIds = [
    { conId: 200, controlDesc: 'Control 200' }
  ] as any;
  component.regions = [
    { regionId: 10, regionDescription: 'Region 10' }
  ] as any;

  // Minimal autocom object the method uses
  component.autocom = {
    autocomAcctNbr: 'ACCT-123',
    activeIndic: true,
    // other fields not strictly required by this test...
  } as any;

  // Spies for side-effects & HTTP
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // Prevent real side-effects
  const genSpy = spyOn(component as any, 'GenerateTableRows').and.callFake(() => {});
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue').and.callFake(() => {});
  // auditLogService is private, access via indexer
  const auditSpy = spyOn(component['auditLogService'] as any, 'writeAuditLog').and.callFake(() => {});

  // If _actionModal.hide/show might be called later, provide a stub so no undefined errors
  (component as any)._actionModal = (component as any)._actionModal || { show: () => {}, hide: () => {} };
  spyOn((component as any)._actionModal, 'show').and.callThrough();
  spyOn((component as any)._actionModal, 'hide').and.callThrough();

  // Act
  component.onAcceptButtonClick(ActionType.add);
  tick(); // flush the postRequest observable and subscribe complete()

  // Assert
  expect(postSpy).toHaveBeenCalled();
  expect(genSpy).toHaveBeenCalled();
  expect(setMsgSpy).toHaveBeenCalledWith(jasmine.anything(), component.addSuccessMessage);
  expect(auditSpy).toHaveBeenCalled(); // complete() should have executed and called auditLogService.writeAuditLog()
}));