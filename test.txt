it('LoadDefaultComboBox (robust): complete sets combo data and deep-clones viewchild.options (defensive)', fakeAsync(() => {
  // --- Arrange ---
  // Ensure appConfigService urls exist (private is fine to override)
  (component as any).appConfigService = {
    getAllCategoryUrl: '/api/categories',
    getAllDivisionUrl: '/api/divisions'
  } as any;

  // realistic returned data
  const categories = [{ categoryId: 7, categoryDescription: 'Estate', categoryCode: '4' }];
  const divisions  = [{ divisionId: 20, divisionDesc: 'Division A', divisionCd: 'D1' }];

  // record urls called
  const calledUrls: string[] = [];

  // Spy getRequest - use substring matching to be robust
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: any) => {
    const s = String(url || '').toLowerCase();
    calledUrls.push(String(url));
    if (s.includes('category') || s.includes('categoryurl')) return of(categories);
    if (s.includes('division') || s.includes('divisionurl')) return of(divisions);
    // fallback so forkJoin still completes
    return of([]);
  });

  // Spy LoadComboBoxData to return mapped arrays used for combo data objects
  const mappedCategories = [{ label: 'Estate', value: '7' }];
  const mappedDivisions  = [{ label: 'Division A', value: '20' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    const lbl = String(label || '').toLowerCase();
    if (lbl.includes('category')) return mappedCategories;
    if (lbl.includes('division')) return mappedDivisions;
    return [];
  });

  // Provide both viewchild name variants so `.options` writes won't crash
  (component as any)._categoryComboBox = { options: null };
  (component as any).categoryComboBox  = (component as any)._categoryComboBox; // alias
  (component as any)._divisionComboBox = { options: null };
  (component as any).divisionComboBox  = (component as any)._divisionComboBox; // alias

  // Prepare a small variety of possible component target properties so we can assert flexibly
  const comboBoxDataCandidates = [
    'categoryComboBoxData',
    'categoryComboBox',           // sometimes used
    '_categoryComboBox',          // sometimes used
  ];
  const divisionCandidates = [
    'divisionComboBoxData',
    'divisionComboBox',
    '_divisionComboBox'
  ];

  // Act
  (component as any).LoadDefaultComboBox();
  tick(); // flush forkJoin

  // --- Debugging helper: if we didn't call expected URLs, fail with calledUrls list for quick diagnosis ---
  const sawCategoryUrl  = calledUrls.some(u => /category/i.test(u));
  const sawDivisionUrl  = calledUrls.some(u => /division/i.test(u));
  if (!sawCategoryUrl || !sawDivisionUrl) {
    fail('LoadDefaultComboBox URL mismatch. Called URLs: ' + JSON.stringify(calledUrls, null, 2));
    return;
  }

  // --- Assertions (flexible): find where the test ended up populating the combo data ---
  // category combo data check: try a few properties where the component may store the mapped options
  const foundCategoryComboData = [
    component['categoryComboBoxData'],
    (component as any).categoryComboBoxData,
    (component as any)._categoryComboBox?.options,
    (component as any).categoryComboBox?.options,
  ].find(x => Array.isArray(x) && x.length > 0);

  expect(foundCategoryComboData).toBeDefined('Category combo data was not set on any of the expected properties.');

  // If categoryComboBoxData was an array of { options: [...] } ensure the inner options match mappedCategories
  if (Array.isArray(foundCategoryComboData) && foundCategoryComboData[0] && (foundCategoryComboData[0] as any).options) {
    expect((foundCategoryComboData[0] as any).options).toEqual(mappedCategories);
  }

  // division combo data check (flexible)
  const foundDivisionComboData = [
    component['divisionComboBoxData'],
    (component as any).divisionComboBoxData,
    (component as any)._divisionComboBox?.options,
    (component as any).divisionComboBox?.options,
  ].find(x => Array.isArray(x) && x.length > 0);

  expect(foundDivisionComboData).toBeDefined('Division combo data was not set on any of the expected properties.');

  if (Array.isArray(foundDivisionComboData) && foundDivisionComboData[0] && (foundDivisionComboData[0] as any).options) {
    expect((foundDivisionComboData[0] as any).options).toEqual(mappedDivisions);
  }

  // deep-clone assertions: the component clones the returned raw arrays into viewchild.options
  expect((component as any)._categoryComboBox.options).toEqual(JSON.parse(JSON.stringify(categories)));
  expect((component as any)._divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));

  // loading should have been cleared (component may set .loading = false in complete)
  if ('loading' in component) {
    expect(component.loading).toBeFalse();
  }
}));