it('onAcceptButtonClick(ActionType.add) - posts, regenerates table, shows success and writes audit log (self-contained)', fakeAsync(() => {
  // --- Arrange / setup everything inside this test (no beforeEach reliance)
  // ensure combobox mocks exist so .value.toString() won't crash
  (component as any)._categoryComboBox = { value: '7' };
  (component as any)._minorComboBox = { value: 'AM1' };

  // IMPORTANT: the array the component will call .find() on must be an array
  component.accountMinors = [
    { acctMnrTypeCode: 'AM1', acctMnrTypeDesc: 'Minor A' }
  ] as any[];

  // set the object that onAcceptButtonClick reads from
  component.catMnrmap = {
    mnrCatId: null,
    acctMnrTypeCd: 'AM1',
    acctMnrTypeDesc: 'Minor A',
    activeIndic: true
  } as any;

  // make validateFormControls allow code path
  spyOn(component as any, 'ValidateFormControls').and.returnValue(false);

  // stub feeApiservice.postRequest to return success observable
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // prevent actual GenerateTableRows side effects
  const generateSpy = spyOn(component as any, 'GenerateTableRows').and.callFake(() => {});
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue').and.callFake(() => {});

  // auditLogService might be private; access via bracket notation
  if (!component['auditLogService']) { component['auditLogService'] = { writeAuditLog: () => {} } as any; }
  const auditSpy = spyOn(component['auditLogService'], 'writeAuditLog').and.callFake(() => {});

  // clear/hide spies
  const clearSpy = spyOn(component as any, 'clearSelection').and.callFake(() => {});
  const modalHideSpy = spyOn((component as any)._actionModal || {}, 'hide').and.callFake(() => {});

  // --- Act
  component.onAcceptButtonClick(ActionType.add);
  tick(); // flush async

  // --- Assert
  expect(postSpy).toHaveBeenCalled();                       // API called
  expect(generateSpy).toHaveBeenCalled();                   // table regenerated on success
  expect(setMsgSpy).toHaveBeenCalledWith(BlockMessageType.success, component.addSuccessMessage);
  expect(auditSpy).toHaveBeenCalled();                      // writeAuditLog invoked on complete()
  expect(clearSpy).toHaveBeenCalled();                      // cleared
  expect(modalHideSpy).toHaveBeenCalled();                  // modal hidden
}));