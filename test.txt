it('onAcceptButtonClick(ActionType.update) - next+complete: regenerates table, shows success and writes audit log', fakeAsync(() => {
  // Arrange
  (component as any).appConfigService = { updateDivisionUrl: '/api/divisions/' } as any;

  component.division = {
    divisionId: 321,
    divisionCd: 'D321',
    divisionDesc: 'Division 321',
    activeIndic: true
  } as any;

  component.selectedDivision = {
    divisionId: 321,
    divisionCd: 'D321-ORIG',
    divisionDesc: 'Orig 321',
    activeIndic: false
  } as any;

  // ensure arrays used by getUpdatedModel() exist (or stub getUpdatedModel)
  component.divisions = [{ divisionId: 321, divisionCd: 'D321', divisionDesc: 'Division 321' }];
  component.costCenters = [{ costCenterId: 1, costCenterNbr: '100', costCenterDesc: 'Cost A' }];

  // viewchild mocks
  (component as any)._costCenterComboBox = { value: '100' };

  // Prevent validateFormControls from blocking
  spyOn(component as any, 'ValidateFormControls').and.returnValue(false);

  // spy GenerateTableRows and SetMessageTypeAndValue
  const genSpy = spyOn(component as any, 'GenerateTableRows').and.callFake(() => {});
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue').and.callFake(() => {});

  // Provide auditLogService if private and give updateAction token
  (component as any).auditLogService = {
    writeAuditLog: () => {},
    updateAction: 'UPDATE',
    addAction: 'ADD'
  } as any;
  const auditSpy = spyOn(component['auditLogService'] as any, 'writeAuditLog').and.callFake(() => {});

  // stub getUpdatedModel to avoid any .find complexity
  spyOn(component as any, 'getUpdatedModel').and.returnValue({ some: 'model' });

  // make putRequest return success (next then complete)
  spyOn(component.feeApiservice, 'putRequest').and.returnValue(of({}));

  // ensure clearSelection/_actionModal exist
  const clearSpy = spyOn(component as any, 'clearSelection').and.callFake(() => {});
  (component as any)._actionModal = (component as any)._actionModal || { hide: () => {} };
  const modalHideSpy = spyOn((component as any)._actionModal, 'hide').and.callFake(() => {});

  // Act
  component.onAcceptButtonClick(ActionType.update);
  tick();

  // Assert next() side-effects
  expect(genSpy).toHaveBeenCalled();
  expect(setMsgSpy).toHaveBeenCalledWith(BlockMessageType.success, component.updateSuccessMessage);

  // complete() -> audit log
  expect(auditSpy).toHaveBeenCalledWith(
    'divisionCd',
    component.division.divisionCd.toString(),
    component.selectedDivision,
    jasmine.any(Object),
    (component as any).auditLogService.updateAction,
    component.PageTitle
  );

  expect(clearSpy).toHaveBeenCalled();
  expect(modalHideSpy).toHaveBeenCalled();
}));