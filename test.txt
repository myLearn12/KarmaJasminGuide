it('logAccountAudit (edit): builds audit trail and includes divisions/cycles/formulas', fakeAsync(() => {
  // Arrange
  component.isCloneAccount = false;
  component.oldAccountValues = { longacctnum: 'OLD-LONG', regionDescription: 'East' } as any;
  component.account = { accountNbr: 'ACC-3', longacctnum: 'NEW-LONG', regionDescription: 'West' } as any;

  (component as any).cbStatus      = { value: ['A'] };
  (component as any).cbDivision    = { value: ['20'] };
  (component as any).cbAltDivision = { value: ['30'] };
  (component as any).cbCycle       = { value: ['5'] };
  (component as any).cbFormula     = { value: ['11'] };
  (component as any).cbCategory    = { value: ['7'] };

  component.regions = [
    { regionId: 1, regionDescription: 'West' },
    { regionId: 2, regionDescription: 'East' }
  ] as any;
  component.divisions = [
    { divisionId: 20, divisionDesc: 'Div A', divisionCd: 'DA' },
    { divisionId: 21, divisionDesc: 'Div B', divisionCd: 'DB' }
  ] as any;
  component.cycles   = [{ cycleId: 5, cycleDesc: 'Cycle 5' }] as any;
  component.formulas = [{ formulaId: 11, formulaDesc: 'Formula 11', formulaCd: 'F11' }] as any;
  component.categories = [{ categoryId: 7, categoryDescription: 'Cat', categoryCode: '7' }] as any;

  spyOn(component.acctService, 'getAccountStatusDesc').and.returnValue('OPEN');
  spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // Act
  (component as any).logAccountAudit();
  tick();

  const [, body] = (component.feeApiservice.postRequest as jasmine.Spy).calls.mostRecent().args as [string, any];
  const data = JSON.parse(body.acctAuditData);
  const merged = `${data[0].OldAccountValue} || ${data[0].NewAccountValue}`;

  // ðŸ‘‡ local helper inside the test
  const norm = (s: string) =>
    s.toLowerCase()
     .replace(/\s+/g, ' ')
     .replace(/\s*-\s*/g, ' ')
     .replace(/\s*,\s*/g, ',')
     .trim();

  const normalized = norm(merged);

  // Assert
  expect(normalized).toContain('long account number: old-long');
  expect(normalized).toContain('long account number: new-long');
  expect(normalized).toContain('division cd desc: div a');
  expect(normalized).toContain('cycle id desc: cycle 5');
  expect(normalized).toContain('formula cd desc: formula 11');
}));
