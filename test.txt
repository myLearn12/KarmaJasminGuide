it('logAccountAudit (edit): with NO changes → does not post, calls showEditSuccess directly', fakeAsync(() => {
  // Arrange
  component.isCloneAccount = false;

  // Current account (keep fields same as old where method compares)
  component.account = {
    accountNbr: 'ACC-4',
    longacctnum: 'SAME',
    accountNm: 'Same Name',
    regionDescription: 'East',
    dateopen: '2025-08-01',
    dateclosed: '',
    estacc: 0,
    revshare: '',
    futureuse: '',
    disposition3: '',
    ofcrNm: '',
    officer: '',
    ozId: '',
    pcanumber: '',
    estpp: 0, actpp: 0, endpp: 0, feepp: 0, cashpp: 0, accepfee: 0
  } as any;

  // Old values equal to current → no diffs
  component.oldAccountValues = {
    longacctnum: 'SAME',
    accountNm: 'Same Name',
    regionDescription: 'East',
    dateopen: '2025-08-01',
    dateclosed: '',
    estacc: 0,
    revshare: '',
    futureuse: '',
    disposition3: '',
    ofcrNm: '',
    officer: '',
    ozId: '',
    pcanumber: '',
    estpp: 0, actpp: 0, endpp: 0, feepp: 0, cashpp: 0, accepfee: 0
  } as any;

  // Combos present (strings/arrays ok — code uses .toString())
  (component as any).cbStatus      = { value: ['A'] };
  (component as any).cbDivision    = { value: ['20'] };
  (component as any).cbAltDivision = { value: null };   // keep null so alt-div check remains equal
  (component as any).cbCycle       = { value: ['5'] };
  (component as any).cbFormula     = { value: ['11'] };
  (component as any).cbCategory    = { value: ['7'] };

  // IMPORTANT: old snapshots must exist & match to avoid false diffs / toString crashes
  component.oldcbStatusValue       = ['A'];
  component.oldcbDivisionValue     = ['20'];
  component.oldcbAltDivisionValue  = null;
  component.oldcbCycleValue        = ['5'];
  component.oldcbFormulaValue      = ['11'];
  component.oldcbCategoryValue     = ['7'];

  // Lookups (some code paths may read these; keep minimal but valid)
  component.regions   = [{ regionId: 2, regionDescription: 'East' }] as any;
  component.divisions = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'DA' }] as any;
  component.cycles    = [{ cycleId: 5,  cycleDesc: 'Cycle 5' }] as any;
  component.formulas  = [{ formulaId: 11, formulaDesc: 'Formula 11', formulaCd: 'F11' }] as any;
  component.categories= [{ categoryId: 7,  categoryDescription: 'Cat', categoryCode: '7' }] as any;

  // Utils used by method (safe stubs)
  spyOn(component.acctService, 'getAccountStatusDesc').and.returnValue('Active');
  const utils = component['utils'] as any;
  spyOn(utils, 'getValidString').and.callFake((x: any) =>
    (x === '' || x === null || x === undefined) ? null : String(x)
  );
  spyOn(utils, 'getFormatedDecimal').and.returnValue('0.00');
  spyOn(utils, 'getDateAndDefaultTime').and.returnValue(null);
  spyOn(utils, 'LoadComboBoxData').and.returnValue([{ label: 'L', value: 'V' }]);
  spyOn(utils, 'getCurrentUser').and.returnValue('u1');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-25T00:00:00');

  // Spies
  const postSpy = spyOn(component.feeApiservice, 'postRequest'); // should NOT be called
  const showEditSpy = spyOn(component as any, 'showEditSuccess');

  // Act
  (component as any).logAccountAudit();
  tick();

  // Assert
  expect(postSpy).not.toHaveBeenCalled();  // no API call when nothing changed
  expect(showEditSpy).toHaveBeenCalled();  // goes directly to success path
}));
