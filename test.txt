it('onUpdateModalClick(): else branch -> prepares model, enables division for tax account and shows action modal', () => {
  // Arrange - ensure else branch
  (component as any).isRowSelected = true;
  (component as any).catGlmap = {
    id: 123,
    categoryId: 'C7',
    divisionId: 20,
    someField: 'value'
  };

  // Provide spies for helpers that the method calls
  const activateSpy = spyOn(component as any, 'ActivateFormControls');
  const initSpy = spyOn(component as any, 'setIntialvalues');
  const catComboSpy = spyOn(component as any, 'getCategoryComboBoxValue');
  const divComboSpy = spyOn(component as any, 'getDivisionComboBoxVal');

  // Make isTaxAccount return true so enableDivision path executes
  spyOn(component as any, 'isTaxAccount').and.returnValue(true);

  // Provide a mock actionModal with show method
  (component as any).actionModal = { show: jasmine.createSpy('show') };

  // Act
  (component as any).onUpdateModalClick();

  // Assert - flags and title/type
  expect((component as any).isReadonly).toBeTrue();
  expect((component as any).actionModalTitle).toBe('Update');
  expect((component as any).actionModalType).toBe((component as any).ActionType?.update ?? (component as any).ActionType); // tolerant check if enum wired differently

  // Assert - helper calls
  expect(activateSpy).toHaveBeenCalled();
  expect(initSpy).toHaveBeenCalled();
  expect(catComboSpy).toHaveBeenCalled();
  expect((component as any).isTaxAccount).toHaveBeenCalled();
  expect(divComboSpy).toHaveBeenCalled();

  // Assert - enableDivision path executed because isTaxAccount returned true
  expect((component as any).enableDivision).toBeTrue();

  // Assert - selectedCatGlmap is a deep copy (not same reference but same content)
  expect((component as any).selectedCatGlmap).toBeDefined();
  expect((component as any).selectedCatGlmap).not.toBe((component as any).catGlmap);
  expect(JSON.stringify((component as any).selectedCatGlmap)).toEqual(JSON.stringify((component as any).catGlmap));

  // Assert - modal shown
  expect((component as any).actionModal.show).toHaveBeenCalled();
});