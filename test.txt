it('showCategoryAmor: should set hideCorporate=false when categoryCode includes "6"', () => {
  // Arrange
  (component as any).cbCategory = { value: '101' };
  (component as any).cbcategory = (component as any).cbCategory; // alias
  component.categories = [
    { categoryId: 101, categoryCode: '16' } as any
  ];

  // Act
  (component as any).showCategoryAmor();

  // Assert
  expect(component.hideCorporate).toBeFalse();
});

it('showCategoryAmor: should set hideCorporate=true when categoryCode does not include "6"', () => {
  // Arrange
  (component as any).cbCategory = { value: '102' };
  (component as any).cbcategory = (component as any).cbCategory;
  component.categories = [
    { categoryId: 102, categoryCode: '11' } as any
  ];

  // Act
  (component as any).showCategoryAmor();

  // Assert
  expect(component.hideCorporate).toBeTrue();
});

it('showCategoryAmor: should set hideEstate=false when categoryCode is "4"', () => {
  // Arrange
  (component as any).cbCategory = { value: '103' };
  (component as any).cbcategory = (component as any).cbCategory;
  component.categories = [
    { categoryId: 103, categoryCode: '4' } as any
  ];

  // Act
  (component as any).showCategoryAmor();

  // Assert
  expect(component.hideEstate).toBeFalse();
});

it('showCategoryAmor: should set hideEstate=true when categoryCode is not "4"', () => {
  // Arrange
  (component as any).cbCategory = { value: '104' };
  (component as any).cbcategory = (component as any).cbCategory;
  component.categories = [
    { categoryId: 104, categoryCode: '7' } as any
  ];

  // Act
  (component as any).showCategoryAmor();

  // Assert
  expect(component.hideEstate).toBeTrue();
});
