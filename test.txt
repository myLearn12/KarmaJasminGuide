it('ValidateFormControls() â†’ marks controls touched & sets required flags + revshare flags', () => {
  const utilsStub = {
    isStringValid: (v: any) => !!v && v.toString().trim().length > 0
  };

  const c = new EditaccountComponent({} as any, {} as any, { pipe: () => of(false), dispatch: () => {} } as any, utilsStub as any, {} as any);

  // --- form controls stubs
  c['fcn_AcctNumb'] = {
    markAsTouched: jasmine.createSpy('markAsTouched'),
    hasError: () => true
  } as any;
  c['fcn_EstAccrual'] = {
    markAsTouched: jasmine.createSpy('markAsTouched'),
    hasError: () => false
  } as any;

  // --- combos
  c['cbStatus']   = { value: null } as any;
  c['cbDivision'] = { value: null } as any;
  c['cbCycle']    = { value: null } as any;
  c['cbofficer']  = { value: null } as any;
  c['cbFormula']  = { value: null } as any;
  c['cbCategory'] = { value: null } as any;
  c['cbAltDivision'] = { value: 'X' } as any;

  // --- account for revshare checks
  c.account = { revshare: '' } as any;

  // --- no-op helpers
  c['setIsRevShareValid']  = () => {};
  c['onoffcrNumberChange'] = () => {};
  c['onFutureUseChange']   = () => {};
  c['onoffNumberChange']   = () => {};
  c['onOzIdChange']        = () => {};

  // act
  (c as any).ValidateFormControls();

  // asserts
  expect(c['fcn_AcctNumb'].markAsTouched).toHaveBeenCalled();
  expect(c['fcn_EstAccrual'].markAsTouched).toHaveBeenCalled();

  expect(c.statusRequired).toBeTrue();
  expect(c.divisionRequired).toBeTrue();
  expect(c.cycleRequired).toBeTrue();
  expect(c.officerRequired).toBeTrue();
  expect(c.formulaRequired).toBeTrue();
  expect(c.categoryRequired).toBeTrue();

  // cbAltDivision has value, revshare invalid => isRevShareReqd true
  expect(c.isRevShareReqd).toBeTrue();
  // altDivisionRequired false because cbAltDivision not null
  expect(c.altDivisionRequired).toBeFalse();
});
