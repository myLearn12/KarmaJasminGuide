it('logAccountAudit: captures Long Account Number difference', fakeAsync(() => {
  component.isCloneAccount = false;
  component.oldAccountValues = { longacctnum: 'OLD-LONG' } as any;
  component.account = { accountNbr: 'A1', longacctnum: 'NEW-LONG', regionDescription: 'East' } as any;

  component.regions = [{ regionId: 1, regionDescription: 'East' }] as any;
  (component as any).cbStatus = { value: ['A'] };
  (component as any).cbDivision = { value: ['20'] };
  component.divisions = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'DA' }] as any;

  spyOn(component.acctService, 'getAccountStatusDesc').and.returnValue('OPEN');
  spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // Act
  (component as any).logAccountAudit();
  tick();

  // Assert â€“ just check longacctnum diff appears
  const [, body] = (component.feeApiservice.postRequest as jasmine.Spy).calls.mostRecent().args;
  const audit = JSON.parse(body.acctAuditData)[0];
  expect(audit.OldAccountValue).toContain('OLD-LONG');
  expect(audit.NewAccountValue).toContain('NEW-LONG');
}));

it('logAccountAudit: captures Account Name difference', fakeAsync(() => {
  component.isCloneAccount = false;
  component.oldAccountValues = { accountNm: 'OLD-NAME' } as any;
  component.account = { accountNbr: 'A1', accountNm: 'NEW-NAME', regionDescription: 'East' } as any;

  component.regions = [{ regionId: 1, regionDescription: 'East' }] as any;
  (component as any).cbStatus = { value: ['A'] };
  (component as any).cbDivision = { value: ['20'] };
  component.divisions = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'DA' }] as any;

  spyOn(component.acctService, 'getAccountStatusDesc').and.returnValue('OPEN');
  spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  (component as any).logAccountAudit();
  tick();

  const [, body] = (component.feeApiservice.postRequest as jasmine.Spy).calls.mostRecent().args;
  const audit = JSON.parse(body.acctAuditData)[0];
  expect(audit.OldAccountValue).toContain('OLD-NAME');
  expect(audit.NewAccountValue).toContain('NEW-NAME');
}));
