it('processRecord: subscription success -> next handler runs, totals set, complete handler called', fakeAsync(() => {
  // Arrange: all-accounts branch
  (component as any).accountRadioButton = { value: '' };
  component.region = { regionId: 99 } as any;
  component.selectedMonthEndDate = new Date('2025-08-01');
  component.currentDateTime = '08:30:00';
  (component as any).appConfigService = { restoreAccountUrl: '/mock-restore/' };

  // stub utils
  const utils = component['utils'] as any;
  spyOn(utils, 'getFormatedDateAndTimeEST').and.returnValue('2025-08-01T08:30:00');
  spyOn(utils, 'getCurrentUser').and.returnValue('tester');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-01T08:30:00');

  // Prepare service response that LoadTableRows will consume
  const apiResponse = [{ recordCount: 3 }];

  // Make postRequest return the response (synchronous next + complete)
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of(apiResponse));

  // Spy LoadTableRows and simulate it setting restoreAccounts (so totals logic sees data)
  const loadSpy = spyOn(component as any, 'LoadTableRows').and.callFake((resp: any) => {
    (component as any).restoreAccounts = resp;
  });

  // Spy modal & dispatch
  const actionModalSpy = spyOn((component as any)._actionModal || (component as any), 'show').and.callFake(() => {});
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // initial state
  component.loading = true;
  component.disbleButtonAction = true;

  // Act
  (component as any).processRecord();
  tick();

  // Assert: next handler executed
  expect(postSpy).toHaveBeenCalled();
  expect(loadSpy).toHaveBeenCalledWith(apiResponse);

  // Totals set from restoreAccounts[0].recordCount
  expect(component.totalRecordCount).toBe(3);
  expect(component.totalSuccessRecordCount).toBe(3);
  expect(component.totalErrorRecordCount).toBe(0);

  // UI/state
  expect(component.isData).toBeFalse();
  expect(component.disbleButtonAction).toBeFalse();
  expect(component.loading).toBeFalse();
  expect(actionModalSpy).toHaveBeenCalled();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));