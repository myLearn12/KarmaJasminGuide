it('ngOnInit(): complete branch -> sets revenue & costcenter combo data, deep-clones viewchild.options, clears loading and dispatches LOADINGACTION(false)', fakeAsync(() => {
  // Arrange ------------------------------------------------------------
  // Ensure the component can build URLs (private appConfigService)
  (component as any).appConfigService = {
    getAllCostCenterUrl: '/api/costcenters',
    getAllRevShareGlAcctMappingUrl: '/api/revshareglacctmaps',
    getAllRevShareTypeCdUrl: '/api/revsharetypes'
  } as any;

  // Return values that forkJoin should yield
  const costCenters = [{ costCenterNbr: '100', costCenterDesc: 'Cost A', costCenterId: 1 }];
  const revShareGlMaps: any[] = []; // used by LoadTableRows; not under test here
  const revenueShares = [{ revShareTypeId: 10, revShareTypeDesc: 'Revenue A', revShareTypeCd: 'R1' }];

  // Capture called URLs for debug if something goes wrong
  const calledUrls: string[] = [];

  // Robust feeApiservice.getRequest stub (substring matching)
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url?: string) => {
    calledUrls.push(String(url));
    const u = String(url || '').toLowerCase();

    if (u.includes('cost') || u.includes('costcenter')) {
      return of(costCenters);
    }
    if (u.includes('revsharegl') || u.includes('revshareglacct')) {
      return of(revShareGlMaps);
    }
    if (u.includes('revsharetype') || u.includes('revsharetypecd')) {
      return of(revenueShares);
    }
    // fallback so test doesn't blow up if URL differs
    return of([]);
  });

  // utils.LoadComboBoxData -> predictable mappings used for combo data
  const mappedRevenue = [{ label: 'Revenue A', value: '10' }];
  const mappedCostcenters = [{ label: 'Cost A', value: '100' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) => {
    if (label === 'revShareTypeDesc') return mappedRevenue;
    if (label === 'costCenterDesc') return mappedCostcenters;
    return [];
  });

  // Provide ViewChild placeholders so component can assign .options
  (component as any)._revenueShareComboBox = { options: null };
  (component as any)._costCenterComboBox = { options: null };

  // Avoid side effects from LoadTableRows (we only care about complete branch)
  if ((component as any).LoadTableRows) {
    spyOn(component as any, 'LoadTableRows').and.callFake(() => {});
  }

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act ----------------------------------------------------------------
  component.ngOnInit();
  tick(); // flush forkJoin next + complete

  // If our string matching missed the expected calls, show helpful error
  const sawCost = calledUrls.some(u => /cost|costcenter/i.test(u));
  const sawRevenue = calledUrls.some(u => /revsharetype|revsharetypecd/i.test(u));
  if (!sawCost || !sawRevenue) {
    fail('ngOnInit test URL mismatch. Calls made: ' + JSON.stringify(calledUrls, null, 2));
    return;
  }

  // Assert -------------------------------------------------------------
  // combo data arrays should be built from utils.LoadComboBoxData results
  expect(component.revenueShareComboBoxData).toEqual([{ options: mappedRevenue }]);
  expect(component.costCenterComboBoxData).toEqual([{ options: mappedCostcenters }]);

  // viewchild options should be deep-cloned copies of original arrays
  expect((component as any)._revenueShareComboBox.options).toEqual(JSON.parse(JSON.stringify(revenueShares)));
  expect((component as any)._costCenterComboBox.options).toEqual(JSON.parse(JSON.stringify(costCenters)));

  // loading cleared and LOADINGACTION(false) dispatched
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));