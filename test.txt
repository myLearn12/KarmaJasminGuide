import { of, throwError } from 'rxjs';
import { fakeAsync, tick } from '@angular/core/testing';

// ... inside your describe for RevshrglacctmapComponent

it('onAcceptButtonClick(ActionType.add): posts payload, regenerates table, shows success and writes audit log (all setup inside test)', fakeAsync(() => {
  // --- Arrange ---
  // minimal viewchild mocks used by the method
  (component as any)._revenueShareComboBox = { value: '10' };
  (component as any)._costCenterComboBox  = { value: '100' };

  // Ensure revenueShares and costCenters are arrays (FIX for ".find is not a function" error)
  component.revenueShares = [
    { revShareTypeId: 10, revShareTypeCd: 'R1', revShareTypeDesc: 'Revenue A', activeIndic: true }
  ] as any[];
  component.costCenters = [
    { costCenterNbr: '100', costCenterDesc: 'Cost A', costCenterId: 1 }
  ] as any[];

  // Component model being added
  component.revShrGlAcctmap = {
    glAccountNumber: 'GL-1',
    abaNbr: 'ABA-1'
  } as any;

  // Provide utils.LoadComboBoxData so any code that uses it won't fail
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string, _c: string, id: string) =>
    arr.map((r: any) => ({ label: r[label], value: String(r[id]) }))
  );

  // Ensure auditLogService exists and spy it
  if (!component['auditLogService']) {
    component['auditLogService'] = { writeAuditLog: () => {} } as any;
  }
  const auditSpy = spyOn(component['auditLogService'], 'writeAuditLog');

  // Spy on helper methods that should be invoked
  const genSpy = spyOn(component as any, 'GenerateTableRows');
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue');
  const clearSpy = spyOn(component as any, 'clearSelection');
  // provide action modal hide to spy (component hides at end)
  (component as any)._actionModal = { hide: () => {} };
  const modalHideSpy = spyOn((component as any)._actionModal, 'hide');

  // Make sure validateFormControls lets the call through
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // feeApiservice.postRequest should return an observable that completes (simulate backend success)
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // If SetMessageTypeAndValue expects BlockMessageType argument, we don't care about exact type here.
  // Act
  component.onAcceptButtonClick(ActionType.add);
  tick(); // flush any async/subscribe

  // --- Assert ---
  expect(postSpy).toHaveBeenCalled();                     // HTTP post called
  expect(genSpy).toHaveBeenCalled();                      // GenerateTableRows called on next
  expect(setMsgSpy).toHaveBeenCalledWith(
    jasmine.anything(),                                   // BlockMessageType
    jasmine.any(String)                                   // success text
  );
  expect(auditSpy).toHaveBeenCalled();                    // audit log written on complete
  expect(clearSpy).toHaveBeenCalled();                    // selection cleared
  expect(modalHideSpy).toHaveBeenCalled();                // modal hidden
}));