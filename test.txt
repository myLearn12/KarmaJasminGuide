import { of, throwError } from 'rxjs';
import { fakeAsync, tick } from '@angular/core/testing';
import { ActionType } from '...'; // import your ActionType enum

it('onAcceptButtonClick(ActionType.update) - complete() should override dates and call auditLogService.writeAuditLog', fakeAsync(() => {
  // Arrange - make validateFormControls allow the action
  spyOn((component as any), 'validateFormControls').and.returnValue(false);

  // Ensure UI combo mocks exist (the method builds payload but we don't assert payload here)
  (component as any)._revenueShareComboBox = { value: '10' };
  (component as any)._costCenterComboBox  = { value: '100' };

  // Set up current model and selected snapshot
  component.revShrGlAcctmap = {
    revShareGlAcctId: 123,
    revShareDesc: 'CHANGED',
    startDt: 'OLD-START',
    endDt: 'OLD-END'
  } as any;

  component.selectedRevShrGlAcctMap = {
    revShareGlAcctId: 123,
    revShareDesc: 'ORIGINAL',
    startDt: 'SELECTED-START',
    endDt: 'SELECTED-END'
  } as any;

  // Spy getUpdatedModel to return a mutable object we can inspect
  const updatedModel: any = { startDt: null, endDt: null };
  const getUpdatedModelSpy = spyOn(component as any, 'getUpdatedModel').and.returnValue(updatedModel);

  // Spy auditLogService.writeAuditLog (auditLogService is private; access via any)
  const auditLogSvc = (component as any).auditLogService || (component as any)['auditLogService'] = { writeAuditLog: () => {} };
  const auditSpy = spyOn(auditLogSvc, 'writeAuditLog').and.callThrough();

  // Make putRequest return an observable that emits and completes.
  // Using of({}) will invoke next() then complete(); complete() executes afterwards.
  const putSpy = spyOn(component.feeApiservice, 'putRequest').and.returnValue(of({}));

  // Act
  component.onAcceptButtonClick(ActionType.update);
  tick(); // flush the observable and handlers

  // Assert: HTTP call happened
  expect(putSpy).toHaveBeenCalled();

  // getUpdatedModel should have been called in complete()
  expect(getUpdatedModelSpy).toHaveBeenCalled();

  // After complete(), component should copy selected snapshot dates into the update model
  expect(updatedModel.startDt).toBe(component.selectedRevShrGlAcctMap.startDt);
  expect(updatedModel.endDt).toBe(component.selectedRevShrGlAcctMap.endDt);

  // auditLogService.writeAuditLog should have been called with the expected args
  expect(auditSpy).toHaveBeenCalledWith(
    'revShareGlAcctId',
    component.revShrGlAcctmap.revShareGlAcctId.toString(),
    component.selectedRevShrGlAcctMap,
    updatedModel,
    (component as any).auditLogService.updateAction, // if updateAction constant exists on service
    component.PageTitle
  );
}));