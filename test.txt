it('LoadComboBoxSelectedValue() does not throw and sets options/values', () => {
  // ctor deps
  const utilsStub = {
    CreateRequiredFormControl: () => ({}),
    CreateDateFormControl: () => ({}),
  };
  const acctServiceStub = {
    loadStatusData: () => [{ label: 'Active', value: 'A' }],
  };
  const storeMock = { pipe: jasmine.createSpy('pipe').and.returnValue(of(false)), dispatch: () => {} };

  const c = new EditaccountComponent({} as any, {} as any, storeMock as any, utilsStub as any, acctServiceStub as any);

  // ðŸ”§ STUB *ALL* possible field names your method might use
  const mk = () => ({ options: [] as any[], value: null as any });
  const names = [
    'cbstatus','cbStatus','cbDivision','cbAltDivision','cbcycle','cbCycle','cbFormula','cbcategory','cbCategory','cbofficer'
  ];
  for (const n of names) (c as any)[n] = mk();

  // ðŸ”§ provide the "*Data" sources used for deep-copy
  (c as any).cbstatusData = [{ label: 'Active', value: 'A' }];
  c.cbDivisionData    = [{ id: '10', code: 'DA', text: 'Div A' }] as any;
  c.cbAltDivisionData = [{ id: '11', code: 'DB', text: 'Div B' }] as any;
  c.cbCycleData       = [{ id: '5',  code: '5',  text: 'Monthly' }] as any;
  c.cbFormulaData     = [{ id: '2',  code: 'F-01', text: 'F1' }] as any;
  c.cbCategoryData    = [{ id: '7',  code: 'C1', text: 'Cat' }] as any;
  c.cbofficerData     = [{ code: '100', text: 'A-Name' }] as any;

  // ðŸ”§ domain lists + account for value mapping
  c.regions    = [{ regionId: 1, regionDescription: 'East' }];
  c.regionid   = '1';
  c.divisions  = [{ divisionId: 10 }, { divisionId: 11 }] as any;
  c.cycles     = [{ cycleId: 5 }] as any;
  c.formulas   = [{ formulaId: 2, formulald: 2 }] as any;
  c.categories = [{ categoryId: 7 }] as any;
  c.officers   = { '100': { officer: '100', officersort: 'A-Name' } } as any;
  c.account    = {
    regionDescription: '',
    status: 'Active',
    divisionId: 10,
    altdivision: 11,
    cycleId: 5,
    formulaId: 2,
    categoryId: 7,
    officer: '100',
  } as any;
  c.oldAccountValues = { regionDescription: '' } as any;
  c.isCloneAccount = false;

  // ðŸ§ª act + assert no-throw
  expect(() => (c as any).LoadComboBoxSelectedValue()).not.toThrow();

  // sanity checksâ€”prove properties were set
  expect((c as any).cbstatus.options.length).toBe(1);
  expect((c as any).cbDivision.options.length).toBe(1);
  expect((c as any).cbAltDivision.options.length).toBe(1);
  expect((c as any).cbcycle.options.length).toBe(1);
  expect((c as any).cbFormula.options.length).toBe(1);
  expect((c as any).cbcategory.options.length).toBe(1);
  expect((c as any).cbofficer.options.length).toBe(1);

  expect(c.account.regionDescription).toBe('East');
  expect(((c as any).cbStatus.value ?? (c as any).cbstatus.value)).toEqual(['A']);
  expect((c as any).cbDivision.value).toEqual(['10']);
  expect((c as any).cbAltDivision.value).toEqual(['11']);
  expect(((c as any).cbCycle.value ?? (c as any).cbcycle.value)).toEqual(['5']);
  expect((c as any).cbFormula.value).toEqual(['2']);
  expect((c as any).cbCategory.value).toEqual(['7']);
  expect((c as any).cbofficer.value).toEqual(['100']);
});
