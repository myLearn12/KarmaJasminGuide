it('SetDeltachanges: should handle error and show message', fakeAsync(() => {
  // Arrange
  const errorMessage = 'Server Error';
  component.selectedAccountNumber = 'ACC-123';

  // hasDeltaChanges â†’ true
  spyOn(component.acctService as any, 'checkDeltaChanges').and.returnValue(true);
  spyOn(component.acctService as any, 'setDeltaChanges').and.stub();

  // readonly getter stub (base URL)
  const appCfg = TestBed.inject(appconfigservice);
  spyOnProperty(appCfg as any, 'getDeltaChangeByAcctUrl', 'get').and.returnValue('/api/delta/');

  const getUrl = `/api/delta/ACC-123`;

  spyOn(component.feeApiservice, 'getRequest')
    .withArgs(getUrl)
    .and.returnValue(throwError(() => ({ error: { statusMessage: errorMessage } })));

  const dispatchSpy = spyOn(component['store'], 'dispatch');
  const errorSpy = spyOn(component as any, 'displayServiceErrors');

  // Act
  (component as any).SetDeltachanges();
  tick();

  // Assert
  expect(component.actionMessage).toBeNull();
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false));
  expect(errorSpy).toHaveBeenCalledWith(errorMessage);
}));
