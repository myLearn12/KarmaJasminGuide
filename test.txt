it('InitialDataLoad: should fetch posting end date and call update and check methods on success', fakeAsync(() => {
  const mockDate = '2025-08-01';
  const mockPostingEndDt = '2025-08-15';

  // Mock services
  spyOn(TestBed.inject(CommonFunctionsService), 'ToDate').and.returnValue(new Date(mockDate));
  spyOn(component['reportService'], 'setPostingEndDate');
  spyOn(component, 'UpdateDetailAuditUrl');
  spyOn(component, 'CheckCuttoffDate');

  const mockResponse = {
    cashpostDt: [{ postingEndDt: mockPostingEndDt }]
  };

  // Spy on feeApiservice.getRequest to return forkJoin observable
  const feeApiSpy = jasmine.createSpyObj('feeApiservice', ['getRequest']);
  component.feeApiservice = feeApiSpy as any;
  feeApiSpy.getRequest.and.returnValue(of(mockResponse.cashpostDt));

  // Act
  component.InitialDataLoad();
  tick();

  // Assert
  expect(component.postingEndDt).toBe(mockPostingEndDt);
  expect(component.reportService.setPostingEndDate).toHaveBeenCalledWith(mockPostingEndDt);
  expect(component.UpdateDetailAuditUrl).toHaveBeenCalled();
  expect(component.CheckCuttoffDate).toHaveBeenCalled();
}));
