it('LoadComboBoxSelectedValue() sets combo options and values', () => {
  const utilsStub = {
    CreateRequiredFormControl: () => ({}),
    CreateDateFormControl: () => ({}),
  };
  const acctServiceStub = {
    loadStatusData: () => [{ label: 'Active', value: 'A' }],
  };
  const storeMock = { pipe: jasmine.createSpy().and.returnValue(of(false)), dispatch: () => {} };

  const c = new EditaccountComponent({} as any, {} as any, storeMock as any, utilsStub as any, acctServiceStub as any);

  // ðŸ‘‡ stub all the ViewChild combo fields
  (c as any).cbstatus = { options: [], value: [] };
  (c as any).cbStatus = (c as any).cbstatus;
  c.cbDivision = { options: [], value: [] } as any;
  c.cbAltDivision = { options: [], value: [] } as any;
  (c as any).cbcycle = { options: [], value: [] };
  c.cbCycle = (c as any).cbcycle as any;
  c.cbFormula = { options: [], value: [] } as any;
  (c as any).cbcategory = { options: [], value: [] };
  c.cbCategory = (c as any).cbcategory as any;
  (c as any).cbofficer = { options: [], value: [] };

  // ðŸ‘‡ supply "Data" arrays the method deep-copies
  (c as any).cbstatusData = [{ label: 'Active', value: 'A' }];
  c.cbDivisionData = [{ id: '10', code: 'DA', text: 'Div A' }] as any;
  c.cbAltDivisionData = [{ id: '11', code: 'DB', text: 'Div B' }] as any;
  c.cbCycleData = [{ id: '5', code: '5', text: 'Monthly' }] as any;
  c.cbFormulaData = [{ formulald: 2, formulaId: 2, formulaDesc: 'F1', formulaCd: 'F-01' }] as any;
  c.cbCategoryData = [{ categoryId: 7, categoryCode: 'C1', categoryDescription: 'Cat' }] as any;
  c.cbofficerData = [{ code: '100', text: 'A-Name' }] as any;

  // ðŸ‘‡ supply related domain data + account to map values
  c.regions = [{ regionId: 1, regionDescription: 'East' }];
  c.regionid = '1';
  c.divisions = [{ divisionId: 10 }, { divisionId: 11 }];
  c.cycles = [{ cycleId: 5 }];
  c.formulas = [{ formulaId: 2, formulald: 2 }];
  c.categories = [{ categoryId: 7 }];
  c.officers = { '100': { officer: '100', officersort: 'A-Name' } } as any;
  c.account = {
    status: 'Active',
    divisionId: 10,
    altdivision: 11,
    cycleId: 5,
    formulaId: 2,
    formulald: 2,
    categoryId: 7,
    officer: '100',
  } as any;
  c.oldAccountValues = { regionDescription: '' } as any;
  c.isCloneAccount = false;

  // act
  (c as any).LoadComboBoxSelectedValue();

  // assert some key outcomes
  expect((c as any).cbstatus.options.length).toBe(1);
  expect(c.cbDivision.options.length).toBe(1);
  expect(c.cbAltDivision.options.length).toBe(1);
  expect((c as any).cbcycle.options.length).toBe(1);
  expect(c.cbFormula.options.length).toBe(1);
  expect((c as any).cbcategory.options.length).toBe(1);
  expect((c as any).cbofficer.options.length).toBe(1);

  expect(c.account.regionDescription).toBe('East');
  expect((c as any).cbstatus.value).toEqual(['A']);
  expect(c.cbDivision.value).toEqual(['10']);
  expect(c.cbAltDivision.value).toEqual(['11']);
  expect((c as any).cbcycle.value).toEqual(['5']);
  expect(c.cbFormula.value).toEqual(['2']);
  expect(c.cbCategory.value).toEqual(['7']);
  expect((c as any).cbofficer.value).toEqual(['100']);
});
