it('onAcceptButtonClick(ActionType.add): posts add payload, regenerates table, shows success and writes audit log (model-shaped)', fakeAsync(() => {
  // allow the function to run (skip early return)
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // private appConfigService (set via cast)
  (component as any).appConfigService = {
    addRevShareDivMappingUrl: '/api/revsharediv/add'
  } as any;

  // --- Mock combo view-child objects used by the method ---
  // The code calls .value.toString() so supply value as array or string
  (component as any)._revenueShareComboBox = { value: ['10'] }; // revShareTypeId = 10
  (component as any)._divisionComboBox     = { value: ['20'] }; // divisionId = 20
  // set alternate names if code uses them
  (component as any).revenueShareComboBox = (component as any)._revenueShareComboBox;
  (component as any).divisionComboBox     = (component as any)._divisionComboBox;

  // Provide realistic lookup arrays so getUpdatedModel() can call .find()
  component.revenueShares = [
    {
      selected: false,
      revShareTypeId: 10,
      revShareTypeCd: 'R1',
      revShareTypeDesc: 'Revenue A',
      activeIndic: true,
      createdBy: 'u',
      createdDt: '2025-01-01',
      updatedBy: null,
      updatedDt: null
    }
  ] as any; // matches RevShareTypeCd shape

  component.divisions = [
    {
      selected: false,
      divisionId: 20,
      divisionCd: 'D1',
      divisionDesc: 'Division A',
      regDesc: null,
      revShareDivId: null,
      revShareTypeId: 10,
      revShareTypeCd: 'R1',
      revShareDesc: 'RevDesc',
      divisionShortNm: null,
      costCenterId: null,
      costCenterNbr: null,
      costCenterDesc: null,
      abaNbr: null,
      typeCd: null,
      activeIndic: true,
      createdBy: 'u',
      createdDt: '2025-01-01',
      updatedBy: null,
      updatedDt: null
    }
  ] as any;

  // utils stubs used in payload / mapping
  const utils = component['utils'] as any;
  spyOn(utils, 'ToEstDate').and.returnValue('2025-09-15T00:00:00.000Z');
  spyOn(utils, 'getCurrentUser').and.returnValue('test-user');
  // if getUpdatedModel uses LoadComboBoxData to map labels, stub it defensively
  spyOn(utils, 'LoadComboBoxData').and.callFake((arr: any[], label: string, _c: string, id: string) =>
    arr.map((r: any) => ({ label: r[label], value: String(r[id]) }))
  );

  // ensure auditLogService exists so spyOn won't throw
  (component as any).auditLogService = { writeAuditLog: () => {} };
  const auditSpy = spyOn((component as any).auditLogService, 'writeAuditLog').and.stub();

  // Side-effect spies and mocks
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({})); // success -> triggers complete
  const genRowsSpy = spyOn(component as any, 'GenerateTableRows').and.stub();
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue').and.stub();
  const clearSpy = spyOn(component as any, 'clearSelection').and.stub();
  (component as any)._actionModal = { hide: jasmine.createSpy('hide') };

  // Act
  component.onAcceptButtonClick(ActionType.add);
  tick(); // flush observables

  // Assert: payload call
  expect(postSpy).toHaveBeenCalledWith(
    (component as any).appConfigService.addRevShareDivMappingUrl,
    jasmine.objectContaining({
      revShareTypeId: '10',        // combo `.value.toString()` used -> string '10'
      divId: '20',                 // combo `.value.toString()` used -> string '20'
      createdBy: 'test-user',
      createdDt: '2025-09-15T00:00:00.000Z'
    })
  );

  // side-effects
  expect(genRowsSpy).toHaveBeenCalled();
  expect(setMsgSpy).toHaveBeenCalledWith(BlockMessageType.success, (component as any).addSuccessMessage);
  expect(auditSpy).toHaveBeenCalled(); // audit called on complete
  expect(clearSpy).toHaveBeenCalled();
  expect((component as any)._actionModal.hide).toHaveBeenCalled();
}));