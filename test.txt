it('LoadDefaultComboBox(): complete -> sets combo data and deep-clones viewchild.options', fakeAsync(() => {
  // Arrange: realistic arrays that the component expects
  const regions = [
    { regionId: 101, regionDescription: 'North Region' }
  ];
  const divisions = [
    { divisionId: 201, divisionDesc: 'Division A', divisionCd: 'DA' }
  ];

  // Spy displayServiceErrors to ensure it's NOT called for the success path
  const displaySpy = spyOn(component as any, 'displayServiceErrors');

  // Spy feeApiservice.getRequest and be robust about the URL argument (may be undefined)
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url?: any) => {
    const u = String(url || '').toLowerCase();
    if (u.includes('region')) return of(regions);
    if (u.includes('division')) return of(divisions);
    // fallback: return empty array so forkJoin still completes
    return of([]);
  });

  // Spy utils.LoadComboBoxData to return expected combo-option shapes
  const mappedRegions = [{ label: 'North Region', value: '101' }];
  const mappedDivisions = [{ label: 'Division A', value: '201' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code?: string, _id?: string) => {
    if (label === 'regionDescription') return mappedRegions;
    if (label === 'divisionDesc') return mappedDivisions;
    return [];
  });

  // Provide ViewChild mocks so .options assignments succeed
  (component as any).regionComboBox = (component as any).regionComboBox || { options: null };
  (component as any).divisionComboBox = (component as any).divisionComboBox || { options: null };

  // Prevent any heavy LoadTableRows logic from interfering with this test (optional)
  if ((component as any).LoadTableRows) {
    spyOn(component as any, 'LoadTableRows').and.callFake(() => {});
  }

  // Act: call the method and flush async operations
  component.LoadDefaultComboBox();
  tick();   // run microtasks (subscribe.next)
  flush();  // clear any timers

  // Assert: combo arrays were set from utils.LoadComboBoxData
  expect(component.regionComboBoxData).toEqual([{ options: mappedRegions }]);
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);

  // Assert: ViewChild .options were deep-cloned from the raw arrays returned by the API
  expect((component as any).regionComboBox.options).toEqual(JSON.parse(JSON.stringify(regions)));
  expect((component as any).divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));

  // displayServiceErrors must not be called for success path
  expect(displaySpy).not.toHaveBeenCalled();
}));