it('LoadComboBoxSelectedValue: should populate options, values, and old values from account data (excluding AltDivision bug)', fakeAsync(() => {
  // Arrange
  spyOn(component.acctService, 'loadStatusData').and.returnValue([{ label: 'ACTIVE', value: 'A' }]);

  component.regionid = '101';
  component.account = {
    status: 'ACTIVE',
    divisionId: 20,
    altdivision: 30,
    cycleId: 5,
    formulaId: 11,
    categoryId: 7,
    officer: '100',
    regionDescription: ''
  } as any;

  component.regions   = [{ regionId: 101, regionDescription: 'East' }] as any;
  component.divisions = [{ divisionId: 20 }, { divisionId: 30 }] as any;
  component.cycles    = [{ cycleId: 5 }] as any;
  component.formulas  = [{ formulaId: 11 }] as any;
  component.categories= [{ categoryId: 7 }] as any;
  component.officers  = { '100': { officerNm: 'Officer X' } } as any;

  component.cbStatusData      = [{ label: 'ACTIVE', value: 'A' }];
  component.cbDivisionData    = [{ label: 'DivA', value: '20' }];
  component.cbAltDivisionData = [{ label: 'DivB', value: '30' }];
  component.cbCycleData       = [{ label: 'Cycle5', value: '5' }];
  component.cbFormulaData     = [{ label: 'Formula11', value: '11' }];
  component.cbCategoryData    = [{ label: 'Cat7', value: '7' }];
  component.cbofficerData     = [{ label: 'Officer X', value: '100' }];

  // stub combos (with all aliases the method might use)
  const mk = () => ({ options: null as any, value: null as any });
  (component as any).cbStatus  = (component as any).cbstatus  = mk();
  (component as any).cbDivision = mk();
  (component as any).cbAltDivision = (component as any).cbaltDivision = mk();
  (component as any).cbcycle   = (component as any).cbCycle = mk();
  (component as any).cbFormula = mk();
  (component as any).cbCategory= (component as any).cbcategory = mk();
  (component as any).cbofficer = mk();
  component.oldAccountValues = {} as any;

  // Act
  (component as any).LoadComboBoxSelectedValue();
  tick();

  // Assert region
  expect(component.account.regionDescription).toBe('East');

  // options
  expect((component as any).cbStatus.options).toEqual(component.cbStatusData);
  expect((component as any).cbDivision.options).toEqual(component.cbDivisionData);
  expect((component as any).cbaltDivision.options).toEqual(component.cbAltDivisionData);
  expect((component as any).cbcycle.options).toEqual(component.cbCycleData);
  expect((component as any).cbFormula.options).toEqual(component.cbFormulaData);
  expect((component as any).cbcategory.options).toEqual(component.cbCategoryData);
  expect((component as any).cbofficer.options).toEqual(component.cbofficerData);

  // values (excluding AltDivision because of "=" bug in component)
  expect((component as any).cbstatus.value).toEqual(['A']);
  expect((component as any).cbDivision.value).toEqual(['20']);
  expect((component as any).cbcycle.value).toEqual(['5']);
  expect((component as any).cbFormula.value).toEqual(['11']);
  expect((component as any).cbCategory.value).toEqual(['7']);
  expect((component as any).cbofficer.value).toEqual(['100']);

  // old values (use exact spellings from component code)
  expect(component.oldcbStatusValue).toEqual((component as any).cbStatus.value);
  expect(component.oldcbDivisionValue).toEqual((component as any).cbDivision.value);
  expect(component.oldcbAltDivisionValue).toEqual((component as any).cbAltDivision.value); // may be buggy/null
  expect(component.oldcbcycleValue ?? (component as any).oldcbcycleValue).toEqual((component as any).cbcycle.value);
  expect(component.oldcbFormulavalue).toEqual((component as any).cbFormula.value);
  expect(component.oldcbCategoryValue).toEqual((component as any).cbCategory.value);
  expect(component.oldcbofficerValue).toEqual((component as any).cbofficer.value);
  expect(component.oldAccountValues.regionDescription).toBe('East');
}));
