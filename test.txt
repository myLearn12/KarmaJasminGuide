it('onUpdateModalClick: else branch - deep clones revShrGlAcctmap, sets values, and shows modal', () => {
  // Arrange: ensure we go into the ELSE branch
  component.isRowSelected = false;

  // Provide a realistic-looking model object on the component
  component.revShrGlAcctmap = {
    revShareGlAcctId: 99,
    revShareDesc: 'Test Rev Share GL Map',
    someOtherField: 'x'
  } as any;

  // Stub ActivateFormControls to avoid side-effects
  spyOn(component as any, 'ActivateFormControls').and.stub();

  // Spy the internal helpers that should be called in the else branch
  const setInitialSpy = spyOn(component as any, 'setIntialValues').and.stub();
  const getRevSpy = spyOn(component as any, 'getRevenueShareComboBoxValue').and.stub();
  const getCostSpy = spyOn(component as any, 'getCostCenterComboBoxValue').and.stub();

  // Ensure modal exists (either actionModal or _actionModal depending on your component)
  // Try both names so test works whichever one your component uses.
  if (!(component as any).actionModal && !(component as any)._actionModal) {
    (component as any).actionModal = { show: () => {} };
  }
  // pick the actual modal object to spy on
  const modalObj = (component as any).actionModal || (component as any)._actionModal;
  const modalSpy = spyOn(modalObj, 'show');

  // Act
  component.onUpdateModalClick();

  // Assert: a deep clone should be created (equal but not same reference)
  expect((component as any).selectedRevShrGlAcctMap).toEqual(component.revShrGlAcctmap);
  expect((component as any).selectedRevShrGlAcctMap).not.toBe(component.revShrGlAcctmap);

  // Assert helpers and modal are called
  expect(setInitialSpy).toHaveBeenCalled();
  expect(getRevSpy).toHaveBeenCalled();
  expect(getCostSpy).toHaveBeenCalled();
  expect(modalSpy).toHaveBeenCalled();

  // Assert title & action type set
  expect(component.actionModalTitle).toBe('Update');
  // ActionType may need to be imported into spec; if not available, ensure it was set
  expect(component.actionModalType).toBeDefined();
});