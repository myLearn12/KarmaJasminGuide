it('getUpdatedModel(): when isTaxAccount true -> sets divisionId, divisionCode, divisionDesc from divisions', () => {
  component.catGlmap = {
    categoryGlId: 1,
    glAcctNbr: 'GL1',
    createdBy: 'u1',
    createdDt: '2025-01-01',
    updatedBy: 'u2',
    updatedDt: '2025-02-01'
  } as any;

  // mocks
  (component as any).divisionComboBox = { value: '20' };
  component.divisions = [
    { divisionId: 20, divisionCd: 'D1', divisionDesc: 'Division A' }
  ] as any[];

  // stub category combo so code before these lines doesnâ€™t crash
  (component as any)._categoryComboBox = { value: '7' };
  (component as any).categoryComboBox = { value: '7' };
  component.categories = [
    { categoryId: 7, categoryDescription: 'Estate', categoryCode: '4' }
  ] as any[];

  spyOn(component as any, 'isTaxAccount').and.returnValue(true);

  const model = (component as any).getUpdatedModel();

  expect(model.divisionId).toBe(20);
  expect(model.divisionCode).toBe('D1');
  expect(model.divisionDesc).toBe('Division A');
});

it('getUpdatedModel(): when isTaxAccount false -> leaves divisionId, divisionCode, divisionDesc unchanged', () => {
  component.catGlmap = {
    categoryGlId: 2,
    glAcctNbr: 'GL2',
    createdBy: 'u1',
    createdDt: '2025-03-01',
    updatedBy: 'u2',
    updatedDt: '2025-04-01'
  } as any;

  // even though divisions exist, they should NOT be used
  (component as any).divisionComboBox = { value: '20' };
  component.divisions = [
    { divisionId: 20, divisionCd: 'D1', divisionDesc: 'Division A' }
  ] as any[];

  // category combo to satisfy earlier parts
  (component as any)._categoryComboBox = { value: '8' };
  (component as any).categoryComboBox = { value: '8' };
  component.categories = [
    { categoryId: 8, categoryDescription: 'Other', categoryCode: '7' }
  ] as any[];

  spyOn(component as any, 'isTaxAccount').and.returnValue(false);

  const model = (component as any).getUpdatedModel();

  // depending on defaults in CategoryGLAcctMapping, check for falsy/undefined
  expect(model.divisionId).toBeFalsy();
  expect(model.divisionCode).toBeFalsy();
  expect(model.divisionDesc).toBeFalsy();
});