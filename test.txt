it('onAcceptButtonClick(ActionType.add) - posts, regenerates table, shows success and writes audit log (accountMinors as array)', fakeAsync(() => {
  // Arrange - make all setup inside this test
  // Make sure combo boxes exist and have values the method will call .toString() on
  (component as any)._categoryComboBox = { value: '7' };
  (component as any)._minorComboBox = { value: 'AM1' };

  // IMPORTANT: accountMinors MUST be an array (so .find/.filter are available)
  component.accountMinors = [
    { acctMnrTypeCode: 'AM1', acctMnrTypeDesc: 'Minor A' }
  ] as any[];

  // The model the UI has populated
  component.catMnrmap = {
    mnrCatId: null,
    acctMnrTypeCd: 'AM1',
    acctMnrTypeDesc: 'Minor A',
    activeIndic: true
  } as any;

  // Make validateFormControls allow execution
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // Spies for side-effects
  const generateSpy = spyOn(component as any, 'GenerateTableRows').and.callFake(() => {});
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue').and.callFake(() => {});
  // auditLogService may be private â€” access via bracket notation
  const auditSpy = spyOn(component['auditLogService'], 'writeAuditLog').and.callFake(() => {});
  const clearSpy = spyOn(component as any, 'clearSelection').and.callFake(() => {});
  const modalHideSpy = spyOn((component as any)._actionModal || {}, 'hide').and.callFake(() => {});

  // Make the POST request succeed
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // Act
  component.onAcceptButtonClick(ActionType.add);
  tick();

  // Assert
  expect(postSpy).toHaveBeenCalled();
  expect(generateSpy).toHaveBeenCalled(); // regenerate table on success
  expect(setMsgSpy).toHaveBeenCalledWith(BlockMessageType.success, component.addSuccessMessage);
  expect(auditSpy).toHaveBeenCalled(); // complete() should write audit log
  // finalization
  expect(clearSpy).toHaveBeenCalled();
  expect(modalHideSpy).toHaveBeenCalled();
}));