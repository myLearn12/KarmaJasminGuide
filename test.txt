it('onSearchButtonClick: when rbnNonTax.value true and request errors -> should call displayServiceErrors, clear catGlmaps, stop loading and dispatch LOADINGACTION(false)', fakeAsync(() => {
  // Arrange: simulate NonTax radio selected
  (component as any).rbnNonTax = { value: true };
  (component as any).rbnTax = { value: false };

  // Mock appConfigService for URL construction
  (component as any).appConfigService = {
    getGetCatGlAcctMappingByIdUrl: '/api/catglmaps/'
  } as any;

  // Spy feeApiservice.getRequest to return an error
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    if (url.endsWith('2')) {
      return throwError({ error: { statusMessage: 'Some error occurred' } });
    }
    return of([]);
  });

  // Spy displayServiceErrors to confirm it gets called with the message
  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.stub();

  // Spy store.dispatch
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.onSearchButtonClick();
  tick(); // flush the subscription

  // Assert
  expect(displaySpy).toHaveBeenCalledWith('Some error occurred');
  expect(component.catGlmaps).toEqual([]); // cleared
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));