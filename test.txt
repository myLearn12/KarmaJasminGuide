// ✅ hasDeltaChanges = true → success path: fetch, paint delta colors, reset flag, stop loading, dispatch
it('SetDeltachanges: when hasDeltaChanges=true → loads deltas, colors fields, and resets flags', fakeAsync(() => {
  // ctor deps
  const utilsStub = {
    CreateRequiredFormControl: () => ({}),
    CreateDateFormControl: () => ({})
  };
  const storeMock = { pipe: jasmine.createSpy('pipe').and.returnValue(of(false)), dispatch: jasmine.createSpy('dispatch') };

  // acctService stub (both name casings used in your code)
  const acctServiceStub = {
    checkDeltaChanges: () => true,
    setDeltaChanges: jasmine.createSpy('setDeltaChanges')
  };

  const component = new EditaccountComponent({} as any, {} as any, storeMock as any, utilsStub as any, acctServiceStub as any);
  (component as any).acctservice = acctServiceStub; // in case lowercase is used inside method

  // URLs & inputs
  component.appConfigService.getDeltaChangeByAcctUrl = '/api/delta/';
  component.selectedAccountNumber = 'ACC-123';

  // initial account (include a key that will match colModNm)
  component.account = {
    status: 'Active'
    // statusBgColor / statusTxtColor will be set by the method
  } as any;

  // delta list returned by API
  const mockDelta = [
    { colModNm: 'status' } as any
  ];

  // fee API spy
  const feeApiSpy = jasmine.createSpyObj('feeApiservice', ['getRequest']);
  component.feeApiservice = feeApiSpy;
  feeApiSpy.getRequest.and.returnValue(of(mockDelta));

  // Act
  (component as any).SetDeltachanges();
  tick();

  // Assert: called with composed URL
  expect(feeApiSpy.getRequest).toHaveBeenCalledWith('/api/delta/ACC-123');

  // result stored
  expect(component.deltaChangeDetails).toEqual(mockDelta);

  // complete handler effects
  expect(component.hideBacktoDetails).toBeTrue();
  expect(component.account.statusBgColor).toBe(component.t3kDeltaBgColor);
  expect(component.account.statusTxtColor).toBe(component.t3kDeltaTextColor);

  // reset flags + loading + dispatch
  expect(acctServiceStub.setDeltaChanges).toHaveBeenCalledWith(false);
  expect(component.loading).toBeFalse();
  expect(storeMock.dispatch).toHaveBeenCalledWith(new LOADINGACTION(false));
}));
