it('ValidateFormControls: marks controls touched and sets required/revshare flags (no officer crashes)', () => {
  // utils + store stubs required by constructor
  const utilsStub = {
    CreateRequiredFormControl: () => ({}),
    CreateDateFormControl: () => ({}),
    isStringValid: (v: any) => !!v && String(v).trim().length > 0, // '' => false
  };
  const storeMock = { pipe: jasmine.createSpy('pipe').and.returnValue(of(false)), dispatch: () => {} };

  const c = new EditaccountComponent(
    {} as any,   // http
    {} as any,   // appConfig
    storeMock as any,
    utilsStub as any,
    {} as any
  );

  // --- form controls used at the start
  c['fcn_AcctNumb'] = { markAsTouched: jasmine.createSpy('markAsTouched'), hasError: () => false } as any;
  c['fcn_EstAccrual'] = { markAsTouched: jasmine.createSpy('markAsTouched'), hasError: () => false } as any;

  // --- combos required by the flags (keep them null to set "required" = true)
  c['cbStatus']   = { value: null } as any;
  c['cbDivision'] = { value: null } as any;
  c['cbCycle']    = { value: null } as any;
  c['cbFormula']  = { value: null } as any;
  c['cbCategory'] = { value: null } as any;
  c['cbAltDivision'] = { value: 'X' } as any; // not null → used for isRevShareReqd

  // (Optional: if your method references cbofficer.value anywhere, keep it present)
  c['cbofficer']  = { value: null } as any;

  // --- account: include officerNm to avoid the crash; others are harmless placeholders
  c.account = {
    revshare: '',    // invalid → isStringValid=false
    officerNm: '',   // <-- prevents TypeError
    officerNum: '',  // safe extra
    ozId: '',        // safe extra
    disp3: ''        // safe extra
  } as any;

  // --- NO-OP helpers so the test only exercises the requested statements
  c['setIsRevShareValid']  = () => {};
  c['onoffcrNumberChange'] = () => {};
  c['onFutureUseChange']   = () => {};
  c['onoffNumberChange']   = () => {};
  c['onOzIdChange']        = () => {};

  // Act
  (c as any).ValidateFormControls();

  // Assert: touched
  expect(c['fcn_AcctNumb'].markAsTouched).toHaveBeenCalled();
  expect(c['fcn_EstAccrual'].markAsTouched).toHaveBeenCalled();

  // Assert: required flags from null values
  expect(c.statusRequired).toBeTrue();
  expect(c.divisionRequired).toBeTrue();
  expect(c.cycleRequired).toBeTrue();
  expect(c.formulaRequired).toBeTrue();
  expect(c.categoryRequired).toBeTrue();

  // Assert: revshare flags
  // cbAltDivision != null AND revshare invalid -> true
  expect(c.isRevShareReqd).toBeTrue();
  // altDivisionRequired requires revshare valid AND cbAltDivision == null -> false here
  expect(c.altDivisionRequired).toBeFalse();
});
