it('logAccountAudit (edit): with changes → posts audit and calls showEditSuccess on complete', fakeAsync(() => {
  // Arrange
  component.isCloneAccount = false;

  // “old vs new” diffs to trigger UPDATE
  component.oldAccountValues = {
    longacctnum: 'OL1',
    regionDescription: 'East'
  } as any;

  component.account = {
    accountNbr: 'ACC-3',
    longacctnum: 'NL1',               // changed
    regionDescription: 'West'         // changed
  } as any;

  // combos + snapshots so .toString() is safe
  (component as any).cbStatus      = { value: ['A'] };
  (component as any).cbDivision    = { value: ['20'] };
  (component as any).cbAltDivision = { value: null };
  (component as any).cbCycle       = { value: ['5'] };
  (component as any).cbFormula     = { value: ['11'] };
  (component as any).cbCategory    = { value: ['7'] };

  component.oldcbStatusValue      = ['A'];
  component.oldcbDivisionValue    = ['20'];
  component.oldcbAltDivisionValue = null;
  component.oldcbCycleValue       = ['5'];
  component.oldcbFormulaValue     = ['11'];
  component.oldcbCategoryValue    = ['7'];

  // lookups
  component.regions = [
    { regionId: 1, regionDescription: 'West' },
    { regionId: 2, regionDescription: 'East' },
  ] as any;

  component.divisions  = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'DA' }] as any;
  component.cycles     = [{ cycleId: 5, cycleDesc: 'Cycle 5' }] as any;
  component.formulas   = [{ formulaId: 11, formulaDesc: 'Formula 11', formulaCd: 'F11' }] as any;
  component.categories = [{ categoryId: 7, categoryDescription: 'Cat', categoryCode: '7' }] as any;

  // stubs
  spyOn(component.acctService, 'getAccountStatusDesc').and.returnValue('Active');
  const utils = component['utils'] as any;
  spyOn(utils, 'getValidString').and.callFake((x: any) =>
    (x === '' || x === null || x === undefined) ? null : String(x)
  );
  spyOn(utils, 'getFormatedDecimal').and.callFake((n: any) => Number(n).toFixed(2));
  spyOn(utils, 'getDateAndDefaultTime').and.callFake((d: any) => (d ? d : null));
  spyOn(utils, 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) =>
    arr.map((r: any) => ({ label: r[label], value: String(r[id]) }))
  );
  spyOn(utils, 'getCurrentUser').and.returnValue('u1');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-25T00:00:00');

  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));
  const showEditSpy = spyOn(component as any, 'showEditSuccess');
  const dispatchSpy = spyOn(component['store'], 'dispatch'); // may not be called in edit success

  // Act
  (component as any).logAccountAudit();
  tick();

  // Assert
  expect(postSpy).toHaveBeenCalled();             // UPDATE audit posted
  expect(component.loading).toBeFalse();          // loading cleared
  expect(showEditSpy).toHaveBeenCalled();         // success handler called

  // Inspect the request body
  const [, body] = postSpy.calls.mostRecent().args as [string, any];
  expect((body as any).acctAuditType).toBe('UPDATE');  // cast to any to avoid TS error

  // optional: verify account number carried through
  expect((body as any).acctNbr).toBe('ACC-3');

  // dispatch isn’t called in edit-success path → assert not called
  expect(dispatchSpy).not.toHaveBeenCalled();
}));
