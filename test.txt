it('OnAccountSelection: should load table rows and enable save button on success', fakeAsync(() => {
  // Arrange
  component.selectedAccountNumber = 'ACC/123';
  component.regionid = 'R1';

  // Simulate the form control is valid (no 'required' error)
  (component as any).fcn_acctNumber = { hasError: (name: string) => false };

  // appConfigService must provide the URL used in the method
  (component as any).appConfigService = {
    getManualFundFeePostingUrl: '/mock-manual-fund-fee/'
  };

  // Prepare mock response
  const mockResponse = [{ id: 1, name: 'row1' }];
  const getSpy = spyOn(component.feeApiservice, 'getRequest').and.returnValue(of(mockResponse));

  // Spy the LoadTableRows and store.dispatch
  const loadSpy = spyOn(component as any, 'LoadTableRows');
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Ensure initial state is different (so we can see the change)
  component.loading = false;
  component.diableSaveButton = true;

  // Act
  component.OnAccountSelection();
  tick();

  // Assert
  expect(getSpy).toHaveBeenCalled(); // HTTP attempted
  const calledUrl = getSpy.calls.mostRecent().args[0] as string;
  expect(calledUrl).toContain('/mock-manual-fund-fee/');
  // encoded account in URL
  expect(calledUrl).toContain(encodeURIComponent(component.selectedAccountNumber));

  expect(loadSpy).toHaveBeenCalledWith(mockResponse);          // LoadTableRows called with response
  expect(component.loading).toBeFalse();                       // loading reset
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false)); // dispatched false
  expect(component.diableSaveButton).toBeFalse();              // save button enabled
}));