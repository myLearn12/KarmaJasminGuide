it('processRecord: all-accts path - on success should call API, load rows, set counts and show action modal', fakeAsync(() => {
  // Arrange
  component.region = { regionId: 99 } as any;

  // Use a Date object for selectedMonthEndDate (component likely expects a Date)
  component.selectedMonthEndDate = new Date('2025-09-01T00:00:00Z');
  // currentDateTime should be a string or whatever your utils expects; keep it simple:
  component.currentDateTime = '00:00:00';

  // appConfig stub
  (component as any).appConfigService = { restoreAccountUrl: '/mock/restore/' };

  // Make the component take the "all accounts path" - in your code snippets it's when accountRadioButton.value === ''
  (component as any).accountRadioButton = { value: '' };
  (component as any)._accountRadioButton = { value: '' };

  // utils stubs
  const utils = component['utils'] as any;
  spyOn(utils, 'getFormatedDateAndTimeEST').and.returnValue('2025-09-01T00:00:00');
  spyOn(utils, 'getCurrentUser').and.returnValue('tester');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-09-01T00:00:00');

  // Prepare API response that matches what the component expects.
  // The component later does: this.restoreAccounts = result; this.totalRecordCount = this.restoreAccounts[0].recordCount;
  const apiResponse = [
    { recordCount: 5, hasError: false, other: 'x' }
  ];

  // Spy postRequest to return the apiResponse
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of(apiResponse));

  // Spy LoadTableRows — when called we emulate the real effect: populate component.restoreAccounts
  const loadSpy = spyOn(component as any, 'LoadTableRows').and.callFake((resp: any) => {
    // emulate what LoadTableRows would do — set restoreAccounts to the payload/response
    component.restoreAccounts = resp;
  });

  // modal and store spies
  (component as any)._actionModal = { show: jasmine.createSpy('show') };
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Set initial states to see changes
  component.loading = true;
  component.disbleButtonAction = true;

  // Act
  component.processRecord();
  tick();

  // Assert: API called
  expect(postSpy).toHaveBeenCalled();
  const [calledUrl, calledPayload] = postSpy.calls.mostRecent().args as [string, any];
  expect(calledUrl).toContain('/mock/restore/');
  expect(Array.isArray(calledPayload)).toBeTrue();

  // LoadTableRows should be called and should have populated restoreAccounts
  expect(loadSpy).toHaveBeenCalledWith(apiResponse);
  expect(Array.isArray(component.restoreAccounts)).toBeTrue();

  // Verify totals are computed from restoreAccounts[0].recordCount
  expect(component.totalRecordCount).toBe(5);
  // Because there were no errors in the mock, success == recordCount, errors == 0
  expect(component.totalSuccessRecordCount).toBe(5);
  expect(component.totalErrorRecordCount).toBe(0);

  // modal shown, loading/flags reset, dispatch called with LOADINGACTION(false)
  expect((component as any)._actionModal.show).toHaveBeenCalled();
  expect(component.loading).toBeFalse();
  expect(component.disbleButtonAction).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.objectContaining({ payload: false }));
}));