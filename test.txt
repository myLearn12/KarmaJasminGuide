it('onCostCenterComboBoxChangeEvent: sets error true when form control has required error', () => {
  // arrange
  component.showCostCenterRequiredError = false;
  (component as any).fcn_costCenterId = { hasError: (_: string) => true } as any;
  (component as any)._costCenterComboBox = { value: '100' };
  (component as any).utils = { isStringValid: jasmine.createSpy('isStringValid').and.returnValue(true) } as any;

  // act
  (component as any).onCostCenterComboBoxChangeEvent();

  // assert
  expect(component.showCostCenterRequiredError).toBeTrue();
});

it('onCostCenterComboBoxChangeEvent: sets error true when no required error but combo value is not a valid string', () => {
  // arrange
  component.showCostCenterRequiredError = false;
  (component as any).fcn_costCenterId = { hasError: (_: string) => false } as any;
  // use an empty string to simulate invalid value (toString() is safe here)
  (component as any)._costCenterComboBox = { value: '' };
  (component as any).utils = { isStringValid: jasmine.createSpy('isStringValid').and.returnValue(false) } as any;

  // act
  (component as any).onCostCenterComboBoxChangeEvent();

  // assert
  expect(component.showCostCenterRequiredError).toBeTrue();
  expect((component as any).utils.isStringValid).toHaveBeenCalledWith(''); // sanity-check
});

it('onCostCenterComboBoxChangeEvent: clears error when control ok and value is valid', () => {
  // arrange
  component.showCostCenterRequiredError = true; // start true to ensure it can be cleared
  (component as any).fcn_costCenterId = { hasError: (_: string) => false } as any;
  (component as any)._costCenterComboBox = { value: '100' };
  (component as any).utils = { isStringValid: jasmine.createSpy('isStringValid').and.returnValue(true) } as any;

  // act
  (component as any).onCostCenterComboBoxChangeEvent();

  // assert
  expect(component.showCostCenterRequiredError).toBeFalse();
  expect((component as any).utils.isStringValid).toHaveBeenCalledWith('100');
});