it('onAcceptButtonClick(ActionType.update) - when putRequest errors should restore revShrdivmap, call displayServiceErrors, clear selection and hide modal', fakeAsync(() => {
  // prevent early exit
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // provide private appConfigService URL
  (component as any).appConfigService = {
    updateRevShareDivMappingUrl: '/api/revsharediv/update/'
  } as any;

  // Prepare model objects used by the method
  component.revShrdivmap = { revShareDivId: 99, revShareTypeId: 10, divId: 20 } as any;
  component.selectedRevShrDivMap = {
    revShareDivId: 99,
    revShareTypeId: 11,
    divId: 21,
    startDt: 'S-DT',
    endDt: 'E-DT'
  } as any;

  // mock combo boxes that method reads (toString() must not blow up)
  (component as any).revenueShareComboBox = { value: ['11'] }; // new revShareTypeId
  (component as any).divisionComboBox     = { value: ['21'] }; // new divId
  // also set underscore variants in case implementation uses them
  (component as any)._revenueShareComboBox = (component as any).revenueShareComboBox;
  (component as any)._divisionComboBox     = (component as any).divisionComboBox;

  // ensure auditLogService exists so method doesn't throw if referenced elsewhere
  (component as any).auditLogService = { writeAuditLog: () => {}, updateAction: 'UPD' };

  // make the API call fail to force the error handler
  spyOn(component.feeApiservice, 'putRequest').and.returnValue(
    throwError(() => ({ error: { statusMessage: 'update failed' } }))
  );

  // spies for side effects
  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.stub();
  const clearSpy = spyOn(component as any, 'clearSelection').and.stub();
  (component as any)._actionModal = { hide: jasmine.createSpy('hide') };

  // ensure store.dispatch exists and is spy-able
  const dispatchSpy = spyOn(component['store'], 'dispatch').and.stub();

  // Act
  component.onAcceptButtonClick(ActionType.update);
  tick();

  // Assert - putRequest called with correct URL (id appended)
  expect(component.feeApiservice.putRequest).toHaveBeenCalledWith(
    (component as any).appConfigService.updateRevShareDivMappingUrl + component.revShrdivmap.revShareDivId,
    jasmine.any(Object)
  );

  // After error handler runs the code does Object.assign(this.revShrdivmap, this.selectedRevShrDivMap)
  expect(component.revShrdivmap.revShareTypeId).toBe(11);
  expect(component.revShrdivmap.divId).toBe(21);

  // displayServiceErrors called with server status message
  expect(displaySpy).toHaveBeenCalledWith('update failed');

  // cleanup: clear selection and hide modal
  expect(clearSpy).toHaveBeenCalled();
  expect((component as any)._actionModal.hide).toHaveBeenCalled();

  // store LOADINGACTION(false) should have been dispatched
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));