it('onAcceptButtonClick(ActionType.update) - on putRequest error restores model and displays error', fakeAsync(() => {
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // combos & models
  (component as any)._revenueShareComboBox = { value: '10' };
  (component as any)._costCenterComboBox = { value: '100' };

  component.selectedRevShrGlAcctMap = {
    revShareGlAcctId: 1,
    glAccountNumber: 'GL-ORIG',
    // ...
  } as any;

  component.revShrGlAcctmap = { // mutated
    revShareGlAcctId: 1,
    glAccountNumber: 'GL-NEW'
  } as any;

  // stub putRequest to throw
  const errorResponse = { error: { statusMessage: 'server error' } };
  spyOn(component.feeApiservice, 'putRequest').and.returnValue(throwError(() => errorResponse));

  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.callFake(() => {});
  const clearSpy = spyOn(component as any, 'clearSelection').and.callFake(() => {});
  spyOn(component['store'], 'dispatch').and.callFake(() => {});

  // Act
  component.onAcceptButtonClick(ActionType.update);
  tick();

  // Assert
  expect(displaySpy).toHaveBeenCalledWith('server error');
  expect(component.revShrGlAcctmap).toEqual(component.selectedRevShrGlAcctMap); // restored
  expect(clearSpy).toHaveBeenCalled();
}));
