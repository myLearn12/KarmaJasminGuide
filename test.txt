// ✅ CloneAccountSetup → when CheckCloneAccount() = true
it('CloneAccountSetup() when clone → updates title, readOnly, zeroes fields, clears revshare', () => {
  const utilsStub = {
    CreateRequiredFormControl: () => ({}),
    CreateDateFormControl: () => ({}),
    numberUnformatter: (n: any) => n, // return the same number; 0 stays 0
  };
  const acctServiceStub = {
    CheckCloneAccount: () => true, // clone mode ON
    loadStatusData: () => [],
  };
  const storeMock = { pipe: jasmine.createSpy('pipe').and.returnValue(of(false)), dispatch: () => {} };

  const c = new EditaccountComponent({} as any, {} as any, storeMock as any, utilsStub as any, acctServiceStub as any);

  // initial state
  c.PageTitle = 'Edit Account Details';
  c.isAcctNumReadOnly = true; // will become false in clone mode
  c.account = {
    estacc: 123, estpp: 1, actpp: 2, endpp: 3, feepp: 4, cashpp: 5, accepfee: 6, revshare: 99
  } as any;

  // act
  c.CloneAccountSetup();

  // assert
  expect(c.isCloneAccount).toBeTrue();
  expect(c.PageTitle).toBe('Clone Account Details');
  expect(c.isAcctNumReadOnly).toBeFalse();

  // numeric fields reset to numberUnformatter(0) -> 0
  expect(c.account.estacc).toBe(0);
  expect(c.account.estpp).toBe(0);
  expect(c.account.actpp).toBe(0);
  expect(c.account.endpp).toBe(0);
  expect(c.account.feepp).toBe(0);
  expect(c.account.cashpp).toBe(0);
  expect(c.account.accepfee).toBe(0);

  // revshare cleared
  expect(c.account.revshare).toBeNull();
});
