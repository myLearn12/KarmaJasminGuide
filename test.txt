// Put these inside the describe for the component
import { of, throwError } from 'rxjs';

it('LoadDefaultComboBox(): complete -> sets combo data, deep-clones viewchild.options and dispatches LOADINGACTION(false)', fakeAsync(() => {
  // Arrange: realistic data returned by APIs
  const categories = [{ categoryId: 7, categoryDescription: 'Estate', categoryCode: '4' }];
  const accountMinors = [{ acctMnrTypeCode: 'AM1', acctMnrTypeDesc: 'Minor A' }];

  // Ensure appConfigService URLs are present (prevents undefined)
  (component as any).appConfigService = (component as any).appConfigService || {};
  (component as any).appConfigService.getAllCategoryUrl = '/api/categories';
  (component as any).appConfigService.getAllAcctMnrTypeUrl = '/api/minors';

  // Spy feeApiservice.getRequest: substring matching (robust)
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url?: string) => {
    const u = String(url || '').toLowerCase();
    if (u.includes('category') || u.includes('/categories')) return of(categories);
    if (u.includes('acctmnr') || u.includes('mnr') || u.includes('minor')) return of(accountMinors);
    // defensive fallback (in case component calls slightly different string)
    if (!url) return of({}); 
    return of([]);
  });

  // Spy mapping helpers to predictable option arrays (these are used for combo data)
  const mappedCategories = [{ label: 'Estate', value: '7' }];
  const mappedMinors = [{ label: 'Minor A', value: 'AM1' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    if (label === 'categoryDescription') return mappedCategories;
    return [];
  });
  spyOn(component['utils'], 'LoadReferenceDataComboBox').and.callFake((arr: any[], label: string) => {
    // this test only needs the returned mappedMinors for acctMinorComboBox
    return mappedMinors;
  });

  // Provide ViewChild mocks so .options assignment won't throw
  (component as any).categoryComboBox = (component as any).categoryComboBox || { options: null };
  (component as any).minorComboBox = (component as any).minorComboBox || { options: null };

  // Spy LoadTableRows (prevent noisy side effects) and store.dispatch
  const loadRowsSpy = spyOn(component as any, 'LoadTableRows').and.callFake(() => {});
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  (component as any).LoadDefaultComboBox();
  tick(); // flush forkJoin + subscribe complete

  // Assert: component combo arrays set from mapping helpers
  expect(component.categoryComboBoxData).toEqual([{ options: mappedCategories }]);
  expect(component.acctMinorComboBoxData).toEqual([{ options: mappedMinors }]);

  // Assert: viewchild.options deep-cloned from API arrays
  expect((component as any).categoryComboBox.options).toEqual(JSON.parse(JSON.stringify(categories)));
  expect((component as any).minorComboBox.options).toEqual(JSON.parse(JSON.stringify(accountMinors)));

  // LOADINGACTION dispatch (component code usually dispatches false on complete) - allow any LOADINGACTION
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));

  // And LoadTableRows was not called by this method (LoadDefaultComboBox just sets combos) â€” if your code does call it, adapt expectation accordingly
  // expect(loadRowsSpy).not.toHaveBeenCalled(); // uncomment only if appropriate for your implementation
}));


it('LoadDefaultComboBox(): error -> calls displayServiceErrors and does not throw', fakeAsync(() => {
  // Arrange: make the API error out
  const serverErr = { error: { statusMessage: 'server failure' } };
  spyOn(component.feeApiservice, 'getRequest').and.returnValue(throwError(() => serverErr));

  // Spy displayServiceErrors
  const displaySpy = spyOn(component as any, 'displayServiceErrors');

  // Provide ViewChild mocks (should not be used in error branch, but keep defensive)
  (component as any).categoryComboBox = (component as any).categoryComboBox || { options: null };
  (component as any).minorComboBox = (component as any).minorComboBox || { options: null };

  // Spy store.dispatch to ensure loader handling (component may dispatch false)
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  (component as any).LoadDefaultComboBox();
  tick();

  // Assert: displayServiceErrors was called with the server message
  expect(displaySpy).toHaveBeenCalledWith('server failure');

  // LOADINGACTION(false) should have been dispatched eventually
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));