it('onAcceptButtonClick(ActionType.add) - posts, regenerates table, shows success and writes audit log (self-contained)', fakeAsync(() => {
  // Arrange: ensure combo box viewchild mocks exist and have .value
  (component as any)._categoryComboBox = { value: '7' };    // selected category id string
  (component as any)._minorComboBox = { value: 'AM1' };     // selected minor code string
  (component as any)._actionModal = { hide: () => {} };    // modal stub

  // IMPORTANT: component.categories must be an array (the cause of "find is not a function")
  component.categories = [
    { categoryId: 7, categoryDescription: 'Estate', categoryCode: '4' }
  ] as any[];

  // Also accountMinors (used for mapping/lookups) must be an array
  component.accountMinors = [
    { acctMnrTypeCode: 'AM1', acctMnrTypeDesc: 'Minor A' }
  ] as any[];

  // The object that will be used to build the payload / getUpdatedModel
  component.catMnrmap = {
    mnrCatId: null,
    glAcctNbr: 0,
    activeIndic: true,
    acctMnrTypeCd: 'AM1',
    acctMnrTypeDesc: 'Minor A'
  } as any;

  // Make validateFormControls allow execution path
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // Spy/Stub the API postRequest to succeed
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // Prevent side effects and observe expected calls
  const genSpy = spyOn(component as any, 'GenerateTableRows').and.callFake(() => {});
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue').and.callFake(() => {});
  const clearSpy = spyOn(component as any, 'clearSelection').and.callFake(() => {});
  const modalHideSpy = spyOn((component as any)._actionModal, 'hide').and.callFake(() => {});

  // auditLogService is often private; ensure it exists and spy on method
  if (!component['auditLogService']) {
    component['auditLogService'] = { writeAuditLog: (_a: any, _b: any, _c: any, _d: any, _e: any, _f: any) => {} } as any;
  }
  const auditSpy = spyOn(component['auditLogService'], 'writeAuditLog').and.callFake(() => {});

  // Act
  component.onAcceptButtonClick(ActionType.add);
  tick(); // run micro/macro tasks

  // Assert
  expect(postSpy).toHaveBeenCalled(); // API called
  expect(genSpy).toHaveBeenCalled();  // table regenerated on success
  expect(setMsgSpy).toHaveBeenCalledWith(BlockMessageType.success, component.addSuccessMessage);
  expect(auditSpy).toHaveBeenCalled(); // audit written in complete
  expect(clearSpy).toHaveBeenCalled(); // cleared
  expect(modalHideSpy).toHaveBeenCalled(); // modal hidden
}));