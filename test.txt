it('ngOnInit complete: sets combo data, viewchild options, clears loading and dispatches LOADINGACTION(false)', fakeAsync(() => {
  // arrange
  spyOn(component['authService'], 'canHideFinanceAdminControls').and.returnValue(false);

  // set (private) appConfigService on component for exact URL matching in test
  (component as any).appConfigService = {
    getAllCostCenterUrl: '/api/costcenters',
    getAllRevShareDivMappingUrl: '/api/revsharedivmaps',
    getAllRevShareTypeCdUrl: '/api/revsharetypes',
    getAllDivisionUrl: '/api/divisions'
  } as any;

  // realistic responses
  const costcenters = [{ id: 1 }];
  const revShareDivMaps: any[] = [];
  const revenueShares = [{ revShareTypeId: 10, revShareTypeDesc: 'Revenue A', revShareTypeCd: 'R1' }];
  const divisions = [{ divisionId: 20, divisionDesc: 'Division A', divisionCd: 'D1' }];

  // stub feeApiservice.getRequest to return correct observables for the exact URLs
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    if (url === (component as any).appConfigService.getAllCostCenterUrl) return of(costcenters);
    if (url === (component as any).appConfigService.getAllRevShareDivMappingUrl) return of(revShareDivMaps);
    if (url === (component as any).appConfigService.getAllRevShareTypeCdUrl) return of(revenueShares);
    if (url === (component as any).appConfigService.getAllDivisionUrl) return of(divisions);
    return of(null);
  });

  // make LoadComboBoxData produce deterministic mapped arrays
  const mappedRevenue = [{ label: 'Revenue A', value: '10' }];
  const mappedDivisions = [{ label: 'Division A', value: '20' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    if (label === 'revShareTypeDesc') return mappedRevenue;
    if (label === 'divisionDesc') return mappedDivisions;
    return [];
  });

  // provide ViewChild mocks so .options assignments don't throw
  (component as any)._revenueShareComboBox = { options: null };
  (component as any).revenueShareComboBox = (component as any)._revenueShareComboBox;
  (component as any)._divisionComboBox = { options: null };
  (component as any).divisionComboBox = (component as any)._divisionComboBox;

  // stub heavy UI methods that ngOnInit might call
  spyOn(component as any, 'LoadTableRows').and.stub();

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // act
  component.ngOnInit();
  tick(); // flush forkJoin subscribe next+complete

  // assert combo data built with mapped options
  expect(component.revenueShareComboBoxData).toEqual([{ options: mappedRevenue }]);
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);

  // assert viewchild .options deep-cloned from the raw arrays returned
  expect((component as any)._revenueShareComboBox.options).toEqual(JSON.parse(JSON.stringify(revenueShares)));
  expect((component as any)._divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));

  // loading turned off and LOADINGACTION(false) dispatched
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));