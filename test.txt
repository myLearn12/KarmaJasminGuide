it('OnDivisionChange: when mapping exists and region differs sets newRegion fields and shows action modal', fakeAsync(() => {
  // Arrange
  // value chosen â†’ '30' (string so .toString() works)
  (component as any).cbDivision = { value: '30' };

  // current account in region "1"
  component.account = { divisionId: 10, regionId: '1' } as any;

  // divisions & mapping for the chosen division
  component.divisions = [
    { divisionId: 10, divisionDesc: 'Div A' },
    { divisionId: 30, divisionDesc: 'Div C' },
  ] as any[];

  component.regionDivisions = [
    { divisionId: 30, regionId: 2, regionDesc: 'South' }, // maps 30 -> region 2
  ] as any[];

  // revShareDivMappingMessage is called unconditionally at start
  spyOn(component as any, 'revShareDivMappingMessage');

  // ðŸ”§ modal spy must cover both field names used in code
  const modalSpy = jasmine.createSpyObj('modal', ['show']);
  (component as any).actionModal = modalSpy;
  (component as any)._actionModal = modalSpy; // in case component uses this name elsewhere

  // Act
  (component as any).OnDivisionChange();
  tick();

  // Assert
  expect((component as any).revShareDivMappingMessage).toHaveBeenCalled();

  // newRegion resolved correctly
  expect(component.newRegionId).toBe(2);
  expect(component.newRegionDesc).toBe('South');

  // Title/message prepared
  expect(component.actionModelTitle).toContain('Region Modified');
  expect(component.actionModelMessage).toContain('belongs to South Region');

  // âœ… modal should be shown
  expect(modalSpy.show).toHaveBeenCalled();
}));
