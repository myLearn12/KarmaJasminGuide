it('OnAccountSelection: should reset data and disable save button on API error', fakeAsync(() => {
  // Arrange
  component.selectedAccountNumber = 'ACC/123';
  component.regionid = 'R1';

  // Simulate the form control is valid (no 'required' error)
  (component as any).fcn_acctNumber = { hasError: (name: string) => false };

  // appConfigService must provide the URL used in the method
  (component as any).appConfigService = {
    getManualFundFeePostingUrl: '/mock-manual-fund-fee/'
  };

  // Make feeApiservice.getRequest throw an error
  const mockError = { error: { statusMessage: 'Fetch failed' } };
  const getSpy = spyOn(component.feeApiservice, 'getRequest')
    .and.returnValue(throwError(() => mockError));

  // Spy side-effect methods used in error branch
  const resetSpy = spyOn(component as any, 'resetData');
  const displaySpy = spyOn(component as any, 'displayServiceErrors');
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.OnAccountSelection();
  tick();

  // Assert
  // ensure getRequest was attempted with constructed URL
  expect(getSpy).toHaveBeenCalled();
  const calledUrl = getSpy.calls.mostRecent().args[0] as string;
  expect(calledUrl).toContain('/mock-manual-fund-fee/');
  // ensure error branch effects ran
  expect(resetSpy).toHaveBeenCalled();
  expect(displaySpy).toHaveBeenCalledWith('Fetch failed');
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false));
  expect(component.diableSaveButton).toBeTrue();
}));