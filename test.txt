it('onAcceptButtonClick(ActionType.update) - on put error should restore selected, call displayServiceErrors and still clear/hide', fakeAsync(() => {
  // Arrange - put all setup inside test
  (component as any)._regionComboBox = { value: '1' };
  (component as any)._divisionComboBox = { value: '2' };

  // original snapshot (should be restored on error)
  component.selectedRegDivMap = {
    regDivId: 99,
    regionId: 1,
    divisionId: 2,
    activeIndic: true
  } as any;

  // mutated model simulating user edits
  component.regdivmap = {
    regDivId: 99,
    regionId: 11,
    divisionId: 22,
    activeIndic: false
  } as any;

  // spies
  const displaySpy = spyOn(component as any, 'displayServiceErrors');
  const clearSpy = spyOn(component as any, 'clearselection');
  const modalHideSpy = spyOn((component as any)._actionModal || {}, 'hide').and.callFake(() => {});
  spyOn(component as any, 'validateFormControls').and.returnValue(false); // allow method to proceed

  // make putRequest return an error
  const errorResponse = { error: { statusMessage: 'server failed' } };
  const putSpy = spyOn(component.feeApiservice, 'putRequest').and.returnValue(throwError(() => errorResponse));

  // Act
  component.onAcceptButtonClick(ActionType.update);
  tick();

  // Assert HTTP invoked and model restored
  expect(putSpy).toHaveBeenCalled();
  expect(component.regdivmap).toEqual(component.selectedRegDivMap, 'regdivmap should be restored to snapshot on error');
  expect(displaySpy).toHaveBeenCalledWith('server failed');
  expect(clearSpy).toHaveBeenCalled();
  expect(modalHideSpy).toHaveBeenCalled();
}));