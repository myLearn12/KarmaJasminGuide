it('getUpdatedModel(): robust - does not throw and builds expected fields when combos and arrays present', () => {
  // make sure everything used by method exists and is non-null
  component.divisions = [
    { divisionId: 20, divisionCd: 'D1', divisionDesc: 'Division A', costCenterId: 1 }
  ] as any;
  component.costCenters = [
    { costCenterId: 1, costCenterNbr: '100', costCenterDesc: 'Cost A' }
  ] as any;

  // Some code paths use _divisionComboBox, others divisionComboBox â€” set both
  (component as any)._divisionComboBox = { value: '20' }; // common string form
  (component as any).divisionComboBox  = { value: 20 };   // number form also present in some apps

  // Same for cost center combos (some methods use _costCenterComboBox)
  (component as any)._costCenterComboBox = { value: '100' };
  (component as any).costCenterComboBox  = { value: '100' };

  // Provide the source model object the method reads from
  component.altdivabacostcntrmap = {
    altDivIdCostCntrMapId: 55,
    abaNbr: 'ABA-001',
    creatById: 'creator',
    creatDt: '2025-08-01T00:00:00',
    updtById: 'upd',
    updtDt: '2025-08-02T00:00:00'
  } as any;

  // Act: call the method under test. Wrap with try/catch to surface errors in test output.
  let updated: any;
  try {
    updated = (component as any).getUpdatedModel();
  } catch (err) {
    // Fail with helpful diagnostics instead of uncaught error
    fail('getUpdatedModel threw: ' + (err && err.message) + '\n' +
      'divisionComboBox=' + JSON.stringify((component as any).divisionComboBox) + '\n' +
      '_divisionComboBox=' + JSON.stringify((component as any)._divisionComboBox) + '\n' +
      'costCenters=' + JSON.stringify(component.costCenters) + '\n' +
      'divisions=' + JSON.stringify(component.divisions));
    return;
  }

  // Basic expectations (defensive)
  expect(updated).toBeDefined();
  expect(updated.altDivIdCostCntrMapId).toBe(55);
  expect(updated.altDivisionCd).toBe('D1');
  expect(updated.altDivisionDesc).toBe('Division A');
  expect(updated.abaNbr).toBe('ABA-001');
  expect(updated.costCenterNbr).toBe('100');
  expect(updated.costCenterDesc).toBe('Cost A');
});
