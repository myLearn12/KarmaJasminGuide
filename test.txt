import { fakeAsync, tick } from '@angular/core/testing';
import { of, throwError } from 'rxjs';

it('onAcceptButtonClick(ActionType.update) - error: restores model and displays service error (DivisionComponent)', fakeAsync(() => {
  // Arrange (self-contained)
  (component as any).appConfigService = { updateDivisionUrl: '/api/divisions/' } as any;

  // mutated division (as if user edited)
  component.division = {
    divisionId: 197,
    divisionCd: 'D-NEW',
    divisionDesc: 'New Desc',
    activeIndic: true
  } as any;

  // snapshot to restore on error
  component.selectedDivision = {
    divisionId: 197,
    divisionCd: 'D-ORIG',
    divisionDesc: 'Orig Desc',
    activeIndic: false
  } as any;

  // Provide any collections used by getUpdatedModel() or other code
  component.costCenters = [{ costCenterId: 1, costCenterNbr: '100', costCenterDesc: 'Cost A' }];
  component.divisions = [{ divisionId: 197, divisionCd: 'D-NEW', divisionDesc: 'Division 197' }];

  // Provide viewchild combo values that the method may call .toString() on
  (component as any)._costCenterComboBox = { value: '100' };

  // Prevent validation from short-circuiting
  spyOn(component as any, 'ValidateFormControls').and.returnValue(false);

  // Spy displayServiceErrors
  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.callFake(() => {});

  // make putRequest throw
  const serverError = { error: { statusMessage: 'Server failure updating division' } };
  spyOn(component.feeApiservice, 'putRequest').and.returnValue(throwError(() => serverError));

  // ensure clearSelection / hide exist
  const clearSpy = spyOn(component as any, 'clearSelection').and.callFake(() => {});
  (component as any)._actionModal = (component as any)._actionModal || { hide: () => {} };
  const modalHideSpy = spyOn((component as any)._actionModal, 'hide').and.callFake(() => {});

  // Act
  component.onAcceptButtonClick(ActionType.update);
  tick();

  // Assert
  expect(displaySpy).toHaveBeenCalledWith('Server failure updating division');
  // division restored to selectedDivision
  expect(component.division).toEqual(jasmine.objectContaining(component.selectedDivision));
  expect(clearSpy).toHaveBeenCalled();
  expect(modalHideSpy).toHaveBeenCalled();
}));