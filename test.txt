it('processRecord: outer postRequest error -> calls onClearButtonClick, shows error, resets loading and dispatches false', fakeAsync(() => {
  // Arrange: ensure we hit the outer (all-accounts) branch
  (component as any).accountRadioButton = { value: '' }; // empty string -> all-accounts path
  component.region = { regionId: 10 } as any;
  component.selectedMonthEndDate = new Date('2025-08-01');
  component.currentDateTime = '10:00:00';

  // stub appConfigService URL used in postRequest
  (component as any).appConfigService = { restoreAccountUrl: '/mock-restore/' };

  // stub utils used before HTTP so no runtime errors
  const utils = component['utils'] as any;
  spyOn(utils, 'getFormatedDateAndTimeEST').and.returnValue('2025-08-01T10:00:00');
  spyOn(utils, 'getCurrentUser').and.returnValue('tester');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-01T10:00:00');

  // Make feeApiservice.postRequest throw for the outer subscription
  const serverError = { error: { statusMessage: 'Outer failed' } };
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(
    throwError(() => serverError)
  );

  // Spies for error branch side-effects
  const clearSpy = spyOn(component as any, 'onClearButtonClick');
  const displaySpy = spyOn(component as any, 'displayServiceErrors');
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // set flags to detect reset
  component.loading = true;
  component.disbleButtonAction = true;

  // Act
  (component as any).processRecord();
  tick(); // flush async

  // Assert
  expect(postSpy).toHaveBeenCalled(); // outer request attempted
  expect(clearSpy).toHaveBeenCalled(); // onClearButtonClick invoked
  expect(displaySpy).toHaveBeenCalledWith('Outer failed'); // error message displayed
  expect(component.loading).toBeFalse(); // loading reset
  expect(component.disbleButtonAction).toBeFalse(); // button re-enabled
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION)); // dispatched (false)
}));