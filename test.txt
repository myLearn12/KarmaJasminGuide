it('showCategoryAmor: sets hideCorporate=false when categoryCode includes "6", and hideEstate=true when selected is not code "4"', () => {
  // cbCategory.value can be string or ['string']; toString() works either way
  (component as any).cbCategory = { value: '101' };
  (component as any).cbcategory = (component as any).cbCategory; // alias used in code

  // Must include:
  // - selected categoryId 101 with code including '6'
  // - a separate category with code '4' for the estate check
  component.categories = [
    { categoryId: 101, categoryCode: '16' } as any, // includes '6' -> hideCorporate=false
    { categoryId: 999, categoryCode: '4' }  as any  // used only for the '4' lookup
  ];

  (component as any).showCategoryAmor();

  expect(component.hideCorporate).toBeFalse(); // because '16' includes '6'
  expect(component.hideEstate).toBeTrue();     // selected 101 != 999 (code '4'), so stays true
});

it('showCategoryAmor: sets hideCorporate=true when categoryCode lacks "6", and hideEstate=false when selected is code "4"', () => {
  (component as any).cbCategory = { value: '103' };
  (component as any).cbcategory = (component as any).cbCategory;

  // Include the selected category with code '4' so the .find(...) doesnâ€™t return undefined
  component.categories = [
    { categoryId: 103, categoryCode: '4' } as any  // selected matches code '4'
  ];

  (component as any).showCategoryAmor();

  expect(component.hideCorporate).toBeTrue();   // '4' does not include '6'
  expect(component.hideEstate).toBeFalse();     // selected matches the '4' category
});
