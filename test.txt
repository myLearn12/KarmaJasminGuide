it('ngOnInit complete: builds combo data, sets viewchild.options, clears loading and dispatches LOADINGACTION(false)', fakeAsync(() => {
  // Arrange
  // sample data returned by the three requests
  const catGlmaps = [{ id: 1, foo: 'bar' }]; // used by LoadTableRows (we don't assert that here)
  const categories = [
    { categoryId: 7, categoryDescription: 'Estate', categoryCode: '4' }
  ];
  const divisions = [
    { divisionId: 20, divisionDesc: 'Division A', divisionCd: 'D1' }
  ];

  // Spy feeApiservice.getRequest so forkJoin receives observables
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    if (String(url).includes(component.appConfigService.getGetCatGlAcctMappingByIdUrl)) {
      return of(catGlmaps);
    }
    if (String(url).includes(component.appConfigService.getAllCategoryUrl)) {
      return of(categories);
    }
    if (String(url).includes(component.appConfigService.getAllDivisionUrl)) {
      return of(divisions);
    }
    return of(null);
  });

  // Provide viewchild mocks so assignments in complete() do not throw
  (component as any)._categoryComboBox = { options: null };
  (component as any).divisionComboBox = { options: null };

  // Make utils.LoadComboBoxData return the mapped arrays used for combo box data
  const mappedCategories = [{ label: 'Estate', value: '7' }];
  const mappedDivisions  = [{ label: 'Division A', value: '20' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    if (label === 'categoryDescription') return mappedCategories;
    if (label === 'divisionDesc')    return mappedDivisions;
    return [];
  });

  // Spy store.dispatch
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Also spy LoadTableRows to avoid side-effects (ngOnInit calls it in next)
  spyOn(component as any, 'LoadTableRows').and.stub();

  // Act
  component.ngOnInit();
  tick(); // flush forkJoin, next + complete handlers

  // Assert: combo data arrays built using utils.LoadComboBoxData
  expect(component.categoryComboBoxData).toEqual([{ options: mappedCategories }]);
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);

  // Assert: ViewChild options set to deep-cloned arrays (original categories/divisions preserved shape)
  expect((component as any)._categoryComboBox.options).toEqual(JSON.parse(JSON.stringify(categories)));
  expect((component as any).divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));

  // loading turned off and LOADINGACTION(false) dispatched
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));