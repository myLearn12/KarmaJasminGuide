it('InitialDataLoad: should fetch posting end date and call update and check methods on success', fakeAsync(() => {
  const mockDate = '2025-08-01';
  const mockPostingEndDt = '2025-08-15';
  const innerTabData = [{ id: 1 }, { id: 2 }];

  // Mock utils date
  spyOn(TestBed.inject(CommonFunctionsService), 'ToDate').and.returnValue(new Date(mockDate));

  // Mock services
  const reportSvc = TestBed.inject(DetailauditreportService);
  const setPostingSpy = spyOn(reportSvc, 'setPostingEndDate');
  const showScreenSpy = spyOn(reportSvc, 'showReportScreen').and.returnValue(true);
  const setTabSpy = spyOn(reportSvc, 'setDetailAuditReportTab');

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Mock feeApiService.getRequest so forkJoin works normally
  const feeApiSpy = jasmine.createSpyObj('feeApiservice', ['getRequest']);
  component.feeApiservice = feeApiSpy as any;

  // First call → accrualCashpostDt API
  feeApiSpy.getRequest
    .withArgs(jasmine.stringMatching('getAccrualCashpostDtUrl'))
    .and.returnValue(of({ cashpostDt: [{ postingEndDt: mockPostingEndDt }] }));

  // Second call → changeReportTabData API
  feeApiSpy.getRequest
    .withArgs(jasmine.stringMatching('changeReportTabDataUrl'))
    .and.returnValue(of({ changeReportTabData: innerTabData }));

  // Act
  component.InitialDataLoad();
  tick();

  // Assert
  expect(component.postingEndDt).toBe(mockPostingEndDt);
  expect(setPostingSpy).toHaveBeenCalledWith(mockPostingEndDt);
  expect(showScreenSpy).toHaveBeenCalledWith(mockPostingEndDt);
  expect(setTabSpy).toHaveBeenCalledWith(innerTabData);
  expect(component.showReportScreens).toBeTrue();
  expect(dispatchSpy).toHaveBeenCalled(); // LOADINGACTION(true/false)
}));
