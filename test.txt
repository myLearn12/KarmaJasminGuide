// ✅ hasDeltaChanges = true → loads deltas, paints colors, resets flags
it('SetDeltaChanges: when hasDeltaChanges=true → loads deltas, colors fields, and resets flags', fakeAsync(() => {
  // Make sure we have a selected acct number
  component.selectedAccountNumber = 'ACC-123';

  // --- stub the *private* acctService
  const privAcct = (component as any).acctService;
  spyOn(privAcct, 'checkDeltaChanges').and.returnValue(true);
  spyOn(privAcct, 'setDeltaChanges').and.stub();

  // (your code sometimes uses lowercase acctservice — cover that too if present)
  const privAcctLower = (component as any).acctservice;
  if (privAcctLower && privAcctLower !== privAcct) {
    spyOn(privAcctLower, 'checkDeltaChanges').and.returnValue(true);
    spyOn(privAcctLower, 'setDeltaChanges').and.stub();
  }

  // --- stub readonly URL getter
  spyOnProperty(component.appConfigService as any, 'getDeltaChangeByAcctUrl', 'get')
    .and.returnValue('/api/delta/');

  // --- API returns a delta for "status"
  const feeSpy = spyOn(component.feeApiservice as any, 'getRequest')
    .and.returnValue(of([{ colModNm: 'status' }]));

  // minimal account to paint onto
  component.account = { status: 'Active' } as any;

  // --- call method (tolerate name variants)
  const fn =
    (component as any).SetDeltaChanges ??
    (component as any).SetDeltachanges ??
    fail('SetDeltaChanges/SetDeltachanges not found');
  fn.call(component);
  tick();

  // --- assertions
  expect(feeSpy).toHaveBeenCalledWith('/api/delta/ACC-123');
  expect(component.deltaChangeDetails.length).toBe(1);
  expect(component.hideBacktoDetails).toBeTrue();

  // dynamic color keys
  const bgKey = 'statusBgColor';
  const txtKey = 'statusTxtColor';
  expect((component.account as any)[bgKey]).toBe(component.t3kDeltaBgColor);
  expect((component.account as any)[txtKey]).toBe(component.t3kDeltaTextColor);

  expect(privAcct.setDeltaChanges).toHaveBeenCalledWith(false);
  if (privAcctLower?.setDeltaChanges) {
    expect(privAcctLower.setDeltaChanges).toHaveBeenCalledWith(false);
  }
  expect(component.loading).toBeFalse();
  expect((component as any).store.dispatch).toHaveBeenCalledWith(new LOADINGACTION(false));
}));
