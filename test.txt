import { of } from 'rxjs';
import { fakeAsync, tick } from '@angular/core/testing';

it('onAcceptButtonClick(ActionType.update): on complete should override start/end dates and call auditLogService.writeAuditLog', fakeAsync(() => {
  // Arrange
  (component as any)._revenueShareComboBox = { value: '10' };
  (component as any)._costCenterComboBox  = { value: '100' };

  // baseline + selected snapshot
  component.selectedRevShrGlAcctMap = {
    revShareGlAcctId: 1,
    startDt: '2020-01-01',
    endDt: '2020-12-31'
  } as any;

  component.revShrGlAcctmap = {
    revShareGlAcctId: 1,
    startDt: 'NEW-START',
    endDt: 'NEW-END'
  } as any;

  // spy getUpdatedModel to return a dummy model we can check
  const dummyModel: any = { startDt: '', endDt: '' };
  const getUpdatedSpy = spyOn(component as any, 'getUpdatedModel').and.returnValue(dummyModel);

  // spy auditLogService
  const auditSpy = spyOn(component.auditLogService, 'writeAuditLog');

  // stub putRequest so it completes immediately (no next/error)
  spyOn(component.feeApiservice, 'putRequest').and.returnValue(of().pipe());

  // allow execution to reach subscribe
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // Act
  component.onAcceptButtonClick(ActionType.update);
  tick(); // flush async complete

  // Assert
  expect(getUpdatedSpy).toHaveBeenCalled();

  // after complete, startDt/endDt copied from selectedRevShrGlAcctMap
  expect(dummyModel.startDt).toBe(component.selectedRevShrGlAcctMap.startDt);
  expect(dummyModel.endDt).toBe(component.selectedRevShrGlAcctMap.endDt);

  // audit log called with proper arguments
  expect(auditSpy).toHaveBeenCalledWith(
    'revShareGlAcctId',
    component.revShrGlAcctmap.revShareGlAcctId.toString(),
    component.selectedRevShrGlAcctMap,
    dummyModel,
    component.auditLogService.updateAction,
    component.PageTitle
  );
}));