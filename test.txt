import { fakeAsync, tick } from '@angular/core/testing';
import { throwError, of } from 'rxjs';

// Make sure LOADINGACTION is imported in your spec file (same symbol used by the component)
import { LOADINGACTION } from 'path/to/your/actions';

it('GenerateTableRows(): when API errors -> should call displayServiceErrors, clear loading, and dispatch LOADINGACTION(false)', fakeAsync(() => {
  // Arrange

  // Ensure private store is a spy object
  (component as any).store = jasmine.createSpyObj('store', ['dispatch']);

  // Ensure feeApiservice exists and getRequest will throw
  (component as any).feeApiservice = (component as any).feeApiservice || {};
  spyOn((component as any).feeApiservice, 'getRequest').and.returnValue(throwError(() => ({ error: { statusMessage: 'Server failure during GenerateTableRows' } })));

  // If component.displayServiceErrors is a private method, cast and spy it
  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.callFake(() => {});

  // Prevent LoadTableRows from running (we only assert error path)
  if ((component as any).LoadTableRows) {
    spyOn(component as any, 'LoadTableRows').and.callFake(() => {});
  }

  // Initialize loading to true to assert it becomes false after error
  component.loading = true;

  // Act
  (component as any).GenerateTableRows();
  tick();

  // Assert
  expect(displaySpy).toHaveBeenCalledWith('Server failure during GenerateTableRows');
  expect(component.loading).toBeFalse();
  expect((component as any).store.dispatch).toHaveBeenCalledWith(new LOADINGACTION(false));
}));