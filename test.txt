it('ngOnInit(): complete -> should build combo data, deep-clone options, clear loading and dispatch LOADINGACTION(false)', fakeAsync(() => {
  // Arrange
  // ensure auth check returns something predictable if used in ngOnInit()
  spyOn((component as any).authService, 'canHideActionControls').and.returnValue(false);

  // stub appConfigService endpoints on the component (private is fine via cast)
  (component as any).appConfigService = {
    getAllAutocomUrl: '/api/autocoms',
    getAllRegionUrl: '/api/regions',
    getAllControlIdUrl: '/api/controlIds'
  } as any;

  // data that forkJoin should provide
  const autocoms = [{ id: 1, name: 'A' }];
  const regions = [{ regionId: 10, regionDescription: 'Region X' }];
  const controlIds = [{ conId: 200, controlDesc: 'Control 200' }];

  // capture called urls (helpful if test fails)
  const calledUrls: string[] = [];

  // Spy feeApiservice.getRequest â€” robust string guard before includes
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    calledUrls.push(String(url));
    const u = String(url || '').toLowerCase();

    if (u.includes('autocom') || u.includes('autocoms')) return of(autocoms);
    if (u.includes('region') || u.includes('regions')) return of(regions);
    if (u.includes('controlid') || u.includes('controlid') || u.includes('control')) return of(controlIds);

    // fallback so test doesn't break for unexpected calls
    return of([]);
  });

  // Spy utils.LoadComboBoxData to return predictable mapped arrays
  const mappedRegions = [{ label: 'Region X', value: '10' }];
  const mappedControlIds = [{ label: 'Control 200', value: '200' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) => {
    if (label === 'regionDescription') return mappedRegions;
    if (label === 'controlDesc') return mappedControlIds;
    return [];
  });

  // Provide ViewChild mocks so .options assignment won't blow up
  (component as any)._regionComboBox = { options: null };
  (component as any)._controlIdComboBox = { options: null };

  // If component loads table rows in next(), avoid side-effects from real implementation
  if ((component as any).LoadTableRows) {
    spyOn(component as any, 'LoadTableRows').and.callFake(() => {});
  }

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.ngOnInit();
  tick(); // flush forkJoin subscribe next + complete

  // optional debug if urls not matched
  const sawAutocoms = calledUrls.some(u => /autocom/i.test(u));
  const sawRegions = calledUrls.some(u => /region/i.test(u));
  const sawControlIds = calledUrls.some(u => /control/i.test(u));
  if (!sawAutocoms || !sawRegions || !sawControlIds) {
    fail('ngOnInit test URL mismatch; calls: ' + JSON.stringify(calledUrls, null, 2));
    return;
  }

  // Assert: combo data arrays built using utils.LoadComboBoxData
  expect(component.regionComboBoxData).toEqual([{ options: mappedRegions }]);
  expect(component.controlIdComboBoxData).toEqual([{ options: mappedControlIds }]);

  // Assert: ViewChild options set to deep-cloned arrays (component uses JSON.parse(JSON.stringify(...)))
  expect((component as any)._regionComboBox.options).toEqual(JSON.parse(JSON.stringify(regions)));
  expect((component as any)._controlIdComboBox.options).toEqual(JSON.parse(JSON.stringify(controlIds)));

  // loading turned off and LOADINGACTION(false) dispatched
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));