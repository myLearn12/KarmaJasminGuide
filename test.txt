it('ngOnInit complete: sets combo data, viewchild options, clears loading and dispatches LOADINGACTION(false)', fakeAsync(() => {
  // Arrange
  // Ensure auth return predictable result
  spyOn(component['authService'], 'canHideFinanceAdminControls').and.returnValue(false);

  // Realistic data for each forkJoin item (each item must match the appConfigService URL)
  const costcenters = [{ id: 1 }];

  const revShareDivMaps = []; // used by LoadTableRows (we don't assert LoadTableRows here)
  const revenueShares = [
    { revShareTypeId: 10, revShareTypeDesc: 'Revenue A', revShareTypeCd: 'R1' }
  ];
  const divisions = [
    { divisionId: 20, divisionDesc: 'Division A', divisionCd: 'D1' }
  ];

  // Make getRequest return the right piece depending on the URL the component uses.
  // Use the appConfigService values the component will pass in.
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    const cfg = component.appConfigService;
    if (url === cfg.getAllCostCenterUrl) {
      return of(costcenters);
    }
    if (url === cfg.getAllRevShareDivMappingUrl) {
      return of(revShareDivMaps);
    }
    if (url === cfg.getAllRevShareTypeCdUrl) {
      return of(revenueShares);
    }
    if (url === cfg.getAllDivisionUrl) {
      return of(divisions);
    }
    // fallback so test doesn't blow up if other urls are called
    return of(null);
  });

  // utils.LoadComboBoxData should return the mapping used in combo data
  const mappedRevenue = [{ label: 'Revenue A', value: '10' }];
  const mappedDivisions = [{ label: 'Division A', value: '20' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) => {
    if (label === 'revShareTypeDesc') return mappedRevenue;
    if (label === 'divisionDesc') return mappedDivisions;
    return [];
  });

  // Provide the ViewChild mocks so .options assignment doesn't fail
  (component as any)._revenueShareComboBox = { options: null };
  (component as any)._divisionComboBox = { options: null };

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.ngOnInit();
  tick(); // flush forkJoin and subscription

  // Assert: combo data arrays built using utils.LoadComboBoxData
  expect(component.revenueShareComboBoxData).toEqual([{ options: mappedRevenue }]);
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);

  // Assert: ViewChild options set to deep-cloned arrays (original revenueShares/divisions preserved shape)
  expect((component as any)._revenueShareComboBox.options).toEqual(JSON.parse(JSON.stringify(revenueShares)));
  expect((component as any)._divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));

  // loading turned off and LOADINGACTION(false) dispatched
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));