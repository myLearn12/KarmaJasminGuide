it('ValidateFormControls: runs without officer crashes (officer logic neutralized)', fakeAsync(() => {
  // --- form controls needed at the top
  const acctCtrl = { markAsTouched: jasmine.createSpy('mat1'), hasError: () => false };
  const estCtrl  = { markAsTouched: jasmine.createSpy('mat2'), hasError: () => false };
  (component as any).fcn_AcctNumb = acctCtrl;
  (component as any).fon_AcctNumb = acctCtrl;     // alias if code uses 'fon_'
  (component as any).fcn_EstAccrual = estCtrl;
  (component as any).fon_EstAccrual = estCtrl;

  // --- officer-related bits: STUB so the method can reference them safely
  (component as any).cbofficer = { value: null };                   // method reads .value
  (component as any).fcn_OffcrNumber = { hasError: () => false };   // used in big if
  (component as any).fon_offcrNumber = (component as any).fcn_OffcrNumber;
  (component as any).fcn_offcrName   = { hasError: () => false };

  // --- other combos the method reads (set to null to drive required flags)
  (component as any).cbStatus   = { value: null };
  (component as any).cbstatus   = (component as any).cbStatus; // some code uses cbstatus
  (component as any).cbDivision = { value: null };
  (component as any).cbcycle    = { value: null };             // code uses cbcycle (lowercase)
  (component as any).cbFormula  = { value: null };
  (component as any).cbCategory = { value: null };
  (component as any).cbAltDivision = { value: 'X' };           // non-null to hit isRevShareReqd

  // --- utils + account (IMPORTANT: provide officerNm so no crash)
  spyOn(component['utils'], 'isStringValid').and.returnValue(false); // revshare invalid
  component.account = {
    revshare: '',
    officerNm: '',   // <-- prevents "reading 'officerNm' of undefined"
    officerNum: ''   // extra safety
  } as any;

  // --- NO-OP helpers so they don't touch officer fields
  (component as any).setIsRevSharevalid  = () => {};
  (component as any).onoffcrNumberChange = () => {};
  (component as any).onoffNumberChange   = () => {};
  (component as any).onFutureUseChange   = () => {};
  (component as any).onOzIdChange        = () => {};

  // --- other flags used by the big if
  component.isCategoryCdValid = true;   // so the offcrNumber.required clause stays false
  component.isofcrNmbrValid   = false;
  component.isFutureValid     = false;
  component.isRevShareValid   = false;
  component.isDisp3Valid      = false;
  component.isofficerNumValid = false;
  component.isOzIdValid       = false;
  component.isPcaValid        = false;

  // act
  (component as any).ValidateFormControls();
  tick();

  // simple sanity checks (no officer assertions)
  expect(acctCtrl.markAsTouched).toHaveBeenCalled();
  expect(estCtrl.markAsTouched).toHaveBeenCalled();
  expect(component.statusRequired).toBeTrue();  // because cbStatus.value is null
}));
