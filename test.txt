it('ngOnInit complete: sets division/costCenter combo data, deep-clones viewchild.options, clears loading and dispatches LOADINGACTION(false)', fakeAsync(() => {
  // Arrange - stub appConfig urls (optional but defensive)
  (component as any).appConfigService = {
    getAllDivisionUrl: '/api/divisions',
    getAllCostCenterUrl: '/api/costcenters'
  } as any;

  // realistic data returned by the service
  const divisions = [{ divisionId: 20, divisionDesc: 'Division A', divisionCd: 'D1' }];
  const costCenters = [{ costCenterId: 1, costCenterNbr: '100', costCenterDesc: 'Cost A' }];

  // capture called URLs for debugging
  const calledUrls: string[] = [];
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url?: string) => {
    calledUrls.push(String(url));
    const u = String(url || '').toLowerCase();
    if (u.includes('division')) return of(divisions);
    if (u.includes('cost') || u.includes('costcenter')) return of(costCenters);
    return of([]); // safe fallback
  });

  // make LoadComboBoxData produce the expected mapped arrays used in combo data
  const mappedDivisions = [{ label: 'Division A', value: '20' }];
  const mappedCostCenters = [{ label: 'Cost A', value: '100' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    if (label === 'divisionDesc') return mappedDivisions;
    if (label === 'costCenterDesc') return mappedCostCenters;
    return [];
  });

  // Provide viewchild mocks so .options assignment doesn't throw
  (component as any)._divisionComboBox = { options: null };
  (component as any)._costCenterComboBox = { options: null };

  // Prevent side-effects if LoadTableRows exists
  if ((component as any).LoadTableRows) {
    spyOn(component as any, 'LoadTableRows').and.callFake(() => {});
  }

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.ngOnInit?.(); // call ngOnInit (or call the method that contains your forkJoin)
  tick(); // flush subscribe next + complete

  // Sanity check: ensure we actually attempted to fetch division & costcenter
  const sawDivision = calledUrls.some(u => /division/i.test(String(u)));
  const sawCost = calledUrls.some(u => /cost|costcenter/i.test(String(u)));
  if (!sawDivision || !sawCost) {
    fail('ngOnInit test URL mismatch. Called URLs: ' + JSON.stringify(calledUrls, null, 2));
    return;
  }

  // Assert combo data arrays built via utils.LoadComboBoxData
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);
  expect(component.costCenterComboBoxData).toEqual([{ options: mappedCostCenters }]);

  // Assert deep-cloned viewchild options
  expect((component as any)._divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));
  expect((component as any)._costCenterComboBox.options).toEqual(JSON.parse(JSON.stringify(costCenters)));

  // loading off + LOADINGACTION(false) dispatched
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));
