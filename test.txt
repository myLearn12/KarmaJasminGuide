it('onAcceptButtonClick(ActionType.add) -> posts payload, regenerates table, shows success and writes audit log (self-contained)', fakeAsync(() => {
  // arrange
  spyOn(component as any, 'validateFormControls').and.returnValue(false); // let method proceed

  // Provide combo mocks and a minimal model
  (component as any)._divisionComboBox = { value: '10' };
  (component as any)._controlIdComboBox = { value: '200' };
  (component as any)._branchCdComboBox = { value: 'BR1' };
  (component as any)._actionModal = { hide: () => {}, show: () => {} };

  component.divConBraMap = {
    divConBraId: 5,
    activeIndic: true,
    /* ...other fields used by getUpdatedModel if any... */
  } as any;

  // utils used by method
  (component as any).utils = {
    ToEstDate: () => '2025-08-25T00:00:00',
    getCurrentUser: () => 'tester',
    getDisplayDate: (d: any) => d ? d : '',
    getFormatedString: (s: any) => s
  };

  // Provide stubbed helpers & spies so the component's side-effects don't crash
  const genSpy = spyOn(component as any, 'GenerateTableRows').and.callFake(() => {});
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue').and.callFake(() => {});
  spyOn(component['store'], 'dispatch').and.callFake(() => {}); // LOADINGACTION
  (component as any).displayServiceErrors = (m: any) => {};
  (component as any).clearSelection = () => {};
  spyOn(component as any, 'clearSelection').and.callThrough();

  // Make postRequest return success (next + complete will run)
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // Provide auditLogService private and spy it
  (component as any).auditLogService = { writeAuditLog: () => {} };
  const auditSpy = spyOn(component['auditLogService'], 'writeAuditLog').and.callFake(() => {});

  // Act
  component.onAcceptButtonClick(ActionType.add);
  tick();

  // Assert
  expect(postSpy).toHaveBeenCalled();
  expect(genSpy).toHaveBeenCalled();
  expect(setMsgSpy).toHaveBeenCalledWith(jasmine.anything(), jasmine.anything());
  expect(auditSpy).toHaveBeenCalledWith(
    'NA',
    'NA',
    jasmine.any(Object),
    jasmine.any(Object),
    jasmine.anything(),
    jasmine.any(String)
  );
  // make sure final UI cleanup happened (clearSelection called)
  expect((component as any).clearSelection).toHaveBeenCalled();
}));
