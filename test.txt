it('OnStatusChange: when status is "1" and dateopen invalid → sets open-required error', fakeAsync(() => {
  // Arrange
  const statusRef = { value: ['1'] }; // ['1'] → .toString() === '1'
  (component as any).cbStatus = statusRef;
  (component as any).cbstatus = statusRef;

  component.account = { dateopen: '', dateclosed: '2025-08-10' } as any;

  // invalid open date
  spyOn(component['utils'], 'isStringValid').and.returnValue(false);

  // Act
  (component as any).OnStatusChange();
  tick();

  // Assert
  expect(component.statusRequired).toBeFalse();      // value present
  expect(component.account.dateclosed).toBeNull();   // method always nulls it
  expect(component.showAcctClosedRequiredError).toBeFalse();

  // because dateopen invalid (and status '1' block rechecks), must be true
  expect(component.showAcctOpenRequiredError).toBeTrue();
}));




it('OnStatusChange: when status is "1" and dateopen valid → clears closed-required and keeps open-required false', fakeAsync(() => {
  // Arrange
  const statusRef = { value: ['1'] };
  (component as any).cbStatus = statusRef;
  (component as any).cbstatus = statusRef;

  component.account = { dateopen: '2025-08-05', dateclosed: '2025-08-10' } as any;

  // valid open date
  spyOn(component['utils'], 'isStringValid').and.returnValue(true);

  // Act
  (component as any).OnStatusChange();
  tick();

  // Assert
  expect(component.statusRequired).toBeFalse();
  expect(component.account.dateclosed).toBeNull();     // gets nulled
  expect(component.showAcctClosedRequiredError).toBeFalse();
  expect(component.showAcctOpenRequiredError).toBeFalse();
}));
