it('LoadDefaultComboBox(): error -> calls displayServiceErrors, clears loading and dispatches LOADINGACTION(false)', fakeAsync(() => {
  // Arrange: ensure appConfigService properties (avoid undefined URL passing)
  (component as any).appConfigService = {
    getAllDivisionUrl: '/api/divisions',
    getAllCostCenterUrl: '/api/costcenters'
  };

  // Make feeApiservice.getRequest throw an error (simulate backend failure)
  const serverError = { error: { statusMessage: 'Server failed' } };
  spyOn(component.feeApiservice, 'getRequest').and.returnValue(throwError(() => serverError));

  // Provide viewchild mocks so component code that accesses them won't crash
  (component as any)._divisionComboBox = { options: null };
  (component as any)._costCenterComboBox = { options: null };

  // Spy displayServiceErrors so we can assert it was called with the message
  const displaySpy = spyOn(component as any, 'displayServiceErrors');

  // Spy store.dispatch to assert LOADINGACTION(false) is dispatched
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Make sure loading starts true to test it becomes false
  component.loading = true;

  // Act
  (component as any).LoadDefaultComboBox();
  tick();

  // Assert
  expect(displaySpy).toHaveBeenCalledWith('Server failed');
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));
