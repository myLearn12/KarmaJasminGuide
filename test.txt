it('onUpdateModalClick(): else branch should deep clone catMnrmap, call helpers, set title/type and show modal', () => {
  // Arrange: make component behave so the ELSE branch runs (the code does "if (!isRowSelected) { warning } else { ... }")
  component.isRowSelected = true;

  // sample model present on component (will be deep-cloned)
  component.catMnrmap = {
    categoryMnrMapId: 99,
    categoryDesc: 'Test Category Minor',
    someOtherField: 'x'
  } as any;

  // Provide/make sure _actionModal exists and spyable
  (component as any)._actionModal = { show: jasmine.createSpy('show') };

  // Spy the helpers so we don't execute their inner logic
  const setInitialSpy = spyOn(component as any, 'setIntialValues').and.callFake(() => {});
  const getCatSpy = spyOn(component as any, 'getcatMnrmapComboBoxValue').and.callFake(() => {});
  const getDivSpy = spyOn(component as any, 'getDivisionComboBoxVal').and.callFake(() => {});

  // Spy ActivateFormControls (optional) so it doesn't execute side effects
  spyOn(component as any, 'ActivateFormControls').and.callFake(() => {});

  // Act
  component.onUpdateModalClick();

  // Assert
  // action modal title/type set
  expect(component.actionModalTitle).toBe('Update');
  expect(component.actionModalType).toBe((<any>component).ActionType ? (<any>component).ActionType.update : component.actionModalType); 
  // (If ActionType is imported enum, above line simply ensures the property is set to update value;
  //  you can replace with ActionType.update if ActionType is in scope in your spec.)

  // selectedCatMnrmap should be a deep clone equal to original but NOT the same object reference
  expect(component.selectedCatMnrmap).toEqual(component.catMnrmap);
  expect(component.selectedCatMnrmap).not.toBe(component.catMnrmap);

  // helper functions called
  expect(setInitialSpy).toHaveBeenCalled();
  expect(getCatSpy).toHaveBeenCalled();
  expect(getDivSpy).toHaveBeenCalled();

  // modal shown
  expect((component as any)._actionModal.show).toHaveBeenCalled();
});