it('onAcceptButtonClick(ActionType.update) - on complete should override start/end dates and call auditLogService.writeAuditLog', fakeAsync(() => {
  // Arrange
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // Setup URLs and IDs
  (component as any).appConfigService = {
    updateRevShareDivMappingUrl: '/api/revsharediv/update/'
  } as any;

  component.revShrdivmap = { revShareDivId: 101, revShareTypeId: 10, divId: 20 } as any;
  component.selectedRevShrDivMap = {
    revShareDivId: 101,
    revShareTypeId: 11,
    divId: 21,
    startDt: 'OLD-START',
    endDt: 'OLD-END'
  } as any;

  // mocks for combo boxes (avoid .toString null errors)
  (component as any).revenueShareComboBox = { value: ['11'] };
  (component as any).divisionComboBox     = { value: ['21'] };
  (component as any)._revenueShareComboBox = (component as any).revenueShareComboBox;
  (component as any)._divisionComboBox     = (component as any).divisionComboBox;

  // Spy getUpdatedModel to return a model that we can assert later
  const fakeModel: any = { revShareTypeId: 99, divId: 77, startDt: '', endDt: '' };
  spyOn(component as any, 'getUpdatedModel').and.returnValue(fakeModel);

  // Spy auditLogService.writeAuditLog
  (component as any).auditLogService = { writeAuditLog: jasmine.createSpy('writeAuditLog'), updateAction: 'UPD' };

  // Spy feeApiservice.putRequest to return a successful observable (triggers complete)
  spyOn(component.feeApiservice, 'putRequest').and.returnValue(of({}));

  // needed to avoid UI cleanup blowing up
  spyOn(component as any, 'clearSelection').and.stub();
  (component as any)._actionModal = { hide: jasmine.createSpy('hide') };

  // Act
  component.onAcceptButtonClick(ActionType.update);
  tick(); // flush observable complete

  // Assert - putRequest called
  expect(component.feeApiservice.putRequest).toHaveBeenCalled();

  // getUpdatedModel called
  expect(component['getUpdatedModel']).toHaveBeenCalled();

  // startDt and endDt overridden from selectedRevShrDivMap
  expect(fakeModel.startDt).toBe('OLD-START');
  expect(fakeModel.endDt).toBe('OLD-END');

  // auditLogService.writeAuditLog called with expected args
  expect((component as any).auditLogService.writeAuditLog).toHaveBeenCalledWith(
    'revShareDivId',
    '101',
    component.selectedRevShrDivMap,
    fakeModel,
    'UPD',
    component.PageTitle
  );
}));