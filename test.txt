it('logAccountAudit: captures Long Account Number diff only', fakeAsync(() => {
  component.isCloneAccount = false;

  component.oldAccountValues = { longacctnum: 'OLD-LONG', regionDescription: 'East' } as any;
  component.account = { accountNbr: 'A1', longacctnum: 'NEW-LONG', regionDescription: 'West' } as any;

  // 🛡️ stub ONLY required combos with minimal values
  (component as any).cbStatus   = { value: ['A'] };
  component.regions             = [{ regionId: 1, regionDescription: 'West' }] as any;

  // mock utils just enough
  const utils = component['utils'] as any;
  spyOn(utils, 'getValidString').and.callFake((x: any) => (x ? String(x) : null));
  spyOn(utils, 'getFormatedDecimal').and.returnValue('0.00');
  spyOn(utils, 'getDateAndDefaultTime').and.returnValue(null);
  spyOn(utils, 'LoadComboBoxData').and.returnValue([]);
  spyOn(utils, 'getCurrentUser').and.returnValue('u1');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-25T00:00:00');

  spyOn(component.acctService, 'getAccountStatusDesc').and.returnValue('OPEN');
  spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // Act
  (component as any).logAccountAudit();
  tick();

  // Assert: just check diff is included
  const [, body] = (component.feeApiservice.postRequest as jasmine.Spy).calls.mostRecent().args;
  const auditArr = JSON.parse(body.acctAuditData);
  expect(auditArr[0].OldAccountValue).toContain('OLD-LONG');
  expect(auditArr[0].NewAccountValue).toContain('NEW-LONG');
}));
