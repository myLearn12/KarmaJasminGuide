it('should fetch report data and call export method when isDataExists is false', fakeAsync(() => {
  component.isDataExists = false;

  // Mock update method
  const updateUrlSpy = spyOn(component, 'UpdateDetailAuditurl');

  // Spy on reportService methods
  const reportService = TestBed.inject(DetailauditreportService);
  const setTableSpy = spyOn(reportService, 'setDetailaudittable');
  const setActppSpy = spyOn(reportService, 'setDetailauditbyactpp');
  const setDivisionSpy = spyOn(reportService, 'setDetailauditbydivision');
  const setMiscSpy = spyOn(reportService, 'setDetailauditbycashmiscff');
  const setCategorySpy = spyOn(reportService, 'setDetailauditbycategory');
  const exportSpy = spyOn(reportService, 'exportDetailAuditReportToExcel');

  // Spy on LOADINGACTION dispatch
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Mock API response
  const mockData = {
    detailaudittable: [{ id: 1 }],
    detailauditbyactpp: [{ id: 2 }],
    detailauditbydivision: [{ id: 3 }],
    detailauditbycashmiscff: [{ id: 4 }],
    detailauditbycategory: [{ id: 5 }],
  };

  const feeApiSpy = jasmine.createSpyObj('feeApiservice', ['getRequest']);
  component.feeApiservice = feeApiSpy as any;

  feeApiSpy.getRequest.and.callFake((url: string) => {
    switch (url) {
      case component.detailaudittableUrl: return of(mockData.detailaudittable);
      case component.detailauditbyactppurl: return of(mockData.detailauditbyactpp);
      case component.detailauditbydivisionUrl: return of(mockData.detailauditbydivision);
      case component.detailauditbycashmiscffurl: return of(mockData.detailauditbycashmiscff);
      case component.detailauditbycategoryUrl: return of(mockData.detailauditbycategory);
      default: return of([]);
    }
  });

  // Act
  component.getExcelExportData();
  tick();

  // Assert
  expect(updateUrlSpy).toHaveBeenCalled();
  expect(setTableSpy).toHaveBeenCalledWith(mockData.detailaudittable);
  expect(setActppSpy).toHaveBeenCalledWith(mockData.detailauditbyactpp);
  expect(setDivisionSpy).toHaveBeenCalledWith(mockData.detailauditbydivision);
  expect(setMiscSpy).toHaveBeenCalledWith(mockData.detailauditbycashmiscff);
  expect(setCategorySpy).toHaveBeenCalledWith(mockData.detailauditbycategory);
  expect(exportSpy).toHaveBeenCalled();
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false));
}));



it('should directly call export when isDataExists is true', () => {
  component.isDataExists = true;
  const exportSpy = spyOn(TestBed.inject(DetailauditreportService), 'exportDetailAuditReportToExcel');

  component.getExcelExportData();

  expect(exportSpy).toHaveBeenCalled();
});


CheckExist() {
  this.store.dispatch(new LOADINGACTION(true));
  this.loading = true;

  this.subscription.add(
    this.feeApiservice.getRequest(
      this.appConfigService.checkRegionExistInMonthEndUrl +
      '?monthRecordedcd=' + this.MonthRecordedDate
    ).subscribe({
      next: (successornext) => {
        this.resultMsg = successornext;
        const result = this.resultMsg.regionStr;

        if (result === 'exists') {
          this.ShowReport();
        } else {
          this.actionMessage = `${this.utils.ToDate().toLocaleString('default', { month: 'long' })} month save month end: ${result} not performed yet`;
          this.showReportScreens = false;
          this.loading = false;
          this.store.dispatch(new LOADINGACTION(false));
        }
      },
      error: (error) => {
        this.displayServiceErrors(error.error.statusMessage);
        this.loading = false;
        this.store.dispatch(new LOADINGACTION(false));
        this.UpdateDetailAuditUrl();
      }
    })
  );
}


it('CheckExist: should show actionMessage and disable report screen when regionStr is not "exists"', fakeAsync(() => {
  // Arrange
  component.MonthRecordedDate = '2025-08-01';

  const mockResult = { regionStr: 'notexists' };

  const feeApiSpy = jasmine.createSpyObj('feeApiservice', ['getRequest']);
  component.feeApiservice = feeApiSpy;
  feeApiSpy.getRequest.and.returnValue(of(mockResult));

  const dispatchSpy = spyOn(component['store'], 'dispatch');
  const toDateSpy = spyOn(component.utils, 'ToDate').and.returnValue(new Date('2025-08-07'));

  // Act
  component.CheckExist();
  tick();

  // Assert
  expect(feeApiSpy.getRequest).toHaveBeenCalledWith(
    component.appConfigService.checkRegionExistInMonthEndUrl + '?monthRecordedcd=2025-08-01'
  );

  expect(component.resultMsg).toEqual(mockResult);
  expect(component.actionMessage).toContain('August month save month end: notexists not performed yet');
  expect(component.showReportScreens).toBeFalse();
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false));
}));
