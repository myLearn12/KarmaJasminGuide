import { of, throwError } from 'rxjs';
import { fakeAsync, tick } from '@angular/core/testing';

it('LoadDefaultComboBox (error): should call displayServiceErrors when API fails', fakeAsync(() => {
  // Arrange: make sure component has the appConfig properties the method reads
  (component as any).appConfigService = {
    getAllDivisionUrl: '/api/divisions',
    getAllCostCenterUrl: '/api/costcenters'
  } as any;

  // Make feeApiservice.getRequest throw for divisions API so forkJoin goes to error path
  const serverError = { error: { statusMessage: 'Server failure for divisions' } };
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    if (String(url).toLowerCase().includes('division')) {
      return throwError(() => serverError);
    }
    // safe fallback
    return of([]);
  });

  // Spy the displayServiceErrors method and store.dispatch so we can assert they were used
  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.callThrough();
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Ensure viewchild placeholders exist so method won't crash if it attempts assignments
  (component as any)._divisionComboBox = { options: null };
  (component as any)._costCenterComboBox = { options: null };

  // Act: call the method (it's protected; invoke via (component as any).LoadDefaultComboBox())
  (component as any).LoadDefaultComboBox();
  tick(); // advance microtasks / observables

  // Assert: displayServiceErrors called with server message
  expect(displaySpy).toHaveBeenCalledWith('Server failure for divisions');

  // The error handler in LoadDefaultComboBox doesn't set combo arrays on error,
  // so the combo data should still be undefined or empty - assert viewchild.options remain unchanged (null)
  expect((component as any)._divisionComboBox.options).toBeNull();
  expect((component as any)._costCenterComboBox.options).toBeNull();

  // Optionally: ensure we did not dispatch LOADINGACTION(false) from this error path (depends on your implementation)
  // If your error handler does dispatch LOADINGACTION(false), change this expectation accordingly.
  expect(dispatchSpy).not.toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));