// ✅ normal path — minimal assertions, no crashes
it('LoadComboBoxSelectedValue() runs without error (minimal assertions)', () => {
  // ctor deps
  const utilsStub = { CreateRequiredFormControl: () => ({}), CreateDateFormControl: () => ({}) };
  const acctServiceStub = { loadStatusData: () => [{ label: 'Active', value: 'A' }] };
  const storeMock = { pipe: jasmine.createSpy('pipe').and.returnValue(of(false)), dispatch: () => {} };

  const c = new EditaccountComponent({} as any, {} as any, storeMock as any, utilsStub as any, acctServiceStub as any);

  // stub ALL combo refs (write targets) + their read aliases
  const mk = () => ({ options: [] as any[], value: null as any });
  (c as any).cbstatus = mk();         (c as any).cbStatus   = (c as any).cbstatus;
  c.cbDivision        = mk() as any;
  c.cbAltDivision     = mk() as any;
  (c as any).cbcycle  = mk();         c.cbCycle             = (c as any).cbcycle as any;
  c.cbFormula         = mk() as any;
  (c as any).cbcategory = mk();       c.cbCategory          = (c as any).cbcategory as any;
  (c as any).cbofficer  = mk();

  // data sources (as any) — keep simple; we won’t assert strict shapes
  (c as any).cbstatusData = [{ label: 'Active', value: 'A' }] as any;
  c.cbDivisionData        = [{}] as any;
  c.cbAltDivisionData     = [{}] as any;
  c.cbCycleData           = [{}] as any;
  c.cbFormulaData         = [{}] as any;
  c.cbCategoryData        = [{}] as any;
  c.cbofficerData         = [{}] as any;

  // domain lists + account (minimal, as any)
  c.regions   = [{ regionId: 1, regionDescription: 'East' }] as any;
  c.regionid  = '1';
  c.divisions = [{ divisionId: 10 }, { divisionId: 11 }] as any;
  c.cycles    = [{ cycleId: 5 }] as any;
  c.formulas  = [{ formulaId: 2, formulald: 2 }] as any;
  c.categories= [{ categoryId: 7 }] as any;
  c.officers  = { '100': {} } as any;

  c.account = {
    regionDescription: '',
    status: 'Active',
    divisionId: 10,
    altdivision: 11,
    cycleId: 5,
    formulaId: 2,
    categoryId: 7,
    officer: '100',
  } as any;

  c.oldAccountValues = { regionDescription: '' } as any;
  c.isCloneAccount = false;

  // act + assert no throw
  expect(() => (c as any).LoadComboBoxSelectedValue()).not.toThrow();

  // light sanity checks only (avoid strict lengths/values)
  expect((c as any).cbstatus.options).toBeDefined();
  expect(c.cbDivision.options).toBeDefined();
  expect(c.cbAltDivision.options).toBeDefined();
  expect((c as any).cbcycle.options).toBeDefined();
  expect(c.cbFormula.options).toBeDefined();
  expect((c as any).cbcategory.options).toBeDefined();
  expect((c as any).cbofficer.options).toBeDefined();
});
