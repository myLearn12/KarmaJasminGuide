it('ValidateFormControls: marks controls touched and sets required/revshare flags only', () => {
  // utils + store stubs
  const utilsStub = {
    isStringValid: (v: any) => !!v && String(v).trim().length > 0,
  };
  const storeMock = { pipe: jasmine.createSpy('pipe').and.returnValue(of(false)), dispatch: () => {} };

  const c = new EditaccountComponent({} as any, {} as any, storeMock as any, utilsStub as any, {} as any);

  // --- stub controls
  c['fcn_AcctNumb'] = { markAsTouched: jasmine.createSpy('markAsTouched'), hasError: () => false } as any;
  c['fcn_EstAccrual'] = { markAsTouched: jasmine.createSpy('markAsTouched'), hasError: () => false } as any;

  // --- stub combos
  c['cbStatus']   = { value: null } as any;
  c['cbDivision'] = { value: null } as any;
  c['cbCycle']    = { value: null } as any;
  c['cbFormula']  = { value: null } as any;
  c['cbCategory'] = { value: null } as any;
  c['cbAltDivision'] = { value: 'X' } as any;

  // --- minimal account (no officerNm at all)
  c.account = { revshare: '' } as any;

  // --- stub all helpers so they donâ€™t run
  c['setIsRevShareValid']  = () => {};
  c['onoffcrNumberChange'] = () => {};
  c['onFutureUseChange']   = () => {};
  c['onoffNumberChange']   = () => {};
  c['onOzIdChange']        = () => {};

  // Act
  (c as any).ValidateFormControls();

  // Assert touched
  expect(c['fcn_AcctNumb'].markAsTouched).toHaveBeenCalled();
  expect(c['fcn_EstAccrual'].markAsTouched).toHaveBeenCalled();

  // Assert required flags
  expect(c.statusRequired).toBeTrue();
  expect(c.divisionRequired).toBeTrue();
  expect(c.cycleRequired).toBeTrue();
  expect(c.formulaRequired).toBeTrue();
  expect(c.categoryRequired).toBeTrue();

  // Assert revshare flags
  expect(c.isRevShareReqd).toBeTrue();   // cbAltDivision != null && revshare invalid
  expect(c.altDivisionRequired).toBeFalse();
});
