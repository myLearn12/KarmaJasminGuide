import { fakeAsync, tick } from '@angular/core/testing';
import { throwError, of } from 'rxjs';

it('onAcceptButtonClick(ActionType.update): on putRequest error should restore model, display error and still clear/hide', fakeAsync(() => {
  // Arrange â€” everything local to this test
  (component as any)._revenueShareComboBox = { value: '10' };
  (component as any)._costCenterComboBox  = { value: '100' };

  // selected snapshot (the ORIGINAL values to restore from on error)
  component.selectedRevShrGlAcctMap = {
    revShareGlAcctId: 1,
    revShareDesc: 'ORIGINAL',
    glAccountNumber: 'GL-ORIG',
    abaNbr: 'ABA-ORIG',
    costCenterNbr: '100'
  } as any;

  // revShrGlAcctmap has been changed by UI (simulate mutated data)
  component.revShrGlAcctmap = {
    revShareGlAcctId: 1,
    revShareDesc: 'CHANGED',
    glAccountNumber: 'GL-NEW',
    abaNbr: 'ABA-NEW',
    costCenterNbr: '200'
  } as any;

  // Provide a minimal _actionModal so spyOn won't throw
  (component as any)._actionModal = { hide: () => {} };

  // spies (set BEFORE calling the method)
  const displaySpy = spyOn(component as any, 'displayServiceErrors');
  const clearSpy = spyOn(component as any, 'clearSelection');
  const modalHideSpy = spyOn((component as any)._actionModal, 'hide');

  // make putRequest error (RxJS v7 style)
  const errorResponse = { error: { statusMessage: 'some server error' } };
  const putSpy = spyOn(component.feeApiservice, 'putRequest')
    .and.returnValue(throwError(() => errorResponse));

  // ensure validateFormControls allows execution
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // Act
  component.onAcceptButtonClick(ActionType.update);
  tick(); // flush async

  // Assert - HTTP called
  expect(putSpy).toHaveBeenCalled();

  // revShrGlAcctmap should now have been restored (Object.assign copies selected into current object)
  expect(component.revShrGlAcctmap.revShareDesc).toBe(component.selectedRevShrGlAcctMap.revShareDesc);
  expect(component.revShrGlAcctmap.glAccountNumber).toBe(component.selectedRevShrGlAcctMap.glAccountNumber);
  expect(component.revShrGlAcctmap.abaNbr).toBe(component.selectedRevShrGlAcctMap.abaNbr);
  expect(component.revShrGlAcctmap.costCenterNbr).toBe(component.selectedRevShrGlAcctMap.costCenterNbr);

  // displayServiceErrors should be invoked with server message
  expect(displaySpy).toHaveBeenCalledWith('some server error');

  // finalize actions (clear/hide) are called (clearSelection and modal hide are called after switch block)
  expect(clearSpy).toHaveBeenCalled();
  expect(modalHideSpy).toHaveBeenCalled();
}));