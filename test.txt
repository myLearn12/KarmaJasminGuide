import { of, throwError } from 'rxjs';
import { fakeAsync, tick } from '@angular/core/testing';

it('ngOnInit() error branch: should call displayServiceErrors, call LoadDefaultComboBox for 404, clear loading and dispatch', fakeAsync(() => {
  // Arrange - make first request error out (forkJoin will error)
  const errorResponse = { error: { statusMessage: 'Server problem', statusCode: '404' } };
  spyOn(component.feeApiservice, 'getRequest').and.returnValues(
    throwError(() => errorResponse), // divConBraMaps -> errors -> triggers error handler
    of([]), // divisions (won't be reached but safe)
    of([]), // controlIds
    of([])  // branchCds
  );

  // spies for handlers
  const displaySpy = spyOn(component as any, 'displayServiceErrors');
  const loadDefaultSpy = spyOn(component as any, 'LoadDefaultComboBox');
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.ngOnInit();
  tick();

  // Assert
  expect(displaySpy).toHaveBeenCalledWith('Server problem');
  expect(loadDefaultSpy).toHaveBeenCalled();               // 404 path triggers LoadDefaultComboBox
  expect(component.loading).toBeFalse();                   // loading cleared
  expect(dispatchSpy).toHaveBeenCalled();                  // LOADINGACTION dispatched (false)
}));


it('ngOnInit() complete branch: should set combo data, set viewchild.options, clear loading and dispatch', fakeAsync(() => {
  // Arrange - data that forkJoin should return (in the same order used by ngOnInit)
  const divConBraMaps = [{ id: 1, name: 'map1' }];
  const divisions = [{ divisionId: 20, divisionDesc: 'Division A', divisionCd: 'D1' }];
  const controlIds = [{ conId: 5, controlDesc: 'Ctrl A' }];
  const branchCds = [{ branchCode: 'B1', branchDesc: 'Branch One' }];

  spyOn(component.feeApiservice, 'getRequest').and.returnValues(
    of(divConBraMaps), // divConBraMaps
    of(divisions),     // divisions
    of(controlIds),    // controlIds
    of(branchCds)      // branchCds
  );

  // Prevent loadTableRows side-effects; we're testing combo population only
  if ((component as any).LoadTableRows) {
    spyOn(component as any, 'LoadTableRows');
  }

  // utils mapping used to populate combo arrays
  const mappedDivisions = [{ label: 'Division A', value: '20' }];
  const mappedControls = [{ label: 'Ctrl A', value: '5' }];
  const mappedBranches = [{ label: 'Branch One', value: 'B1' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    if (label === 'divisionDesc') return mappedDivisions;
    if (label === 'controlDesc')  return mappedControls;
    if (label === 'branchDesc')   return mappedBranches;
    return [];
  });

  // Provide ViewChild mocks so assignment of .options doesn't throw
  (component as any)._divisionComboBox = { options: null };
  (component as any)._controlIdComboBox = { options: null };
  (component as any)._branchCdComboBox = { options: null };

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.ngOnInit();
  tick(); // flush forkJoin + subscribe next/complete

  // Assert: combo data arrays built using utils.LoadComboBoxData
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);
  expect(component.controlIdComboBoxData).toEqual([{ options: mappedControls }]);
  expect(component.branchCdComboBoxData).toEqual([{ options: mappedBranches }]);

  // ViewChild.options deep-cloned from originals
  expect((component as any)._divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));
  expect((component as any)._controlIdComboBox.options).toEqual(JSON.parse(JSON.stringify(controlIds)));
  expect((component as any)._branchCdComboBox.options).toEqual(JSON.parse(JSON.stringify(branchCds)));

  // loading turned off and LOADINGACTION(false) dispatched
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalled();
}));
