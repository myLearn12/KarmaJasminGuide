it('SetDeltaChanges: paints dynamic color keys based on delta columns', fakeAsync(() => {
  const utilsStub = { CreateRequiredFormControl: () => ({}), CreateDateFormControl: () => ({}) };
  const storeMock = { pipe: jasmine.createSpy('pipe').and.returnValue(of(false)), dispatch: jasmine.createSpy('dispatch') };
  const acctServiceStub = { checkDeltaChanges: () => true, setDeltaChanges: jasmine.createSpy('setDeltaChanges') };

  const component = new EditaccountComponent({} as any, {} as any, storeMock as any, utilsStub as any, acctServiceStub as any);
  (component as any).acctservice = acctServiceStub;

  component.appConfigService.getDeltaChangeByAcctUrl = '/api/delta/';
  component.selectedAccountNumber = 'ACC-123';
  component.account = { status: 'Active' } as any;

  const delta = [{ colModNm: 'status' } as any];
  const feeApiSpy = jasmine.createSpyObj('feeApiservice', ['getRequest']);
  component.feeApiservice = feeApiSpy;
  feeApiSpy.getRequest.and.returnValue(of(delta));

  // call with correct method name
  ((component as any).SetDeltaChanges ?? (component as any).SetDeltachanges).call(component);
  tick();

  // dynamic keys asserted via bracket access
  const bgKey = 'statusBgColor';
  const txtKey = 'statusTxtColor';

  expect(component.account.hasOwnProperty(bgKey)).toBeTrue();
  expect(component.account.hasOwnProperty(txtKey)).toBeTrue();
  expect((component.account as any)[bgKey]).toBe(component.t3kDeltaBgColor);
  expect((component.account as any)[txtKey]).toBe(component.t3kDeltaTextColor);

  expect(component.hideBacktoDetails).toBeTrue();
  expect(acctServiceStub.setDeltaChanges).toHaveBeenCalledWith(false);
  expect(storeMock.dispatch).toHaveBeenCalledWith(new LOADINGACTION(false));
}));
