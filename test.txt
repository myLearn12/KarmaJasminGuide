// ✅ SUCCESS: happy path (next + complete) with safe assertions for TruCore option types
it('InitialDataLoad() success case', () => {
  const component = new EditaccountComponent({} as any, {} as any, { dispatch: jasmine.createSpy('dispatch') } as any, {} as any, {} as any);

  component['regionid'] = 'R1';
  (component as any).selectedAccountNumber = 'ACC-9';

  // stub internal methods hit in complete()
  component['LoadAccountTableRow'] = jasmine.createSpy('LoadAccountTableRow');
  component['IntialSetup'] = jasmine.createSpy('IntialSetup');
  component['CloneAccountSetup'] = jasmine.createSpy('CloneAccountSetup');
  component['LoadComboBoxSelectedValue'] = jasmine.createSpy('LoadComboBoxSelectedValue');
  component['SetDeltaChanges'] = jasmine.createSpy('SetDeltaChanges');
  component['SetUnassignedOrArchive'] = jasmine.createSpy('SetUnassignedOrArchive');

  // services used in complete()
  component['utils'] = {
    CreateRequiredFormControl: () => ({}),
    CreateDateFormControl: () => ({}),
    LoadComboBoxData: (arr: any[], text: string, code: string, id: string) =>
      arr.map(x => ({ text: x[text], code: x[code], id: x[id] })),
  } as any;

  component['acctService'] = {
    LoadOfficerData: (dict: Record<string, any>) =>
      Object.keys(dict).map(k => ({ text: dict[k].officersort, code: dict[k].officer })),
    loadStatusData: () => [{ label: 'Active', value: 'A' }, { label: 'Inactive', value: 'I' }],
  } as any;

  component['appConfigService'] = {
    getAccountByNumberUrl: '/acc/',
    getAllRegionUrl: '/regions',
    getAllDivisionUrl: '/divisions',
    getAllRegDivMappingUrl: '/regdiv',
    getAllCycleurl: '/cycles',
    getAllFormulaUrl: '/formulas',
    getAllCategoryUrl: '/categories',
    getAllAccrualofficerurl: '/officers',
    getAllRevShareDivMappingUrl: '/revmap',
  } as any;

  const account = { accountId: 9, accountNumber: 'ACC-9' };
  const regions = [{ regionId: 1, regionDesc: 'East' }];
  const divisions = [
    { divisionId: 10, divisionDesc: 'Div A', divisionCd: 'DA' },
    { divisionId: 11, divisionDesc: 'Div B', divisionCd: 'DB' },
  ];
  const regionDivisions = [{ regionId: 1, divisionId: 10 }];
  const cycles = [{ cycleId: 5, cycleDesc: 'Monthly' }];
  const formulas = [{ formulald: 2, formulaDesc: 'F1', formulaCd: 'F-01' }];
  const categories = [{ categoryId: 7, categoryDescription: 'Cat', categoryCode: 'C1' }];
  const officersArr = [
    { officer: '100', officersort: 'A-Name' },
    { officer: '200', officersort: 'B-Name' },
  ];
  const revShareDivMapping = [{ divisionId: 10, map: true }];

  const queue = [
    of(account),
    of(regions),
    of(divisions),
    of(regionDivisions),
    of(cycles),
    of(formulas),
    of(categories),
    of(officersArr),
    of(revShareDivMapping),
  ];

  const getRequestSpy = jasmine.createSpy('getRequest').and.callFake(() => queue.shift()!);
  component['feeApiservice'] = { getRequest: getRequestSpy } as any;

  // act
  component['InitialDataLoad']();

  // next()
  expect(component['LoadAccountTableRow']).toHaveBeenCalledWith(account);
  expect(component.regions).toEqual(regions);
  expect(component.divisions).toEqual(divisions);
  expect(component.altDivisions).toEqual(divisions);
  expect(component.regionDivisions).toEqual(regionDivisions);
  expect(component.cycles).toEqual(cycles);
  expect(component.formulas).toEqual(formulas);
  expect(component.categories).toEqual(categories);
  expect(component.revShareDivMapping).toEqual(revShareDivMapping);
  expect(component.officers['100']).toEqual(officersArr[0]);
  expect(component.officers['200']).toEqual(officersArr[1]);

  // complete()
  expect(component['IntialSetup']).toHaveBeenCalled();
  expect(component['CloneAccountSetup']).toHaveBeenCalled();
  expect(component['LoadComboBoxSelectedValue']).toHaveBeenCalled();
  expect(component['SetDeltaChanges']).toHaveBeenCalled();
  expect(component['SetUnassignedOrArchive']).toHaveBeenCalled();

  // ✅ TruCore options: assert safely without strict shape
  const div0: any = (component as any).cbDivisionData[0].options[0];
  expect(div0).toEqual(jasmine.objectContaining({ text: 'Div A' })); // or label/name if that’s your shape

  const altDiv0: any = (component as any).cbAltDivisionData[0].options[0];
  expect(altDiv0.text ?? altDiv0.label ?? altDiv0.name).toBe('Div A');

  const cyc0: any = (component as any).cbCycleData[0].options[0];
  expect(cyc0.text ?? cyc0.label ?? cyc0.name).toBe('Monthly');

  const f0: any = (component as any).cbFormulaData[0].options[0];
  expect((f0.text ?? f0.label ?? f0.name)).toBe('F1');

  const cat0: any = (component as any).cbCategoryData[0].options[0];
  expect((cat0.text ?? cat0.label ?? cat0.name)).toBe('Cat');
  expect((cat0.code ?? cat0.value ?? cat0.id)).toBe('C1');

  const offOpt0: any = (component as any).cbofficerData[0].options[0];
  expect(offOpt0.text ?? offOpt0.label ?? offOpt0.name).toBe('A-Name');

  const st0: any = (component as any).cbStatusData[0].options[0];
  expect(st0.label ?? st0.text).toBe('Active');

  // URL composition checked on first call
  const firstUrl = component['appConfigService'].getAccountByNumberUrl + 'R1/ACC-9';
  expect(getRequestSpy.calls.count()).toBe(9);
  expect(getRequestSpy.calls.argsFor(0)[0]).toBe(firstUrl);
});
