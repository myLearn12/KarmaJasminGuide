it('logAccountAudit (edit): builds audit trail when old and new differ (covers key branches, robust contains checks)', fakeAsync(() => {
  // Arrange
  component.isCloneAccount = false;

  // Old values (ensure diffs)
  component.oldAccountValues = {
    longacctnum: 'OLD-LONG',
    accountNm: 'OLD-NAME',
    dateopen: '2025-08-01',
    dateclosed: '',
    estacc: 10,
    revshare: '0.20',
    futureuse: 'OLD-FUT',
    regionDescription: 'East',
    disposition3: 'OLD-DISP3',
    ofcrNm: 'OLD OFFICER',
    officer: '0001',
    ozId: 'OLDOZ',
    pcanumber: 'OLDPCA',
    estpp: 1, actpp: 2, endpp: 3, feepp: 4, cashpp: 5,
    accepfee: 6
  } as any;

  // New values
  component.account = {
    accountNbr: 'ACC-99',
    longacctnum: 'NEW-LONG',
    accountNm: 'NEW-NAME',
    dateopen: '2025-08-02',
    dateclosed: '2025-08-03',
    estacc: 11,
    revshare: '0.50',
    futureuse: 'NEW-FUT',
    regionDescription: 'West',
    disposition3: 'NEW-DISP3',
    ofcrNm: 'NEW OFFICER',
    officer: '0002',
    ozId: 'NEWOZ',
    pcanumber: 'NEWPCA',
    estpp: 10, actpp: 20, endpp: 30, feepp: 40, cashpp: 50,
    accepfee: 60
  } as any;

  // Current combos (strings/arrays OK; toString() used)
  (component as any).cbStatus      = { value: ['A'] };
  (component as any).cbDivision    = { value: ['20'] };
  (component as any).cbAltDivision = { value: ['30'] };
  (component as any).cbCycle       = { value: ['5'] };
  (component as any).cbFormula     = { value: ['11'] };
  (component as any).cbCategory    = { value: ['4ID'] };

  // Old snapshots — MUST be set so .toString() works
  component.oldcbStatusValue      = ['B'];
  component.oldcbDivisionValue    = ['21'];
  component.oldcbAltDivisionValue = ['31'];
  component.oldcbCycleValue       = ['6'];
  component.oldcbFormulaValue     = ['12'];
  component.oldcbCategoryValue    = ['7ID'];

  // Lookups
  component.regions = [
    { regionId: 1, regionDescription: 'West' },
    { regionId: 2, regionDescription: 'East' },
  ] as any;

  component.divisions = [
    { divisionId: 20, divisionDesc: 'Div A', divisionCd: 'DA' },
    { divisionId: 21, divisionDesc: 'Div B', divisionCd: 'DB' },
    { divisionId: 30, divisionDesc: 'Alt A', divisionCd: 'AA' },
    { divisionId: 31, divisionDesc: 'Alt B', divisionCd: 'AB' },
  ] as any;

  component.cycles = [
    { cycleId: 5, cycleDesc: 'Cycle 5' },
    { cycleId: 6, cycleDesc: 'Cycle 6' },
  ] as any;

  component.formulas = [
    { formulaId: 11, formulaDesc: 'Formula 11', formulaCd: 'F11' },
    { formulaId: 12, formulaDesc: 'Formula 12', formulaCd: 'F12' },
  ] as any;

  component.categories = [
    { categoryId: '4ID', categoryDescription: 'Estate', categoryCode: '4' },
    { categoryId: '7ID', categoryDescription: 'Other',  categoryCode: '7' },
  ] as any;

  // Stubs
  spyOn(component.acctService, 'getAccountStatusDesc')
    .and.callFake((v: string) => v === 'A' ? 'OPEN' : 'CLOSED'); // match your expected label
  const utils = component['utils'] as any;
  spyOn(utils, 'getValidString').and.callFake((x: any) =>
    (x === '' || x === null || x === undefined) ? null : String(x)
  );
  spyOn(utils, 'getFormatedDecimal').and.callFake((n: any) => Number(n).toFixed(2));
  spyOn(utils, 'getDateAndDefaultTime').and.callFake((d: any) => (d ? d : null));
  // map to {label,value} matching combo .value.toString()
  spyOn(utils, 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) =>
    arr.map((r: any) => ({ label: r[label], value: String(r[id]) }))
  );
  spyOn(utils, 'getCurrentUser').and.returnValue('u1');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-25T00:00:00');

  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));
  const showEditSpy = spyOn(component as any, 'showEditSuccess');

  // Act
  (component as any).logAccountAudit();
  tick();

  // Assert
  expect(postSpy).toHaveBeenCalled();

  const [, body] = postSpy.calls.mostRecent().args as [string, any];
  expect(body).toBeDefined();
  expect((body as any).acctAuditType).toBe('UPDATE');

  const auditJson = (body as any).acctAuditData;
  const arr = JSON.parse(auditJson);
  expect(Array.isArray(arr)).toBeTrue();
  expect(arr.length).toBeGreaterThan(0);

  // Merge both strings and use resilient contains assertions
  const item = arr[0];
  const oldTxt = (item.OldAccountValue ?? item.oldAccountValue) as string;
  const newTxt = (item.NewAccountValue ?? item.newAccountValue) as string;
  const merged = `${oldTxt} || ${newTxt}`;

  // Key diffs present (don’t assert commas/spaces exactly)
  expect(merged).toContain('Long Account Number: OLD-LONG');
  expect(merged).toContain('Long Account Number: NEW-LONG');

  expect(merged).toContain('Account Short Name (FA): OLD-NAME');
  expect(merged).toContain('Account Short Name (FA): NEW-NAME');

  expect(merged).toContain('Account Status: OPEN');
  expect(merged).toContain('Account Open Date: 2025-08-01');
  expect(merged).toContain('Account Open Date: 2025-08-02');
  expect(merged).toContain('Account Closed Date: 2025-08-03');

  expect(merged).toContain('Estimated Accrual: 10.00');
  expect(merged).toContain('Estimated Accrual: 11.00');

  expect(merged).toContain('Revenue Share: 0.20');
  expect(merged).toContain('Revenue Share: 0.50');

  expect(merged).toContain('Future Use: OLD-FUT');
  expect(merged).toContain('Future Use: NEW-FUT');

  expect(merged).toContain('Region: East');
  expect(merged).toContain('Region: West');

  expect(merged).toContain('Division Cd Desc: Div B');
  expect(merged).toContain('Division Cd Desc: Div A');

  expect(merged).toContain('Alt Division Cd Desc: Alt B');
  expect(merged).toContain('Alt Division Cd Desc: Alt A');

  expect(merged).toContain('Cycle Id Desc: Cycle 6');
  expect(merged).toContain('Cycle Id Desc: Cycle 5');

  expect(merged).toContain('Formula Cd Desc: Formula 12');
  expect(merged).toContain('Formula Cd Desc: Formula 11');

  expect(merged).toContain('Category Cd Desc: Other');
  expect(merged).toContain('Category Cd Desc: Estate');

  expect(merged).toContain('Disposition 3: OLD-DISP3');
  expect(merged).toContain('Disposition 3: NEW-DISP3');

  expect(merged).toContain('Officer Name: OLD OFFICER');
  expect(merged).toContain('Officer Name: NEW OFFICER');

  expect(merged).toContain('Officer Number: 0001');
  expect(merged).toContain('Officer Number: 0002');

  expect(merged).toContain('OZ ID: OLDOZ');
  expect(merged).toContain('OZ ID: NEWOZ');

  expect(merged).toContain('PCA: OLDPCA');
  expect(merged).toContain('PCA: NEWPCA');

  expect(merged).toContain('Monthly Amort: 1.00');
  expect(merged).toContain('Monthly Amort: 10.00');

  expect(merged).toContain('Current Amort: 2.00');
  expect(merged).toContain('Current Amort: 20.00');

  expect(merged).toContain('End Prepaid: 3.00');
  expect(merged).toContain('End Prepaid: 30.00');

  expect(merged).toContain('Beginning Prepaid: 4.00');
  expect(merged).toContain('Beginning Prepaid: 40.00');

  expect(merged).toContain('Prepaid Cash: 5.00');
  expect(merged).toContain('Prepaid Cash: 50.00');

  expect(merged).toContain('Accep. Fee: 6.00');
  expect(merged).toContain('Accep. Fee: 60.00');

  expect(showEditSpy).toHaveBeenCalled();
}));
