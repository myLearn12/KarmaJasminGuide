it('onUpdateModalClick(): else branch should deep-clone model, call helpers and show modal', () => {
  // Arrange: mark a row selected and provide the model to clone
  component.isRowSelected = true;
  component.regdivmap = {
    regionId: 11,
    regionDescription: 'North',
    divisionId: 21,
    divisionDesc: 'Div 21'
  } as any;

  // Prevent side-effects from ActivateFormControls (if it exists)
  if ((component as any).ActivateFormControls) {
    spyOn(component as any, 'ActivateFormControls').and.callFake(() => {});
  }

  // Spies for helper functions that should be called
  const setInitialSpy = spyOn(component as any, 'setIntialvalues').and.callFake(() => {});
  const getRegionSpy = spyOn(component as any, 'getRegionComboBoxValue').and.callFake(() => {});
  const getDivisionSpy = spyOn(component as any, 'getDivisionComboBoxVal').and.callFake(() => {});

  // Provide a minimal mock for the modal so .show() exists and can be spied on
  (component as any)._actionModal = { show: () => {} };
  const modalShowSpy = spyOn((component as any)._actionModal, 'show').and.callFake(() => {});

  // Act
  component.onUpdateModalClick();

  // Assert: selectedRegDivMap created and deep-cloned (equals but not same reference)
  expect((component as any).selectedRegDivMap).toEqual(component.regdivmap);
  expect((component as any).selectedRegDivMap).not.toBe(component.regdivmap);

  // Assert: helper functions were called
  expect(setInitialSpy).toHaveBeenCalled();
  expect(getRegionSpy).toHaveBeenCalled();
  expect(getDivisionSpy).toHaveBeenCalled();

  // Assert: modal shown and action modal metadata set
  expect(modalShowSpy).toHaveBeenCalled();
  expect(component.actionModalTitle).toBe('Update');
  // If you have ActionType imported in the spec file, assert exact enum:
  expect(component.actionModalType).toBe(ActionType.update);
});