/* ✅ Success → showReportScreen = true → inner call succeeds */
it('InitialDataLoad: showReportScreen true → loads tab data and shows screen', fakeAsync(() => {
  const mockDate = '2025-08-01';
  const mockPostingEndDt = '2025-08-15';

  spyOn(TestBed.inject(CommonFunctionsService), 'ToDate').and.returnValue(new Date(mockDate));

  const reportSvc = TestBed.inject(DetailauditreportService);
  const dispatchSpy = spyOn(component['store'], 'dispatch');
  const setPostingSpy = spyOn(reportSvc, 'setPostingEndDate');
  const setTabSpy = spyOn(reportSvc, 'setDetailAuditReportTab');
  spyOn(reportSvc, 'showReportScreen').and.returnValue(true);
  const errSpy = spyOn(component as any, 'displayServiceErrors');

  const feeApiSpy = jasmine.createSpyObj('feeApiservice', ['getRequest']);
  component.feeApiservice = feeApiSpy as any;
  // 1st: postingEndDt, 2nd: tab data
  feeApiSpy.getRequest.and.returnValues(
    of({ cashpostDt: [{ postingEndDt: mockPostingEndDt }] }),
    of({ changeReportTabData: [{ id: 1 }] })
  );

  component.InitialDataLoad();
  tick();

  expect(component.postingEndDt).toBe(mockPostingEndDt);
  expect(setPostingSpy).toHaveBeenCalledWith(mockPostingEndDt);
  expect(setTabSpy).toHaveBeenCalledWith([{ id: 1 }]);
  expect(component.showReportScreens).toBeTrue();
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false));
  expect(errSpy).not.toHaveBeenCalled();
}));

/* ✅ Success → showReportScreen = false → no inner call, sets actionMessage */
it('InitialDataLoad: showReportScreen false → sets actionMessage, no inner call', fakeAsync(() => {
  const mockDate = '2025-08-01';
  const mockPostingEndDt = '2025-08-15';

  spyOn(TestBed.inject(CommonFunctionsService), 'ToDate').and.returnValue(new Date(mockDate));
  spyOn(TestBed.inject(CommonFunctionsService), 'getDisplayDate').and.returnValue('15-Aug-2025');

  const reportSvc = TestBed.inject(DetailauditreportService);
  const dispatchSpy = spyOn(component['store'], 'dispatch');
  const setPostingSpy = spyOn(reportSvc, 'setPostingEndDate');
  spyOn(reportSvc, 'showReportScreen').and.returnValue(false);

  const feeApiSpy = jasmine.createSpyObj('feeApiservice', ['getRequest']);
  component.feeApiservice = feeApiSpy as any;
  feeApiSpy.getRequest.and.returnValue(of({ cashpostDt: [{ postingEndDt: mockPostingEndDt }] }));

  component.InitialDataLoad();
  tick();

  expect(component.postingEndDt).toBe(mockPostingEndDt);
  expect(setPostingSpy).toHaveBeenCalledWith(mockPostingEndDt);
  expect(component.actionMessage).toContain('Change Report');
  expect(component.actionMessage).toContain('15-Aug-2025');
  expect(component.showReportScreens).toBeFalse();
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false));
  expect(feeApiSpy.getRequest.calls.count()).toBe(1); // inner call not made
}));

/* ❌ Outer error path */
it('InitialDataLoad: outer API error → shows error and clears loading', fakeAsync(() => {
  const mockDate = '2025-08-01';
  spyOn(TestBed.inject(CommonFunctionsService), 'ToDate').and.returnValue(new Date(mockDate));

  const errSpy = spyOn(component as any, 'displayServiceErrors');
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  const feeApiSpy = jasmine.createSpyObj('feeApiservice', ['getRequest']);
  component.feeApiservice = feeApiSpy as any;
  feeApiSpy.getRequest.and.returnValue(throwError(() => ({ error: { statusMessage: 'fail-outer' } })));

  component.InitialDataLoad();
  tick();

  expect(errSpy).toHaveBeenCalledWith('fail-outer');
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false));
}));

/* ❌ Inner error path (outer success, showReportScreen true, inner fails) */
it('InitialDataLoad: inner API error → shows error and clears loading', fakeAsync(() => {
  const mockDate = '2025-08-01';
  const mockPostingEndDt = '2025-08-15';

  spyOn(TestBed.inject(CommonFunctionsService), 'ToDate').and.returnValue(new Date(mockDate));

  const reportSvc = TestBed.inject(DetailauditreportService);
  spyOn(reportSvc, 'showReportScreen').and.returnValue(true);
  const setPostingSpy = spyOn(reportSvc, 'setPostingEndDate');
  const errSpy = spyOn(component as any, 'displayServiceErrors');
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  const feeApiSpy = jasmine.createSpyObj('feeApiservice', ['getRequest']);
  component.feeApiservice = feeApiSpy as any;
  feeApiSpy.getRequest.and.returnValues(
    of({ cashpostDt: [{ postingEndDt: mockPostingEndDt }] }),
    throwError(() => ({ error: { statusMessage: 'fail-inner' } }))
  );

  component.InitialDataLoad();
  tick();

  expect(component.postingEndDt).toBe(mockPostingEndDt);
  expect(setPostingSpy).toHaveBeenCalledWith(mockPostingEndDt);
  expect(errSpy).toHaveBeenCalledWith('fail-inner');
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false));
}));
