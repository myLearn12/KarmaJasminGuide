it('LoadDefaultComboBox: on complete should set combo data and deep-clone viewchild.options', fakeAsync(() => {
  // Arrange
  (component as any).appConfigService = {
    getAllCategoryUrl: '/api/categories',
    getAllDivisionUrl: '/api/divisions'
  } as any;

  const categories = [
    { categoryId: 7, categoryDescription: 'Estate', categoryCode: '4' }
  ];
  const divisions = [
    { divisionId: 20, divisionDesc: 'Division A', divisionCd: 'D1' }
  ];

  // Stub getRequest -> return values for categories and divisions
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    if (url === (component as any).appConfigService.getAllCategoryUrl) {
      return of(categories);
    }
    if (url === (component as any).appConfigService.getAllDivisionUrl) {
      return of(divisions);
    }
    return of([]);
  });

  // Stub LoadComboBoxData
  const mappedCategories = [{ label: 'Estate', value: '7' }];
  const mappedDivisions = [{ label: 'Division A', value: '20' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    if (label === 'categoryDescription') return mappedCategories;
    if (label === 'divisionDesc') return mappedDivisions;
    return [];
  });

  // Mock viewchilds so .options assignment works
  (component as any)._categoryComboBox = { options: null };
  (component as any)._divisionComboBox = { options: null };

  // Act
  component['LoadDefaultComboBox']();
  tick(); // flush forkJoin

  // Assert
  expect(component.categoryComboBoxData).toEqual([{ options: mappedCategories }]);
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);

  expect((component as any)._categoryComboBox.options).toEqual(JSON.parse(JSON.stringify(categories)));
  expect((component as any)._divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));
}));