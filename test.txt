it('LoadDefaultComboBox: on complete sets combo data and deep-cloned viewchild.options', fakeAsync(() => {
  // Arrange: ensure component has app config URLs the method expects
  component.appConfigService = {
    getAllRevShareTypeCdUrl: '/api/revsharetypes',
    getAllDivisionUrl: '/api/divisions'
  } as any;

  // Realistic API-returned raw model objects (match your RevShareTypeCd & Division model shape)
  const revenueShares = [
    {
      selected: false,
      revShareTypeId: 10,
      revShareTypeCd: 'R1',
      revShareTypeDesc: 'Revenue A',
      activeIndic: true
    }
  ];
  const divisions = [
    {
      selected: false,
      divisionId: 20,
      divisionCd: 'D1',
      divisionDesc: 'Division A',
      activeIndic: true
    }
  ];

  // Spy feeApiservice.getRequest to return the correct arrays for the exact URLs
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    if (url === component.appConfigService.getAllRevShareTypeCdUrl) {
      return of(revenueShares);
    }
    if (url === component.appConfigService.getAllDivisionUrl) {
      return of(divisions);
    }
    return of([]); // safe fallback
  });

  // Make LoadComboBoxData return label/value arrays as component expects
  const mappedRevenue = [{ label: 'Revenue A', value: '10' }];
  const mappedDivisions = [{ label: 'Division A', value: '20' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) => {
    if (label === 'revShareTypeDesc') return mappedRevenue;
    if (label === 'divisionDesc') return mappedDivisions;
    return [];
  });

  // Provide ViewChild mocks so assignments succeed (component will set .options)
  (component as any).revenueShareComboBox = { options: null };
  (component as any)._divisionComboBox = { options: null };

  // Act
  component.LoadDefaultComboBox();
  tick(); // flush forkJoin subscribe handlers

  // Assert: combo data arrays built using utils.LoadComboBoxData (label/value)
  expect(component.revenueShareComboBoxData).toEqual([{ options: mappedRevenue }]);
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);

  // Assert: ViewChild.options set to deep-cloned raw API objects
  expect((component as any).revenueShareComboBox.options).toEqual(JSON.parse(JSON.stringify(revenueShares)));
  expect((component as any)._divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));
}));