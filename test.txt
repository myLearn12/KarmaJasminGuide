it('LoadComboBoxSelectedValue() populates options, sets values, and snapshots old values', () => {
  // --- ctor deps so component can instantiate
  const utilsStub = {
    CreateRequiredFormControl: () => ({}),
    CreateDateFormControl: () => ({}),
  };
  const acctServiceStub = {
    loadStatusData: () => [{ label: 'Active', value: 'A' }],
  };
  const storeMock = {
    pipe: jasmine.createSpy('pipe').and.returnValue(of(false)),
    dispatch: () => {}
  };

  const c = new EditaccountComponent(
    {} as any,        // http
    {} as any,        // appConfig
    storeMock as any, // store
    utilsStub as any, // utils
    acctServiceStub as any // acctService
  );

  // --- STUB ALL ViewChild-like combo refs (exact names & mixed casing used in your method)
  const mk = () => ({ options: [] as any[], value: null as any });
  (c as any).cbstatus      = mk();
  (c as any).cbStatus      = (c as any).cbstatus;   // oldcbStatusValue reads cbStatus.value
  c.cbDivision             = mk() as any;
  c.cbAltDivision          = mk() as any;
  (c as any).cbcycle       = mk();
  c.cbCycle                = (c as any).cbcycle as any; // oldcbCycleValue reads cbCycle.value
  c.cbFormula              = mk() as any;
  (c as any).cbcategory    = mk();
  c.cbCategory             = (c as any).cbcategory as any; // oldcbCategoryValue reads cbCategory.value
  (c as any).cbofficer     = mk();

  // --- PROVIDE *Data ARRAYS (as any) — these are deep-copied into options
  (c as any).cbstatusData    = [{ label: 'Active', value: 'A' }] as any;
  c.cbDivisionData           = [{ id: '10', code: 'DA', text: 'Div A' }] as any;
  c.cbAltDivisionData        = [{ id: '11', code: 'DB', text: 'Div B' }] as any;
  c.cbCycleData              = [{ id: '5',  code: '5',  text: 'Monthly' }] as any;
  c.cbFormulaData            = [{ id: '2',  code: 'F-01', text: 'F1' }] as any;
  c.cbCategoryData           = [{ id: '7',  code: 'C1', text: 'Cat' }] as any;
  c.cbofficerData            = [{ code: '100', text: 'A-Name' }] as any;

  // --- DOMAIN LISTS + ACCOUNT (as any) — used for selected values
  c.regions   = [{ regionId: 1, regionDescription: 'East' }] as any;
  c.regionid  = '1';
  c.divisions = [{ divisionId: 10 }, { divisionId: 11 }] as any;
  c.cycles    = [{ cycleId: 5 }] as any;
  // NOTE: you filter by formulaId and then map with formulald.toString()
  c.formulas  = [{ formulaId: 2, formulald: 2 }] as any;
  c.categories= [{ categoryId: 7 }] as any;
  c.officers  = { '100': { officer: '100', officersort: 'A-Name' } } as any;

  c.account = {
    regionDescription: '',
    status: 'Active',
    divisionId: 10,
    altdivision: 11,
    cycleId: 5,
    formulaId: 2,
    categoryId: 7,
    officer: '100',
  } as any;

  c.oldAccountValues = { regionDescription: '' } as any;
  c.isCloneAccount = false;

  // --- ACT
  expect(() => (c as any).LoadComboBoxSelectedValue()).not.toThrow();

  // --- ASSERT: options filled & values set
  expect((c as any).cbstatus.options.length).toBe(1);
  expect(c.cbDivision.options.length).toBe(1);
  expect(c.cbAltDivision.options.length).toBe(1);
  expect((c as any).cbcycle.options.length).toBe(1);
  expect(c.cbFormula.options.length).toBe(1);
  expect((c as any).cbcategory.options.length).toBe(1);
  expect((c as any).cbofficer.options.length).toBe(1);

  expect(c.account.regionDescription).toBe('East');

  expect(((c as any).cbStatus.value ?? (c as any).cbstatus.value)).toEqual(['A']);
  expect(c.cbDivision.value).toEqual(['10']);
  expect(c.cbAltDivision.value).toEqual(['11']);
  expect(((c as any).cbCycle.value ?? (c as any).cbcycle.value)).toEqual(['5']);
  expect(c.cbFormula.value).toEqual(['2']); // uses formulald.toString()
  expect(c.cbCategory.value).toEqual(['7']);
  expect((c as any).cbofficer.value).toEqual(['100']);

  // snapshots
  expect(c.oldcbStatusValue).toEqual(['A']);
  expect(c.oldcbDivisionValue).toEqual(['10']);
  expect(c.oldcbAltDivisionValue).toEqual(['11']);
  expect(c.oldcbCycleValue).toEqual(['5']);
  expect((c as any).oldcbFormulavalue).toEqual(['2']); // keep component’s casing
  expect(c.oldcbCategoryValue).toEqual(['7']);
  expect(c.oldcbofficerValue).toEqual(['100']);
  expect(c.oldAccountValues.regionDescription).toBe('East');
});
