it('onSearchButtonClick: rbnNonTax true -> loads catGlmaps (id "2") and sets table rows', fakeAsync(() => {
  // Arrange: simulate the radio button state
  (component as any).rbnTax = { value: false };
  (component as any).rbnNonTax = { value: true };

  // Provide a minimal appConfigService stub used by the component
  (component as any).appConfigService = {
    getGetCatGlAcctMappingByIdUrl: '/api/catglmaps/' // component appends '2'
  } as any;

  // The server response the component expects for catGlmaps
  const catGlmapsResponse = [{ id: 1, categoryId: 8, categoryDescription: 'Other', categoryCode: '7' }];

  // Spy feeApiservice.getRequest and return observable for the specific URL the component calls
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    if (String(url).includes('/catglmaps/') && String(url).endsWith('2')) {
      return of(catGlmapsResponse); // success path
    }
    // any unexpected call -> return safe empty array (prevents undefined being passed into helper)
    return of([]);
  });

  // Prevent the *real* LoadComboBoxData from running (this avoids collection.filter errors)
  const mappedCategories = [{ label: 'Other', value: '8' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) => {
    // return the mapping the component will insert into categoryComboBoxData
    if (label === 'categoryDescription') { return mappedCategories; }
    return [];
  });

  // Provide viewchild mocks so assignments like this._categoryComboBox.options won't throw
  (component as any)._categoryComboBox = { options: null };
  (component as any).categoryComboBox = (component as any)._categoryComboBox;

  // Spy LoadTableRows so we can assert it was called
  const loadTableRowsSpy = spyOn(component as any, 'LoadTableRows').and.stub();

  // Spy displayServiceErrors so test fails if error path invoked
  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.stub();

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.onSearchButtonClick();
  tick();

  // Assert
  // feeApiservice called with URL ending in '2'
  expect((component.feeApiservice.getRequest as jasmine.Spy).calls.allArgs().some(a => /catglmaps\/2$/.test(String(a[0])))).toBeTrue();

  // LoadTableRows should have been called with the response
  expect(loadTableRowsSpy).toHaveBeenCalledWith(catGlmapsResponse);

  // categoryComboBoxData should be set using the stubbed LoadComboBoxData
  expect(component.categoryComboBoxData).toEqual([{ options: mappedCategories }]);

  // ViewChild options deep-cloned from categories - the component does JSON.parse(JSON.stringify(this.categories))
  // but in this test categories array is empty (we returned [] from other requests), so we just ensure no crash and loading false
  expect(component.loading).toBeFalse();

  // displayServiceErrors must not have been called (we tested success flow)
  expect(displaySpy).not.toHaveBeenCalled();

  // dispatch was called to clear loading at the end (component may call dispatch somewhere in the flow)
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));