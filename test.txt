it('onAcceptButtonClick(ActionType.add): posts payload, regenerates table, shows success and writes audit log (self-contained)', fakeAsync(() => {
  // Arrange - put everything in this test
  // prepare view-controls used by method
  (component as any)._divisionComboBox = { value: '20' };
  (component as any)._costCenterComboBox = { value: '100' };

  // current model used for payload
  component.altdivabacostcntrmap = {
    altDivIdCostCntrMapId: 1,
    abaNbr: 'ABA-1',
    altDivId: 20,
    costCenterNbr: '100'
  } as any;

  // spies for helpers & side effects
  const genSpy = spyOn(component as any, 'GenerateTableRows');
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue');
  // auditLogService may be private; access via `as any`. If undefined, make a noop so spyOn won't throw.
  if (!(component as any).auditLogService) { (component as any).auditLogService = { writeAuditLog: () => {} }; }
  const auditSpy = spyOn((component as any).auditLogService, 'writeAuditLog').and.callFake(() => {});
  const clearSpy = spyOn(component as any, 'clearSelection');
  // ensure _actionModal exists so spyOn won't throw
  if (!(component as any)._actionModal) { (component as any)._actionModal = { hide: () => {} }; }
  const modalHideSpy = spyOn((component as any)._actionModal, 'hide');

  // make postRequest return success observable (will call next -> complete)
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // ensure validateFormControls allows the execution
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // Act
  component.onAcceptButtonClick(ActionType.add);
  tick(); // flush microtasks / observables

  // Assert
  expect(postSpy).toHaveBeenCalled();
  expect(genSpy).toHaveBeenCalled();
  // Second arg of SetMessageTypeAndValue is the message; assert loosely so text changes don't break test
  expect(setMsgSpy).toHaveBeenCalledWith(jasmine.anything(), (component as any).addSuccessMessage);
  // auditLog called on complete (we stubbed it)
  expect(auditSpy).toHaveBeenCalled();
  // final UI cleanup called
  expect(clearSpy).toHaveBeenCalled();
  expect(modalHideSpy).toHaveBeenCalled();
}));


it('onAcceptButtonClick(ActionType.update): on putRequest error should restore model, display error and still clear/hide', fakeAsync(() => {
  // Arrange
  (component as any)._divisionComboBox = { value: '20' };
  (component as any)._costCenterComboBox = { value: '100' };

  // "selected" snapshot original model to restore on error
  component.selectedaltdivabacostcntrmap = {
    altDivIdCostCntrMapId: 1,
    altDivId: 20,
    abaNbr: 'ABA-ORIG',
    costCenterNbr: '100'
  } as any;

  // mutated model (what user changed)
  component.altdivabacostcntrmap = {
    altDivIdCostCntrMapId: 1,
    altDivId: 99,
    abaNbr: 'ABA-NEW',
    costCenterNbr: '200'
  } as any;

  // ensure action modal exists
  if (!(component as any)._actionModal) { (component as any)._actionModal = { hide: () => {} }; }

  // spies
  const displaySpy = spyOn(component as any, 'displayServiceErrors');
  const clearSpy = spyOn(component as any, 'clearSelection');
  const modalHideSpy = spyOn((component as any)._actionModal, 'hide');

  // make putRequest return an error observable (RxJS v7 form)
  const serverErr = { error: { statusMessage: 'server failed' } };
  const putSpy = spyOn(component.feeApiservice, 'putRequest').and.returnValue(throwError(() => serverErr));

  // ensure validateFormControls allows the call
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // Act
  component.onAcceptButtonClick(ActionType.update);
  tick();

  // Assert - HTTP called
  expect(putSpy).toHaveBeenCalled();

  // model restored from selected snapshot (Object.assign should copy fields back)
  expect(component.altdivabacostcntrmap.altDivId).toBe(component.selectedaltdivabacostcntrmap.altDivId);
  expect(component.altdivabacostcntrmap.abaNbr).toBe(component.selectedaltdivabacostcntrmap.abaNbr);
  expect(component.altdivabacostcntrmap.costCenterNbr).toBe(component.selectedaltdivabacostcntrmap.costCenterNbr);

  // displayServiceErrors should be invoked with the server message
  expect(displaySpy).toHaveBeenCalledWith('server failed');

  // finalize actions (clear/hide) are called
  expect(clearSpy).toHaveBeenCalled();
  expect(modalHideSpy).toHaveBeenCalled();
}));
