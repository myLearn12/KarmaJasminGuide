it('onUpdateModalClick: else branch deep clones model, sets values, and shows modal', () => {
  // Arrange - ensure ELSE branch executes
  component.isRowSelected = false;

  // Source object on component (use the actual property name you saw: revShrGlAcctmap)
  const src = { revShareGlAcctId: 99, revShareDesc: 'Test Rev Share GL Map', someOtherField: 'x' } as any;
  (component as any).revShrGlAcctmap = src; // matches key in your component keys output

  // Prevent side effects from helpers (if present)
  if ((component as any).ActivateFormControls) { spyOn(component as any, 'ActivateFormControls').and.stub(); }
  if ((component as any).setIntialValues)      { spyOn(component as any, 'setIntialValues').and.stub(); }
  if ((component as any).getRevenueShareComboBoxValue) {
    spyOn(component as any, 'getRevenueShareComboBoxValue').and.stub();
  }
  if ((component as any).getCostCenterComboBoxValue) {
    spyOn(component as any, 'getCostCenterComboBoxValue').and.stub();
  }

  // Ensure modal exists and spy its show()
  if (!(component as any)._actionModal && !(component as any).actionModal) {
    (component as any)._actionModal = { show: () => {} };
  }
  const modal = (component as any).actionModal || (component as any)._actionModal;
  const modalSpy = spyOn(modal, 'show');

  // Act
  component.onUpdateModalClick();

  // Determine which selected property the component set (try the likely names)
  const candidates = [
    'selectedRevShrGlAcctMap',
    'selectedRevShrGlAcctmap',
    'selectedRevShrglAcctMap',
    'selectedRevShrglAcctmap'
  ];
  const found = candidates.find(n => (component as any)[n] !== undefined);

  expect(found, 'expected method to set a selected* property; inspect component keys if this fails').toBeDefined();

  // Verify deep clone semantics and behavior
  const selected = (component as any)[found!];
  expect(selected).toEqual(src);       // same content
  expect(selected).not.toBe(src);      // different reference (deep clone)

  // Helper calls (only assert if those helpers exist)
  if ((component as any).setIntialValues) {
    expect((component as any).setIntialValues).toHaveBeenCalled();
  }
  if ((component as any).getRevenueShareComboBoxValue) {
    expect((component as any).getRevenueShareComboBoxValue).toHaveBeenCalled();
  }
  if ((component as any).getCostCenterComboBoxValue) {
    expect((component as any).getCostCenterComboBoxValue).toHaveBeenCalled();
  }

  // Modal should be shown and modal title/type set
  expect(modalSpy).toHaveBeenCalled();
  expect(component.actionModalTitle).toBe('Update');
  expect(component.actionModalType).toBeDefined();
});
