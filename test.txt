it('onAcceptButtonClick(ActionType.add): posts payload, regenerates table, shows success and writes audit log (self- contained)', fakeAsync(() => {
  // Arrange
  // Provide viewchild-like controls used by the method
  (component as any)._divisionComboBox = { value: '20' };
  (component as any)._costCenterComboBox = { value: '100' };

  // Minimal model (what UI would set)
  component.altdivabacostcntrmap = {
    altDivIdCostCntrMapId: 1,
    abaNbr: 'ABA-1',
    altDivId: 20,
    costCenterNbr: '100'
  } as any;

  // Stub validateFormControls so function proceeds
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // Stub GenerateTableRows & SetMessageTypeAndValue so we can assert they were called
  const genSpy = spyOn(component as any, 'GenerateTableRows').and.callFake(() => {});
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue').and.callFake(() => {});

  // Make feeApiservice.postRequest return success (next + complete)
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // Prevent getUpdatedModel from exercising .find(...) by stubbing it
  spyOn(component as any, 'getUpdatedModel').and.returnValue({ some: 'model' });

  // Ensure auditLogService exists and spy on writeAuditLog (auditLogService is private on component)
  (component as any).auditLogService = { writeAuditLog: () => {} };
  const auditSpy = spyOn((component as any).auditLogService, 'writeAuditLog').and.callFake(() => {});

  // Ensure clearSelection() and modal hide exist (the method hides modal after switch)
  const clearSpy = spyOn(component as any, 'clearSelection').and.callFake(() => {});
  (component as any)._actionModal = { hide: () => {} };
  const modalHideSpy = spyOn((component as any)._actionModal, 'hide').and.callThrough();

  // Act
  component.onAcceptButtonClick(ActionType.add);
  tick(); // flush observable completions

  // Assert
  expect(postSpy).toHaveBeenCalled();
  expect(genSpy).toHaveBeenCalled();
  expect(setMsgSpy).toHaveBeenCalledWith(jasmine.anything(), component.addSuccessMessage);
  expect(auditSpy).toHaveBeenCalledWith(
    'NA', 'NA', jasmine.any(Object), jasmine.any(Object), jasmine.anything(), component.PageTitle
  );
  expect(clearSpy).toHaveBeenCalled();
  expect(modalHideSpy).toHaveBeenCalled();
}));
