it('ValidateFormControls() â†’ invalid path without helper crashes (no-op helpers)', () => {
  // ctor deps
  const utilsStub = {
    CreateRequiredFormControl: () => ({}),
    CreateDateFormControl: () => ({}),
    isStringValid: (v: any) => !!v && String(v).trim().length > 0,
  };
  const acctServiceStub = { loadStatusData: () => [] };
  const storeMock = { pipe: jasmine.createSpy('pipe').and.returnValue(of(false)), dispatch: () => {} };

  const c = new EditaccountComponent({} as any, {} as any, storeMock as any, utilsStub as any, acctServiceStub as any);

  // --- form controls (touch + errors)
  c['fcn_AcctNumb'] = {
    markAsTouched: jasmine.createSpy('markAsTouched'),
    hasError: (e: string) => e === 'required',
  } as any;

  c['fcn_EstAccrual'] = {
    markAsTouched: jasmine.createSpy('markAsTouched'),
    hasError: (_: string) => false,
  } as any;

  c['fcn_OffcrNumber'] = { hasError: (e: string) => e === 'required' } as any;
  c['fcn_OffcrName']   = { hasError: (_: string) => false } as any;
  c.isCategoryCdValid  = false; // to trigger (required && !isCategoryCdValid)

  // --- ALL combos (null => required flags true)
  c['cbStatus']      = { value: null } as any;
  c['cbDivision']    = { value: null } as any;
  c['cbCycle']       = { value: null } as any;
  c['cbofficer']     = { value: null } as any;
  c['cbFormula']     = { value: null } as any;
  c['cbcategory']    = { value: null } as any;
  c['cbAltDivision'] = { value: '11' } as any; // not null to trigger isRevShareReqd

  // --- account (keep minimal; helpers are no-op so no officerNm reads)
  c.account = { revshare: 'RS' } as any;

  // --- NO-OP all helpers so they don't read officerNm/others
  c['setIsRevShareValid']  = () => {};
  c['onoffcrNumberChange'] = () => {};
  c['onFutureUseChange']   = () => {};
  c['onoffNumberChange']   = () => {};
  c['onOzIdChange']        = () => {};

  // other flags default false
  c.isofcrNmbrValid   = false;
  c.isFutureValid     = false;
  c.isRevShareValid   = false;
  c.isDisp3Valid      = false;
  c.isofficerNumValid = false;
  c.isOzIdValid       = false;

  // act
  const result = (c as any).ValidateFormControls();

  // asserts
  expect(c['fcn_AcctNumb'].markAsTouched).toHaveBeenCalled();
  expect(c['fcn_EstAccrual'].markAsTouched).toHaveBeenCalled();

  expect(c.statusRequired).toBeTrue();
  expect(c.divisionRequired).toBeTrue();
  expect(c.cycleRequired).toBeTrue();
  expect(c.officerRequired).toBeTrue();
  expect(c.formulaRequired).toBeTrue();
  expect(c.categoryRequired).toBeTrue();

  // cbAltDivision != null AND revshare valid
  expect(c.isRevShareReqd).toBeTrue();
  // altDivisionRequired false because AltDivision not null
  expect(c.altDivisionRequired).toBeFalse();

  expect(result).toBeTrue();
});
