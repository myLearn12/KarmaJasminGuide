it('ngOnInit complete: robust URL matching -> sets combo data, viewchild options, clears loading and dispatches LOADINGACTION(false)', fakeAsync(() => {
  // Arrange
  spyOn(component['authService'], 'canHideFinanceAdminControls').and.returnValue(false);

  // Realistic data matching your models
  const costcenters = [{ id: 1 }];

  const revShareDivMaps: any[] = []; // not asserted here
  const revenueShares: Array<any> = [
    {
      selected: false,
      revShareTypeId: 10,
      revShareTypeCd: 'R1',
      revShareTypeDesc: 'Revenue A',
      activeIndic: true,
      createdBy: 'u',
      createdDt: '2025-01-01',
      updatedBy: 'u',
      updatedDt: '2025-01-02'
    }
  ];

  const divisions: Array<any> = [
    {
      selected: false,
      divisionId: 20,
      divisionCd: 'D1',
      divisionDesc: 'Division A',
      regDesc: '',
      revShareDivId: 0,
      revShareTypeId: 10,
      revShareTypeCd: 'R1',
      revShareDesc: '',
      divisionShortNm: 'DivA',
      costCenterId: 0,
      costCenterNbr: 0,
      costCenterDesc: '',
      abaNbr: '',
      typeCd: '',
      activeIndic: true,
      createdBy: 'u',
      createdDt: '2025-01-01',
      updatedBy: 'u',
      updatedDt: '2025-01-02'
    }
  ];

  // Capture called URLs (helpful if matching fails)
  const calledUrls: string[] = [];
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    calledUrls.push(String(url).toLowerCase());
    // robust substring matching
    if (String(url).toLowerCase().includes('cost') || String(url).toLowerCase().includes('costcenter')) {
      return of(costcenters);
    }
    if (String(url).toLowerCase().includes('revsharediv') || String(url).toLowerCase().includes('revshared')) {
      return of(revShareDivMaps);
    }
    if (String(url).toLowerCase().includes('revsharetype') || String(url).toLowerCase().includes('revsharetypecd')) {
      return of(revenueShares);
    }
    if (String(url).toLowerCase().includes('division')) {
      return of(divisions);
    }
    // fallback - helps debug if URL doesn't match expectations
    return of([{ _unexpectedUrl: url }]);
  });

  // utils.LoadComboBoxData returns label/value pairs (what the component stores in *ComboBoxData)
  const mappedRevenue = [{ label: 'Revenue A', value: '10' }]; // value is stringified id
  const mappedDivisions = [{ label: 'Division A', value: '20' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) => {
    if (label === 'revShareTypeDesc') return mappedRevenue;
    if (label === 'divisionDesc') return mappedDivisions;
    return [];
  });

  // Provide ViewChild mocks so assignments succeed
  (component as any)._revenueShareComboBox = { options: null };
  (component as any)._divisionComboBox = { options: null };

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.ngOnInit();
  tick(); // flush forkJoin and subscription handlers

  // Debug check: ensure we saw URLs for revenueShares & divisions; fail with called URLs if not
  const sawRevenueUrl = calledUrls.some(u => /revsharetype|revsharetypecd/i.test(u));
  const sawDivisionUrl = calledUrls.some(u => /division/i.test(u));
  if (!sawRevenueUrl || !sawDivisionUrl) {
    fail('ngOnInit test URL mismatch. Calls made: ' + JSON.stringify(calledUrls, null, 2));
    return;
  }

  // Assert: combo data arrays built using utils.LoadComboBoxData (label/value)
  expect(component.revenueShareComboBoxData).toEqual([{ options: mappedRevenue }]);
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);

  // Assert: ViewChild.options set to deep-cloned raw API objects
  expect((component as any)._revenueShareComboBox.options).toEqual(JSON.parse(JSON.stringify(revenueShares)));
  expect((component as any)._divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));

  // loading turned off and LOADINGACTION(false) dispatched
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));