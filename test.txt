it('ngOnInit (complete): builds combo & viewchild data, deep-clones options, stops loading and dispatches LOADINGACTION(false)', fakeAsync(() => {
  // ---- Arrange ----
  // Provide the exact config values the component will read
  (component as any).appConfigService = {
    getAllRegDivMappingUrl: '/api/regdivmaps',
    getAllRegionUrl: '/api/regions',
    getAllDivisionUrl: '/api/divisions'
  } as any;

  // API results the component expects
  const regDivMaps: any[] = []; // used by LoadTableRows; keep empty or stub LoadTableRows
  const regions = [{ regionId: 11, regionDescription: 'Region X' }];
  const divisions = [{ divisionId: 21, divisionDesc: 'Division Y', divisionCd: 'DY' }];

  // Make feeApiservice.getRequest robust by matching the actual URLs we set above
  const calledUrls: string[] = [];
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url?: string) => {
    calledUrls.push(String(url));
    const u = String(url || '').toLowerCase();
    if (u.includes('/regdivmaps')) return of(regDivMaps);
    if (u.includes('/regions')) return of(regions);
    if (u.includes('/divisions')) return of(divisions);
    // fallback - return empty array so forkJoin completes
    return of([]);
  });

  // Prevent LoadTableRows doing heavy work (optional but recommended)
  if ((component as any).LoadTableRows) {
    spyOn(component as any, 'LoadTableRows').and.callFake(() => {});
  }

  // utils.LoadComboBoxData stub (returns combo-style options)
  const mappedRegions = [{ label: 'Region X', value: '11' }];
  const mappedDivisions = [{ label: 'Division Y', value: '21' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) => {
    if (label === 'regionDescription') return mappedRegions;
    if (label === 'divisionDesc') return mappedDivisions;
    return [];
  });

  // Ensure viewchild objects exist so .options assignment won't throw
  (component as any)._regionComboBox = { options: null };
  (component as any)._divisionComboBox = { options: null };

  // spy store.dispatch to verify LOADINGACTION(false)
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // ---- Act ----
  component.ngOnInit();
  tick();   // process forkJoin next + complete
  flush();  // clear timers (if any)

  // ---- Debug helpful failure if URLs are unexpected ----
  const sawRegions = calledUrls.some(u => /regions/i.test(u));
  const sawDivisions = calledUrls.some(u => /divisions/i.test(u));
  if (!sawRegions || !sawDivisions) {
    fail('ngOnInit test URL mismatch. Calls made: ' + JSON.stringify(calledUrls, null, 2));
    return;
  }

  // ---- Assert ----
  expect(component.regionComboBoxData).toEqual([{ options: mappedRegions }]);
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);

  // viewchild options deep-cloned from API arrays
  expect((component as any)._regionComboBox.options).toEqual(JSON.parse(JSON.stringify(regions)));
  expect((component as any)._divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));

  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));