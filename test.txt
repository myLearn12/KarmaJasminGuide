import { throwError } from 'rxjs';
import { fakeAsync, tick } from '@angular/core/testing';

it('GenerateTableRows(): when API errors -> should call displayServiceErrors, clear loading, and dispatch LOADINGACTION(false)', fakeAsync(() => {
  // Arrange
  const mockError = { error: { statusMessage: 'Server failure during GenerateTableRows' } };

  // Spy on dependent methods
  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.callFake(() => {});
  const dispatchSpy = spyOn(component.store, 'dispatch').and.callFake(() => {});

  // Mock feeApiservice.getRequest to throw error for forkJoin
  spyOn(component.feeApiservice, 'getRequest').and.returnValue(throwError(() => mockError));

  // Prevent LoadTableRows or success logic from executing (we only test error path)
  spyOn(component as any, 'LoadTableRows').and.callFake(() => {});

  // Act
  (component as any).GenerateTableRows();
  tick();

  // Assert
  expect(displaySpy).toHaveBeenCalledWith('Server failure during GenerateTableRows');
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false));
}));