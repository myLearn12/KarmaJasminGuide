it('onUpdateModalClick(): else branch -> prepares model, calls helpers and shows action modal', () => {
  // Arrange: make sure we take the ELSE branch => isRowSelected must be false
  component.isRowSelected = false;

  // Provide a realistic revShrGlAcctmap so cloning can be asserted
  component.revShrGlAcctmap = {
    revShareDivId: 123,
    revShareTypeId: 10,
    divisionId: 20,
    revShareDesc: 'RDesc',
    divisionDesc: 'DivDesc'
  } as any;

  // Spy the helper methods so they are no-ops but we can verify they were called
  const activateSpy = spyOn(component as any, 'ActivateFormControls').and.callFake(() => {});
  const setInitSpy = spyOn(component as any, 'setIntialvalues').and.callFake(() => {});
  const getRevSpy = spyOn(component as any, 'getRevenueShareComboBoxValue').and.callFake(() => {});
  const getCostSpy = spyOn(component as any, 'getCostCenterComboBoxValue').and.callFake(() => {});

  // Provide an actionModal stub (ViewChild replacement) with spy on show()
  (component as any).actionModal = { show: jasmine.createSpy('show') };

  // Act
  component.onUpdateModalClick();

  // Assert
  // 1) ActivateFormControls and other helpers should have been called
  expect(activateSpy).toHaveBeenCalled();
  expect(setInitSpy).toHaveBeenCalled();
  expect(getRevSpy).toHaveBeenCalled();
  expect(getCostSpy).toHaveBeenCalled();

  // 2) selectedRevShrGlAcctMap should be a deep clone of revShrGlAcctmap (not the same reference)
  expect((component as any).selectedRevShrGlAcctMap).toBeTruthy();
  expect((component as any).selectedRevShrGlAcctMap).not.toBe(component.revShrGlAcctmap);
  expect((component as any).selectedRevShrGlAcctMap).toEqual(component.revShrGlAcctmap);

  // 3) action modal shown
  expect((component as any).actionModal.show).toHaveBeenCalled();

  // 4) action title/type set
  expect(component.actionModalTitle).toBe('Update');
  expect(component.actionModalType).toBe((<any>ActionType).update || component.actionModalType); // tolerant check if enum available
});