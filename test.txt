it('LoadDefaultComboBox sets combo data and viewchild.options (private appConfigService set via cast)', fakeAsync(() => {
  // provide private appConfigService via any-cast
  (component as any).appConfigService = {
    getAllRevShareTypeCdUrl: '/api/revsharetypes',
    getAllDivisionUrl: '/api/divisions'
  } as any;

  const revenueShares = [{ selected: false, revShareTypeId: 10, revShareTypeCd: 'R1', revShareTypeDesc: 'Revenue A', activeIndic: true }];
  const divisions     = [{ selected: false, divisionId: 20, divisionCd: 'D1', divisionDesc: 'Division A', activeIndic: true }];

  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    if (url === (component as any).appConfigService.getAllRevShareTypeCdUrl) return of(revenueShares);
    if (url === (component as any).appConfigService.getAllDivisionUrl)     return of(divisions);
    return of([]);
  });

  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    if (label === 'revShareTypeDesc') return [{ label: 'Revenue A', value: '10' }];
    if (label === 'divisionDesc')     return [{ label: 'Division A', value: '20' }];
    return [];
  });

  // mock both naming conventions the component may use
  (component as any).revenueShareComboBox = { options: null };
  (component as any)._revenueShareComboBox = { options: null };
  (component as any)._divisionComboBox = { options: null };
  (component as any).divisionComboBox = { options: null };

  // Act
  component.LoadDefaultComboBox();
  tick();

  // Assert
  expect(component.revenueShareComboBoxData).toEqual([{ options: [{ label: 'Revenue A', value: '10' }] }]);
  expect(component.divisionComboBoxData).toEqual([{ options: [{ label: 'Division A', value: '20' }] }]);

  const revenueOptions = (component as any).revenueShareComboBox.options ?? (component as any)._revenueShareComboBox.options;
  const divisionOptions = (component as any)._divisionComboBox.options ?? (component as any).divisionComboBox.options;

  expect(revenueOptions).toEqual(JSON.parse(JSON.stringify(revenueShares)));
  expect(divisionOptions).toEqual(JSON.parse(JSON.stringify(divisions)));
}));