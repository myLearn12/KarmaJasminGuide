it('onAcceptButtonClick(ActionType.add): posts payload, regenerates table, shows success and writes audit log (self-contained)', fakeAsync(() => {
  // allow flow to continue
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // Provide minimal combo/viewchild mocks and values (these must not be null)
  (component as any).divisionComboBox = { value: '10' };       // used -> .value.toString()
  (component as any)._controlIdComboBox = { value: '20' };    // used -> .value.toString()
  (component as any)._branchCdComboBox = { value: 'BR01' };   // used -> .value.toString()

  // Provide model that will be sent in payload
  component.divConBraMap = {
    activeIndic: true,
    // add whatever fields your component expects (safe defaults)
  } as any;

  // Provide any arrays that getUpdatedModel might call (avoid .find() on undefined)
  component.divisions = [{ divisionId: 10, divisionDesc: 'Div A', divisionCd: 'D1' }] as any;
  component.controlIds = [{ conId: 20, controlDesc: 'Ctl A' }] as any;
  component.branchCds = [{ branchCode: 'BR01', branchDesc: 'Branch A' }] as any;

  // Prevent real side effects and allow assertions
  const genSpy = spyOn(component as any, 'GenerateTableRows').and.callFake(() => {});
  const msgSpy = spyOn(component as any, 'SetMessageTypeAndValue').and.callFake(() => {});
  spyOn(component as any, 'displayServiceErrors').and.callFake(() => {});
  // ensure auditLogService exists and spy on it (private ok via bracket access)
  (component as any).auditLogService = { writeAuditLog: () => {}, addAction: 'ADD' } as any;
  const auditSpy = spyOn(component['auditLogService'], 'writeAuditLog').and.callFake(() => {});

  // Spy the POST request to succeed
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // Act
  component.onAcceptButtonClick(ActionType.add);
  tick();

  // Assert
  expect(postSpy).toHaveBeenCalled();
  expect(genSpy).toHaveBeenCalled();
  expect(msgSpy).toHaveBeenCalledWith(jasmine.anything(), jasmine.anything()); // success message called
  expect(auditSpy).toHaveBeenCalledWith(
    'NA', 'NA', jasmine.any(Object), jasmine.any(Object), component['auditLogService'].addAction, component.PageTitle
  );
}));
