// ✅ Success path
it('SetDeltachanges: when hasDeltaChanges=true → loads deltas, colors fields, and resets flags', fakeAsync(() => {
  // utils + store
  const utilsStub = { CreateRequiredFormControl: () => ({}), CreateDateFormControl: () => ({}) };
  const storeMock = { pipe: jasmine.createSpy().and.returnValue(of(false)), dispatch: jasmine.createSpy('dispatch') };

  // acctService
  const acctServiceStub = { checkDeltaChanges: () => true, setDeltaChanges: jasmine.createSpy('setDeltaChanges') };

  // appConfigService
  const appConfigStub = { getDeltaChangeByAcctUrl: '/api/delta/' };

  // component instance
  const component = new EditaccountComponent({} as any, appConfigStub as any, storeMock as any, utilsStub as any, acctServiceStub as any);
  (component as any).acctservice = acctServiceStub; // cover lowercasing in code
  component.feeApiservice = jasmine.createSpyObj('feeApiservice', ['getRequest']);

  // inputs
  component.selectedAccountNumber = 'ACC-123';
  component.account = { status: 'Active' } as any;

  // API returns a delta for "status"
  const mockDelta = [{ colModNm: 'status' }];
  (component.feeApiservice.getRequest as jasmine.Spy).and.returnValue(of(mockDelta));

  // Act
  (component as any).SetDeltachanges();
  tick();

  // Assert
  expect(component.feeApiservice.getRequest)
    .toHaveBeenCalledWith('/api/delta/ACC-123');
  expect(component.deltaChangeDetails).toEqual(mockDelta);

  expect(component.hideBacktoDetails).toBeTrue();
  expect(component.account.statusBgColor).toBe(component.t3kDeltaBgColor);
  expect(component.account.statusTxtColor).toBe(component.t3kDeltaTextColor);

  expect(acctServiceStub.setDeltaChanges).toHaveBeenCalledWith(false);
  expect(component.loading).toBeFalse();
  expect(storeMock.dispatch).toHaveBeenCalledWith(new LOADINGACTION(false));
}));
