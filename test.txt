it('onAcceptButtonClick(ActionType.update) - error: restores selected, displays error and hides modal', fakeAsync(() => {
  // Arrange
  const ActionType = { add: 0, update: 1, delete: 2 };
  // prevent early exit
  spyOn(component as any, 'ValidateFormControls').and.returnValue(false);

  component.selectedCatGlmap = { categoryGlId: 55, glAcctNbr: 'GL-OLD', startDt: 's', endDt: 'e' } as any;
  component.catGlmap = { categoryGlId: 55, glAcctNbr: 'GL-NEW', startDt: 'sX', endDt: 'eX' } as any;

  // important: categories/divisions must be arrays so .find/.filter work
  component.categories = [{ categoryId: 7, categoryDescription: 'Estate', categoryCode: '4' }] as any;
  component.divisions = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'D1' }] as any;

  // combo mocks used by code
  (component as any)._categoryComboBox = { value: ['7'] };
  (component as any)._divisionComboBox = { value: ['20'] };

  const utils = (component as any).utils = (component as any).utils || {};
  spyOn(utils, 'getCurrentUser').and.returnValue('testUser');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-25T00:00:00');

  // putRequest throws -> error path
  const err = { error: { statusMessage: 'PUT failed' } };
  const putSpy = spyOn((component as any).feeApiservice, 'putRequest').and.returnValue(throwError(() => err));

  const displaySpy = spyOn(component as any, 'displayServiceErrors');
  const clearSelSpy = spyOn(component as any, 'clearSelection').and.callThrough();

  (component as any)._actionModal = { hide: jasmine.createSpy('hide') };

  // Act
  (component as any).onAcceptButtonClick(ActionType.update);
  tick();

  // Assert
  expect(putSpy).toHaveBeenCalled();
  expect(displaySpy).toHaveBeenCalledWith('PUT failed');
  expect((component as any)._actionModal.hide).toHaveBeenCalled();
  expect(clearSelSpy).toHaveBeenCalled();
}));


it('onAcceptButtonClick(ActionType.update) - success: GenerateTableRows, success message & auditLog.writeAuditLog called', fakeAsync(() => {
  // Arrange
  const ActionType = { add: 0, update: 1, delete: 2 };
  spyOn(component as any, 'ValidateFormControls').and.returnValue(false);

  component.selectedCatGlmap = { categoryGlId: 77, glAcctNbr: 'GL-OLD', startDt: 's', endDt: 'e' } as any;
  component.catGlmap = { categoryGlId: 77, glAcctNbr: 'GL-NEW', startDt: 'sX', endDt: 'eX' } as any;

  component.categories = [{ categoryId: 7, categoryDescription: 'Estate', categoryCode: '4' }] as any;
  component.divisions = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'D1' }] as any;

  (component as any)._categoryComboBox = { value: ['7'] };
  (component as any)._divisionComboBox = { value: ['20'] };

  const utils = (component as any).utils = (component as any).utils || {};
  spyOn(utils, 'getCurrentUser').and.returnValue('u1');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-25T00:00:00');

  const putSpy = spyOn((component as any).feeApiservice, 'putRequest').and.returnValue(of({}));

  const genSpy = spyOn(component as any, 'GenerateTableRows').and.callFake(() => null);
  const setMsgSpy = spyOn(component as any, 'SetMessageTypeAndValue').and.callFake(() => null);

  const updatedModel = { foo: 'bar' };
  spyOn(component as any, 'getUpdatedModel').and.returnValue(updatedModel);

  (component as any).auditLogService = (component as any).auditLogService || {};
  (component as any).auditLogService.updateAction = 'UPDATE';
  const auditSpy = spyOn((component as any).auditLogService, 'writeAuditLog').and.callFake(() => null);

  (component as any)._actionModal = { hide: jasmine.createSpy('hide') };
  const clearSelSpy = spyOn(component as any, 'clearSelection').and.callFake(() => null);

  // Act
  (component as any).onAcceptButtonClick(ActionType.update);
  tick();

  // Assert
  expect(putSpy).toHaveBeenCalled();
  expect(genSpy).toHaveBeenCalled();
  expect(setMsgSpy).toHaveBeenCalledWith(jasmine.anything(), (component as any).updateSuccessMessage);
  expect(auditSpy).toHaveBeenCalledWith(
    'categoryGlId',
    component.catGlmap.categoryGlId.toString(),
    component.selectedCatGlmap,
    updatedModel,
    (component as any).auditLogService.updateAction,
    (component as any).PageTitle
  );
  expect(clearSelSpy).toHaveBeenCalled();
  expect((component as any)._actionModal.hide).toHaveBeenCalled();
}));