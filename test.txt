it('processRecord: all-accts path - on success (selectedMonthEndDate string, currentDateTime Date)', fakeAsync(() => {
  // Arrange
  component.region = { regionId: 99 } as any;

  // IMPORTANT: use the requested types
  component.selectedMonthEndDate = '2025-09-01T00:00:00';           // string
  component.currentDateTime = new Date('2025-09-01T00:00:00Z');    // Date

  (component as any).appConfigService = { restoreAccountUrl: '/mock/restore/' };

  // Set accountRadioButton to "all accounts" path (empty string per your code)
  (component as any).accountRadioButton = { value: '' };
  (component as any)._accountRadioButton = { value: '' };

  // Stub utils used by processRecord
  const utils = component['utils'] as any;
  spyOn(utils, 'getFormatedDateAndTimeEST').and.callFake((selDateStr: string, curDt: Date) => {
    // ensure we received the same types (optional runtime sanity asserts)
    expect(typeof selDateStr).toBe('string');
    expect(curDt instanceof Date).toBeTrue();
    // return formatted string used by payload
    return '2025-09-01T00:00:00';
  });
  spyOn(utils, 'getCurrentUser').and.returnValue('tester');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-09-01T00:00:00');

  // The API returns whatever LoadTableRows expects. We'll return an array whose [0].recordCount = 5
  const apiResponse = [{ recordCount: 5, hasError: false }];

  // Spy postRequest
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of(apiResponse));

  // Spy LoadTableRows and make it populate restoreAccounts so totals calculate
  const loadSpy = spyOn(component as any, 'LoadTableRows').and.callFake((resp: any) => {
    component.restoreAccounts = resp;
  });

  (component as any)._actionModal = { show: jasmine.createSpy('show') };
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Initial flags
  component.loading = true;
  component.disbleButtonAction = true;

  // Act
  component.processRecord();
  tick();

  // Assert
  expect(postSpy).toHaveBeenCalled();
  // Ensure payload is array
  const [, payload] = postSpy.calls.mostRecent().args as [string, any];
  expect(Array.isArray(payload)).toBeTrue();

  // Ensure LoadTableRows used our API response and restoreAccounts populated
  expect(loadSpy).toHaveBeenCalledWith(apiResponse);
  expect(component.restoreAccounts[0].recordCount).toBe(5);

  // Totals computed from restoreAccounts[0].recordCount
  expect(component.totalRecordCount).toBe(5);
  expect(component.totalSuccessRecordCount).toBe(5);
  expect(component.totalErrorRecordCount).toBe(0);

  expect(component.loading).toBeFalse();
  expect(component.disbleButtonAction).toBeFalse();
  expect((component as any)._actionModal.show).toHaveBeenCalled();

  // dispatch LOADINGACTION(false) â€” match by property to avoid instance equality problems
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.objectContaining({ payload: false }));
}));