it('onAcceptButtonClick(ActionType.update): on putRequest error restores revShrdivmap, calls displayServiceErrors, clears selection and hides modal', fakeAsync(() => {
  // Arrange: avoid early validateFormControls return
  spyOn(component as any, 'validateFormControls').and.returnValue(false);

  // Ensure appConfigService private URL exists
  (component as any).appConfigService = {
    updateRevShareDivMappingUrl: '/api/revsharediv/update/'
  } as any;

  // Prepare objects so code can run and then be restored on error
  component.revShrdivmap = { revShareDivId: 99, revShareTypeId: 10, divId: 20 } as any;
  component.selectedRevShrDivMap = { revShareDivId: 99, revShareTypeId: 11, divId: 21, startDt: 's', endDt: 'e' } as any;

  // Combo view-child mocks used when building payload (ensure .value exists and .toString() won't crash)
  (component as any).revenueShareComboBox = { value: ['11'] };
  (component as any).divisionComboBox     = { value: ['21'] };
  (component as any)._revenueShareComboBox = (component as any).revenueShareComboBox;
  (component as any)._divisionComboBox     = (component as any).divisionComboBox;

  // Provide auditLogService so spyOn won't throw (method not required for this assertion)
  (component as any).auditLogService = { writeAuditLog: () => {} };

  // Make the putRequest call fail (trigger error handler)
  spyOn(component.feeApiservice, 'putRequest').and.returnValue(
    throwError(() => ({ error: { statusMessage: 'update failed' } }))
  );

  // Spies for side effects we will assert
  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.stub();
  const clearSpy = spyOn(component as any, 'clearSelection').and.stub();
  (component as any)._actionModal = { hide: jasmine.createSpy('hide') };

  // Ensure store.dispatch exists and we can assert LOADINGACTION(false) later if needed
  const dispatchSpy = spyOn(component['store'], 'dispatch').and.stub();

  // Act
  component.onAcceptButtonClick(ActionType.update);
  tick(); // flush async

  // Assert: feeApiservice.putRequest was invoked with the expected URL and revShareDivId appended
  expect(component.feeApiservice.putRequest).toHaveBeenCalledWith(
    (component as any).appConfigService.updateRevShareDivMappingUrl + component.revShrdivmap.revShareDivId,
    jasmine.any(Object)
  );

  // On error the component code does Object.assign(this.revShrdivmap, this.selectedRevShrDivMap)
  // so revShrdivmap.revShareTypeId should now equal selectedRevShrDivMap.revShareTypeId (11)
  expect(component.revShrdivmap.revShareTypeId).toBe(11);
  expect(component.revShrdivmap.divId).toBe(21);

  // displayServiceErrors should be called with the statusMessage
  expect(displaySpy).toHaveBeenCalledWith('update failed');

  // cleanup: clearSelection() and action modal hide should still happen
  expect(clearSpy).toHaveBeenCalled();
  expect((component as any)._actionModal.hide).toHaveBeenCalled();

  // and the store should have been told loading = false at the end of error handling path
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));