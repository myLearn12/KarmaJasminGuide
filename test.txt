lit('GenerateTableRows(): when API errors -> should call displayServiceErrors, clear loading and dispatch LOADINGACTION(false)', fakeAsync(() => {
  // Arrange: ensure component has appConfigService with the expected url
  (component as any).appConfigService = {
    getAutocomByIdUrl: '/api/autocom/byid'
  } as any;

  // Make getRequest throw an error shaped like the component expects
  const serverMessage = 'Server failure for autocom';
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    // confirm the URL passed to getRequest is the expected one (optional)
    expect(String(url)).toContain('/api/autocom/byid');
    return throwError(() => ({ error: { statusMessage: serverMessage } }));
  });

  // Spy the error display helper and the store.dispatch
  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.callFake(() => {});
  const dispatchSpy = spyOn(component['store'], 'dispatch').and.callFake(() => {});

  // Precondition: loading becomes true at start of method
  component.loading = false;

  // Act
  component.GenerateTableRows();
  tick(); // flush the thrown error through subscription

  // Assert
  expect(displaySpy).toHaveBeenCalledWith(serverMessage);
  expect(component.loading).toBeFalse();
  // LOADINGACTION(false) should be dispatched (we check a call with any LOADINGACTION)
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));