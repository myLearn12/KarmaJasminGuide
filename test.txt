it('ngOnInit(): on complete should set combo data, clone ViewChild.options, clear loading and dispatch LOADINGACTION(false)', fakeAsync(() => {
  // Arrange
  spyOn(component['authService'], 'canHideFinanceAdminControls').and.returnValue(false);

  const costCenters = [{ costCenterId: 1, costCenterNbr: '100', costCenterDesc: 'Cost A' }];
  const divisions = [{ divisionId: 20, divisionCd: 'D1', divisionDesc: 'Division A' }];
  const altDivMaps: any[] = [];

  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: any) => {
    const u = String(url || '').toLowerCase();   // FIX here
    if (u.includes('costcenter')) return of(costCenters);
    if (u.includes('division')) return of(divisions);
    if (u.includes('altdiv')) return of(altDivMaps);
    return of([]);
  });

  const mappedDivisions = [{ label: 'Division A', value: '20' }];
  const mappedCostCenters = [{ label: 'Cost A', value: '100' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr, label) => {
    if (label === 'divisionDesc') return mappedDivisions;
    if (label === 'costCenterDesc') return mappedCostCenters;
    return [];
  });

  (component as any)._divisionComboBox = { options: null };
  (component as any)._costCenterComboBox = { options: null };
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.ngOnInit();
  tick();

  // Assert
  expect(component.divisionComboBoxData).toEqual([{ options: mappedDivisions }]);
  expect(component.costCenterComboBoxData).toEqual([{ options: mappedCostCenters }]);

  expect((component as any)._divisionComboBox.options).toEqual(JSON.parse(JSON.stringify(divisions)));
  expect((component as any)._costCenterComboBox.options).toEqual(JSON.parse(JSON.stringify(costCenters)));

  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));