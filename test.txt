it('ValidateFormControls: returns true when errors/flags are triggered (excluding officer checks)', fakeAsync(() => {
  // --- controls (acct + est)
  const acctCtrl = { markAsTouched: jasmine.createSpy('mat1'), hasError: (e: string) => e === 'required' };
  const estCtrl  = { markAsTouched: jasmine.createSpy('mat2'), hasError: (e: string) => e === 'required' };
  (component as any).fcn_AcctNumb = acctCtrl;
  (component as any).fon_AcctNumb = acctCtrl;
  (component as any).fcn_EstAccrual = estCtrl;
  (component as any).fon_EstAccrual = estCtrl;

  // --- combos (null => required flags true)
  (component as any).cbStatus   = { value: null };
  (component as any).cbstatus   = (component as any).cbStatus;
  (component as any).cbDivision = { value: null };
  (component as any).cbcycle    = { value: null };
  (component as any).cbCycle    = (component as any).cbcycle;
  (component as any).cbFormula  = { value: null };
  (component as any).cbCategory = { value: null };
  (component as any).cbcategory = (component as any).cbCategory;
  (component as any).cbAltDivision = { value: 'X' }; // not null -> revshare flag path

  // --- utils + account
  spyOn(component['utils'], 'isStringValid').and.returnValue(false);
  component.account = { revshare: '' } as any;

  // --- no-op helpers
  (component as any).setIsRevSharevalid  = () => {};
  (component as any).onFutureUseChange   = () => {};
  (component as any).onOzIdChange        = () => {};
  (component as any).onoffNumberChange   = () => {};

  // --- other flags false
  component.isCategoryCdValid = false;
  component.isFutureValid     = false;
  component.isRevShareValid   = false;
  component.isDisp3Valid      = false;
  component.isOzIdValid       = false;
  component.isPcaValid        = false;

  // act
  const result = (component as any).ValidateFormControls();
  tick();

  // touched called
  expect(acctCtrl.markAsTouched).toHaveBeenCalled();
  expect(estCtrl.markAsTouched).toHaveBeenCalled();

  // required flags should be true
  expect(component.statusRequired).toBeTrue();
  expect(component.divisionRequired).toBeTrue();
  expect(component.cycleRequired).toBeTrue();
  expect(component.formulaRequired).toBeTrue();
  expect(component.categoryRequired).toBeTrue();

  // revshare flag true (altDivision not null + revshare invalid)
  expect(component.isRevShareReqd).toBeTrue();
  expect(component.altDivisionRequired).toBeFalse();

  expect(result).toBeTrue();
}));
