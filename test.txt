it('setIsRevShareValid: "0.5" → valid, formats to 0.50 and sets flag true', () => {
  component.account = { revshare: '0.5' } as any;
  spyOn(component['utils'], 'isStringValid').and.returnValue(true);

  (component as any).setIsRevShareValid();

  expect(component.isRevShareValid).toBeTrue();
  expect(component.account.revshare).toBe('0.50'); // toFixed(2)
});

it('setIsRevShareValid: "0.500" (trailing zeros) → valid, formats to 0.50 and sets flag true', () => {
  component.account = { revshare: '0.500' } as any;
  spyOn(component['utils'], 'isStringValid').and.returnValue(true);

  (component as any).setIsRevShareValid();

  expect(component.isRevShareValid).toBeTrue();
  expect(component.account.revshare).toBe('0.50'); // trimmed via toFixed(2)
});

it('setIsRevShareValid: "0" (not > 0) → invalid, sets flag false', () => {
  component.account = { revshare: '0' } as any;
  spyOn(component['utils'], 'isStringValid').and.returnValue(true);

  (component as any).setIsRevShareValid();

  expect(component.isRevShareValid).toBeFalse();
});

it('setIsRevShareValid: "1.20" (> 1) → invalid, sets flag false', () => {
  component.account = { revshare: '1.20' } as any;
  spyOn(component['utils'], 'isStringValid').and.returnValue(true);

  (component as any).setIsRevShareValid();

  expect(component.isRevShareValid).toBeFalse();
});

it('setIsRevShareValid: empty/invalid string → treated as valid (flag true)', () => {
  component.account = { revshare: '' } as any;
  spyOn(component['utils'], 'isStringValid').and.returnValue(false);

  (component as any).setIsRevShareValid();

  expect(component.isRevShareValid).toBeTrue(); // method sets true when string is not valid
});
