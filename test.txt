it('onUpdateModalClick: when row is selected should deep clone revShrdivmap, set values, and show modal', () => {
  // Arrange
  component.isRowSelected = true;

  // realistic sample model (fields don't need to match exactly; just an object)
  component.revShrdivmap = { revShareDivId: 1, revShareDesc: 'Test Map' } as any;

  // The component may call ActivateFormControls â€” stub it to avoid side effects
  spyOn(component as any, 'ActivateFormControls').and.stub();

  // Spy internal helpers called in the else branch
  const setInitialSpy = spyOn(component as any, 'setIntialValues').and.stub();
  const getRevSpy = spyOn(component as any, 'getRevenueShareComboBoxValue').and.stub();
  const getDivSpy = spyOn(component as any, 'getDivisionComboBoxVal').and.stub();

  // Ensure the modal ViewChild exists so show() can be spied on safely
  if (!(component as any)._actionModal) {
    (component as any)._actionModal = { show: () => {} };
  }
  const modalSpy = spyOn((component as any)._actionModal, 'show');

  // Act
  component.onUpdateModalClick();

  // Assert: deep clone (equal but not same reference)
  expect((component as any).selectedRevShrDivMap).toEqual(component.revShrdivmap);
  expect((component as any).selectedRevShrDivMap).not.toBe(component.revShrdivmap);

  // Assert helpers and modal called
  expect(setInitialSpy).toHaveBeenCalled();
  expect(getRevSpy).toHaveBeenCalled();
  expect(getDivSpy).toHaveBeenCalled();
  expect(modalSpy).toHaveBeenCalled();

  // Assert title/type set
  expect(component.actionModalTitle).toBe('Update');
  // make sure ActionType is imported in the spec; otherwise check truthy
  // If ActionType is available: expect(component.actionModalType).toBe(ActionType.update);
  expect(component.actionModalType).toBeDefined();
});