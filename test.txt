it('getUpdatedModel(): builds model using divisions + costCenters when costCenter present', () => {
  // Arrange: realistic arrays so .find() works
  component.divisions = [
    { divisionId: 20, divisionCd: 'D1', divisionDesc: 'Division A', costCenterId: 1 }
  ] as any;

  component.costCenters = [
    { costCenterId: 1, costCenterNbr: '100', costCenterDesc: 'Cost A' }
  ] as any;

  // Provide combo boxes and their .value (must be non-null string toString() safe)
  (component as any).divisionComboBox = { value: '20' };         // used for division find
  (component as any)._costCenterComboBox = { value: '100' };     // used for cost center find

  // Source model
  component.altdivabacostcntrmap = {
    altDivIdCostCntrMapId: 55,
    abaNbr: 'ABA-001',
    creatById: 'u1',
    creatDt: '2025-08-01T00:00:00',
    updtById: 'u2',
    updtDt: '2025-08-02T00:00:00'
  } as any;

  // Act
  const updated = (component as any).getUpdatedModel();

  // Assert
  expect(updated).toBeDefined();
  expect(updated.altDivIdCostCntrMapId).toBe(55);
  expect(updated.altDivisionCd).toBe('D1');
  expect(updated.altDivisionDesc).toBe('Division A');
  expect(updated.abaNbr).toBe('ABA-001');
  expect(updated.costCenterNbr).toBe('100');
  expect(updated.costCenterDesc).toBe('Cost A');
  expect(updated.creatById).toBe('u1');
  expect(updated.creatDt).toBe('2025-08-01T00:00:00');
  expect(updated.updtById).toBe('u2');
  expect(updated.updtDt).toBe('2025-08-02T00:00:00');
});

it('getUpdatedModel(): leaves costCenterDesc null when cost center not found or costCenterNbr missing', () => {
  // Arrange: divisions exist but costCenters is empty (nothing to find)
  component.divisions = [
    { divisionId: 30, divisionCd: 'D2', divisionDesc: 'Division B', costCenterId: 2 }
  ] as any;
  component.costCenters = [] as any;

  // division value is present, but cost center combo value is null (simulate no selection)
  (component as any).divisionComboBox = { value: '30' };
  (component as any)._costCenterComboBox = { value: null };

  component.altdivabacostcntrmap = {
    altDivIdCostCntrMapId: 99,
    abaNbr: 'ABA-XYZ',
    creatById: 'u3',
    creatDt: '2025-07-01T00:00:00',
    updtById: 'u4',
    updtDt: '2025-07-02T00:00:00'
  } as any;

  // Act
  const updated = (component as any).getUpdatedModel();

  // Assert - division fields populated, cost center fields absent/nullable
  expect(updated).toBeDefined();
  expect(updated.altDivIdCostCntrMapId).toBe(99);
  expect(updated.altDivisionCd).toBe('D2');
  expect(updated.altDivisionDesc).toBe('Division B');

  // costCenterNbr may be set to string 'null' or left null depending on your component;
  // assert defensively that costCenterDesc is not set:
  expect(updated.costCenterDesc === null || updated.costCenterDesc === undefined).toBeTrue();
});
