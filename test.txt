it('getRevenueShareComboBoxValue(): should set revenueShareComboBox.value based on matching revShrGlAcctmap.revShareTypeId', () => {
  // Arrange
  component.revenueShares = [
    { revShareTypeId: 10, revShareTypeDesc: 'Revenue A', revShareTypeCd: 'R1' },
    { revShareTypeId: 20, revShareTypeDesc: 'Revenue B', revShareTypeCd: 'R2' }
  ] as any[];

  component.revShrGlAcctmap = { revShareTypeId: 20 } as any;

  // Provide both possible ViewChild names (defensive)
  (component as any).revenueShareComboBox = { value: null };
  (component as any)._revenueShareComboBox = { value: null };

  // Act
  component.getRevenueShareComboBoxValue();

  // Assert: either property should be set to ['20'] (we test both)
  expect((component as any).revenueShareComboBox.value || (component as any)._revenueShareComboBox.value).toEqual(['20']);
});

it('getCostCenterComboBoxValue(): should set costCenterComboBox.value when costCenterNbr is valid and found', () => {
  // Arrange
  component.costCenters = [
    { costCenterNbr: 100, costCenterDesc: 'Cost A', costCenterId: 1 },
    { costCenterNbr: 200, costCenterDesc: 'Cost B', costCenterId: 2 }
  ] as any[];

  component.revShrGlAcctmap = { costCenterNbr: 200 } as any;

  // Provide both possible ViewChild names (defensive)
  (component as any).costCenterComboBox = { value: null };
  (component as any)._costCenterComboBox = { value: null };

  // utils.isStringValid should be true for this case
  spyOn(component['utils'], 'isStringValid').and.returnValue(true);

  // Act
  component.getCostCenterComboBoxValue();

  // Assert: either property should be set to ['200']
  expect((component as any).costCenterComboBox.value || (component as any)._costCenterComboBox.value).toEqual(['200']);
});

it('getCostCenterComboBoxValue(): should set costCenterComboBox.value to null when costCenterNbr is invalid', () => {
  // Arrange: no valid cost center value
  component.revShrGlAcctmap = { costCenterNbr: null } as any;

  // Provide both possible ViewChild names and give them an existing value so we can verify it becomes null
  (component as any).costCenterComboBox = { value: 'oldValue' };
  (component as any)._costCenterComboBox = { value: 'oldValue' };

  // isStringValid returns false => method should set null
  spyOn(component['utils'], 'isStringValid').and.returnValue(false);

  // Act
  component.getCostCenterComboBoxValue();

  // Assert: whichever property the component uses should now be null
  const resultVal = (component as any).costCenterComboBox.value === null ? (component as any).costCenterComboBox.value
                    : (component as any)._costCenterComboBox.value === null ? (component as any)._costCenterComboBox.value
                    : (component as any).costCenterComboBox.value || (component as any)._costCenterComboBox.value;

  expect(resultVal).toBeNull();
});