it('logAccountAudit (clone): handles API error â†’ shows error, stops loading, dispatches', fakeAsync(() => {
  // Arrange
  component.isCloneAccount = true;
  component.account = { accountNbr: 'ACC-2', regionDescription: 'East' } as any;

  (component as any).cbStatus      = { value: ['A'] };
  (component as any).cbDivision    = { value: ['20'] };
  (component as any).cbAltDivision = { value: null };
  (component as any).cbCycle       = { value: ['5'] };
  (component as any).cbFormula     = { value: ['11'] };
  (component as any).cbCategory    = { value: ['7'] };

  component.divisions  = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'DA' }] as any;
  component.cycles     = [{ cycleId: 5,  cycleDesc: 'Cycle 5' }] as any;
  component.formulas   = [{ formulaId: 11, formulaDesc: 'Formula 11', formulaCd: 'F11' }] as any;

  // Include both the selected category and a 'code 4' category to avoid undefined.categoryId
  component.categories = [
    { categoryId: 7,   categoryDescription: 'Cat',   categoryCode: '7' } as any,
    { categoryId: 999, categoryDescription: 'Cat4',  categoryCode: '4' } as any // <-- important
  ] as any;

  // Use TestBed.inject for AccountService
  const injectedAcctSvc = TestBed.inject(AccountService as any);
  spyOn(injectedAcctSvc, 'getAccountStatusDesc').and.returnValue('Active');

  const utils = component['utils'] as any;
  spyOn(utils, 'getValidString').and.callFake((x: any) => (x ? String(x) : null));
  spyOn(utils, 'getFormatedDecimal').and.returnValue('0.00');
  spyOn(utils, 'getDateAndDefaultTime').and.returnValue(null);
  spyOn(utils, 'LoadComboBoxData').and.returnValue([{ label: 'L', value: 'V' }]);
  spyOn(utils, 'getCurrentUser').and.returnValue('u1');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-25T00:00:00');

  const postSpy = spyOn(component.feeApiservice, 'postRequest')
    .and.returnValue(throwError(() => ({ error: { statusMessage: 'boom' } })));

  const errorSpy = spyOn(component as any, 'displayServiceErrors');
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  (component as any).logAccountAudit();
  tick();

  // Assert
  expect(postSpy).toHaveBeenCalled();
  expect(errorSpy).toHaveBeenCalledWith('boom');
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false));
}));
