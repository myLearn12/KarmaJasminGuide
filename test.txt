it('logAccountAudit (edit): generates audit data with old/new values', fakeAsync(() => {
  // Arrange minimal diff
  component.isCloneAccount = false;
  component.oldAccountValues = { longacctnum: 'OLD-LONG', regionDescription: 'East' } as any;
  component.account = { accountNbr: 'ACC-3', longacctnum: 'NEW-LONG', regionDescription: 'West' } as any;

  (component as any).cbStatus   = { value: ['A'] };
  (component as any).cbDivision = { value: ['20'] };

  component.regions   = [{ regionId: 1, regionDescription: 'West' }, { regionId: 2, regionDescription: 'East' }] as any;
  component.divisions = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'DA' }] as any;

  spyOn(component.acctService, 'getAccountStatusDesc').and.returnValue('OPEN');
  spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // Act
  (component as any).logAccountAudit();
  tick();

  // Grab audit payload
  const [, body] = (component.feeApiservice.postRequest as jasmine.Spy).calls.mostRecent().args as [string, any];
  const data = JSON.parse(body.acctAuditData);
  const merged = (data[0].OldAccountValue ?? '') + ' || ' + (data[0].NewAccountValue ?? '');

  // Normalize locally
  const norm = (s: string) => s.toLowerCase().replace(/\s+/g, ' ').trim();
  const text = norm(merged);

  // âœ… Only check a few key fields
  expect(text).toContain('long account number: old-long');
  expect(text).toContain('long account number: new-long');
  expect(text).toContain('region: east');
  expect(text).toContain('region: west');
}));
