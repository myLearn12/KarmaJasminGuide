it('GenerateTableRows(): when API errors -> should call displayServiceErrors, clear loading and dispatch LOADINGACTION(false)', fakeAsync(() => {
  // Arrange
  // make sure appConfigService URL exists (appConfigService may be private on component)
  (component as any).appConfigService = {
    getAllRegDivMappingUrl: '/api/regdivmaps'
  } as any;

  // Ensure initial state like real component
  component.loading = true;

  // Spy LoadTableRows so we can assert it's NOT called in error path
  const loadSpy = spyOn(component as any, 'LoadTableRows').and.callFake(() => {});

  // Spy displayServiceErrors
  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.callFake(() => {});

  // Spy store.dispatch
  const dispatchSpy = spyOn(component['store'], 'dispatch').and.callFake(() => {});

  // Make feeApiservice.getRequest return an observable that errors
  const serverError = { error: { statusMessage: 'Server failure for reg div maps' } };
  spyOn(component.feeApiservice, 'getRequest').and.returnValue(throwError(() => serverError));

  // Act
  component.GenerateTableRows();
  tick(); // flush subscription

  // Assert
  expect(component.feeApiservice.getRequest).toHaveBeenCalledWith('/api/regdivmaps');
  expect(displaySpy).toHaveBeenCalledWith('Server failure for reg div maps');
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
  expect(loadSpy).not.toHaveBeenCalled();
}));