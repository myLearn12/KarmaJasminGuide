function normalizeAuditString(s: string): string {
  return s.toLowerCase()
          .replace(/\s+/g, ' ')
          .replace(/\s*-\s*/g, ' ')
          .replace(/\s*,\s*/g, ',')
          .trim();
}

describe('EditaccountComponent > logAccountAudit (edit)', () => {
  let merged: string;

  beforeEach(fakeAsync(() => {
    component.isCloneAccount = false;
    // ... same setup for old/new account values, combos, stubs as before ...

    const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));
    (component as any).logAccountAudit();
    tick();

    const [, body] = postSpy.calls.mostRecent().args as [string, any];
    const data = JSON.parse((body as any).acctAuditData);
    const item = data[0];
    merged = normalizeAuditString(
      `${item.OldAccountValue ?? item.oldAccountValue} || ${item.NewAccountValue ?? item.newAccountValue}`
    );
  }));

  it('should include long account numbers', () => {
    expect(merged).toContain('long account number: old-long');
    expect(merged).toContain('long account number: new-long');
  });

  it('should include regions and divisions', () => {
    expect(merged).toContain('region: east');
    expect(merged).toContain('region: west');
    expect(merged).toContain('division cd desc: div b');
    expect(merged).toContain('division cd desc: div a');
  });

  it('should include cycles and formulas', () => {
    expect(merged).toContain('cycle id desc: cycle 6');
    expect(merged).toContain('cycle id desc: cycle 5');
    expect(merged).toContain('formula cd desc: formula 12');
    expect(merged).toContain('formula cd desc: formula 11');
  });

  it('should include categories and disposition', () => {
    expect(merged).toContain('category cd desc: other');
    expect(merged).toContain('category cd desc: estate');
    expect(merged).toContain('disposition 3: old-disp3');
    expect(merged).toContain('disposition 3: new-disp3');
  });
});
