// ✅ SUCCESS: full happy path (next + complete), URL build verify, officers map, combos build
it('InitialDataLoad() success case', () => {
  const component = new EditaccountComponent({} as any, {} as any, { dispatch: jasmine.createSpy('dispatch') } as any, {} as any, {} as any);

  // inputs used in URL
  component['regionid'] = 'R1';
  (component as any).selectedAccountNumber = 'ACC-9';

  // stub internal methods called in complete()
  component['LoadAccountTableRow'] = jasmine.createSpy('LoadAccountTableRow');
  component['IntialSetup'] = jasmine.createSpy('IntialSetup');
  component['CloneAccountSetup'] = jasmine.createSpy('CloneAccountSetup');
  component['LoadComboBoxSelectedValue'] = jasmine.createSpy('LoadComboBoxSelectedValue');
  component['SetDeltaChanges'] = jasmine.createSpy('SetDeltaChanges');
  component['SetUnassignedOrArchive'] = jasmine.createSpy('SetUnassignedOrArchive');

  // utils + acct service used in complete()
  component['utils'] = {
    CreateRequiredFormControl: () => ({}),
    CreateDateFormControl: () => ({}),
    LoadComboBoxData: (arr: any[], text: string, code: string, id: string) =>
      arr.map(x => ({ text: x[text], code: x[code], id: x[id] })),
  } as any;
  component['acctService'] = {
    LoadOfficerData: (dict: Record<string, any>) => Object.keys(dict).map(k => ({ text: dict[k].officersort, code: dict[k].officer })),
    loadStatusData: () => [{ text: 'Active', code: 'A' }, { text: 'Inactive', code: 'I' }],
  } as any;

  // config URLs used to build requests
  component['appConfigService'] = {
    getAccountByNumberUrl: '/acc/',
    getAllRegionUrl: '/regions',
    getAllDivisionUrl: '/divisions',
    getAllRegDivMappingUrl: '/regdiv',
    getAllCycleurl: '/cycles',
    getAllFormulaUrl: '/formulas',
    getAllCategoryUrl: '/categories',
    getAllAccrualofficerurl: '/officers',
    getAllRevShareDivMappingUrl: '/revmap',
  } as any;

  const account = { accountId: 9, accountNumber: 'ACC-9' };
  const regions = [{ regionId: 1, regionDesc: 'East' }];
  const divisions = [
    { divisionId: 10, divisionDesc: 'Div A', divisionCd: 'DA' },
    { divisionId: 11, divisionDesc: 'Div B', divisionCd: 'DB' },
  ];
  const regionDivisions = [{ regionId: 1, divisionId: 10 }];
  const cycles = [{ cycleId: 5, cycleDesc: 'Monthly' }];
  const formulas = [{ formulald: 2, formulaDesc: 'F1', formulaCd: 'F-01' }];
  const categories = [{ categoryId: 7, categoryDescription: 'Cat', categoryCode: 'C1' }];
  const officersArr = [
    { officer: '100', officersort: 'A-Name' },
    { officer: '200', officersort: 'B-Name' },
  ];
  const revShareDivMapping = [{ divisionId: 10, map: true }];

  const queue = [
    of(account),
    of(regions),
    of(divisions),
    of(regionDivisions),
    of(cycles),
    of(formulas),
    of(categories),
    of(officersArr),
    of(revShareDivMapping),
  ];

  const getRequestSpy = jasmine.createSpy('getRequest').and.callFake(() => queue.shift()!);
  component['feeApiservice'] = { getRequest: getRequestSpy } as any;

  // run
  component['InitialDataLoad']();

  // next()
  expect(component['LoadAccountTableRow']).toHaveBeenCalledWith(account);
  expect(component.regions).toEqual(regions);
  expect(component.divisions).toEqual(divisions);
  expect(component.altDivisions).toEqual(divisions);
  expect(component.regionDivisions).toEqual(regionDivisions);
  expect(component.cycles).toEqual(cycles);
  expect(component.formulas).toEqual(formulas);
  expect(component.categories).toEqual(categories);
  expect(component.revShareDivMapping).toEqual(revShareDivMapping);
  expect(component.officers['100']).toEqual(officersArr[0]);
  expect(component.officers['200']).toEqual(officersArr[1]);

  // complete()
  expect(component['IntialSetup']).toHaveBeenCalled();
  expect(component['CloneAccountSetup']).toHaveBeenCalled();
  expect(component['LoadComboBoxSelectedValue']).toHaveBeenCalled();
  expect(component['SetDeltaChanges']).toHaveBeenCalled();
  expect(component['SetUnassignedOrArchive']).toHaveBeenCalled();

  // combos built
  expect(component.cbDivisionData[0].options.length).toBe(divisions.length);
  expect(component.cbAltDivisionData[0].options.length).toBe(divisions.length);
  expect(component.cbCycleData[0].options[0]).toEqual({ text: 'Monthly', code: 5, id: 5 });
  expect(component.cbFormulaData[0].options[0]).toEqual({ text: 'F1', code: 'F-01', id: 2 });
  expect(component.cbCategoryData[0].options[0]).toEqual({ text: 'Cat', code: 'C1', id: 7 });
  expect(component.cbofficerData[0].options.length).toBe(2);
  expect(component.cbStatusData[0].options.length).toBe(2);

  // URL composition verified on first call
  const firstUrl = component['appConfigService'].getAccountByNumberUrl + 'R1/ACC-9';
  expect(getRequestSpy.calls.count()).toBe(9);
  expect(getRequestSpy.calls.argsFor(0)[0]).toBe(firstUrl);
});



// ✅ SUCCESS: officers empty → dictionary & officer combo stay empty (still completes)
it('InitialDataLoad() success with empty officers', () => {
  const component = new EditaccountComponent({} as any, {} as any, { dispatch: jasmine.createSpy('dispatch') } as any, {} as any, {} as any);

  component['regionid'] = 'R1';
  (component as any).selectedAccountNumber = 'ACC-0';

  component['LoadAccountTableRow'] = jasmine.createSpy('LoadAccountTableRow');
  component['IntialSetup'] = jasmine.createSpy('IntialSetup');
  component['CloneAccountSetup'] = jasmine.createSpy('CloneAccountSetup');
  component['LoadComboBoxSelectedValue'] = jasmine.createSpy('LoadComboBoxSelectedValue');
  component['SetDeltaChanges'] = jasmine.createSpy('SetDeltaChanges');
  component['SetUnassignedOrArchive'] = jasmine.createSpy('SetUnassignedOrArchive');

  component['utils'] = {
    CreateRequiredFormControl: () => ({}),
    CreateDateFormControl: () => ({}),
    LoadComboBoxData: (arr: any[], t: string, c: string, i: string) =>
      arr.map(x => ({ text: x[t], code: x[c], id: x[i] })),
  } as any;
  component['acctService'] = {
    LoadOfficerData: (dict: Record<string, any>) => Object.keys(dict).map(k => ({ text: dict[k].officersort, code: dict[k].officer })),
    loadStatusData: () => [{ text: 'Active', code: 'A' }, { text: 'Inactive', code: 'I' }],
  } as any;
  component['appConfigService'] = {
    getAccountByNumberUrl: '/acc/',
    getAllRegionUrl: '/regions',
    getAllDivisionUrl: '/divisions',
    getAllRegDivMappingUrl: '/regdiv',
    getAllCycleurl: '/cycles',
    getAllFormulaUrl: '/formulas',
    getAllCategoryUrl: '/categories',
    getAllAccrualofficerurl: '/officers',
    getAllRevShareDivMappingUrl: '/revmap',
  } as any;

  const queue = [
    of({ accountId: 0, accountNumber: 'ACC-0' }),
    of([{ regionId: 1, regionDesc: 'East' }]),
    of([{ divisionId: 10, divisionDesc: 'Div A', divisionCd: 'DA' }]),
    of([{ regionId: 1, divisionId: 10 }]),
    of([{ cycleId: 5, cycleDesc: 'Monthly' }]),
    of([{ formulald: 2, formulaDesc: 'F1', formulaCd: 'F-01' }]),
    of([{ categoryId: 7, categoryDescription: 'Cat', categoryCode: 'C1' }]),
    of([]), // officers empty
    of([{ divisionId: 10, map: true }]),
  ];
  component['feeApiservice'] = { getRequest: jasmine.createSpy('getRequest').and.callFake(() => queue.shift()!) } as any;

  component['InitialDataLoad']();

  expect(Object.keys(component.officers).length).toBe(0);
  expect(component.cbofficerData[0].options.length).toBe(0);
  expect(component['IntialSetup']).toHaveBeenCalled();
  expect(component['CloneAccountSetup']).toHaveBeenCalled();
});



// ❌ ERROR: your original case + store dispatch check
it('InitialDataLoad() error case → shows service error, disables save, stops loading, dispatches action', () => {
  const storeMock = { dispatch: jasmine.createSpy('dispatch') };
  const component = new EditaccountComponent({} as any, {} as any, storeMock as any, {} as any, {} as any);

  component['feeApiservice'] = { getRequest: () => throwError(() => ({ error: { statusMessage: 'fail' } })) } as any;
  component['displayServiceErrors'] = jasmine.createSpy();

  component['InitialDataLoad']();

  expect(component['displayServiceErrors']).toHaveBeenCalledWith('fail');
  expect(component.disableSavebtn).toBeTrue();
  expect(component.loading).toBeFalse();
  expect(storeMock.dispatch).toHaveBeenCalled(); // LOADINGACTION(false)
});
