it('GenerateTableRows(): when API errors -> should call displayServiceErrors, clear loading and dispatch LOADINGACTION(false)', fakeAsync(() => {
  // Arrange - make sure component has the services/props we access
  // If these are private on the component, access via bracket-notation
  const feeApiservice = component.feeApiservice;
  const appConfig = (component as any).appConfigService;

  // Defensive: provide expected URL properties if test relies on them
  if (!appConfig) {
    (component as any).appConfigService = {
      getGetAllMnrCatMappingUrl: '/api/catmnrmaps',
      getAllAcctMnrTypeUrl: '/api/accountMinors'
    } as any;
  }

  // Spy displayServiceErrors and store.dispatch to verify they get called
  const displaySpy = spyOn(component as any, 'displayServiceErrors').and.callThrough();
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Make getRequest: throw for the cat-mapping URL, return harmless success for the other one
  spyOn(feeApiservice, 'getRequest').and.callFake((url: string) => {
    const u = String(url || '').toLowerCase();
    if (u.includes('mnrcat') || u.includes('mnr') || u.includes('mnr')) {
      // simulate server error shape used in component: error.error.statusMessage
      return throwError(() => ({ error: { statusMessage: 'Server failure for cat maps', statusCode: '500' } }));
    }
    // other calls succeed (so forkJoin still errors because one observable errors)
    return of([]);
  });

  // Pre-set loading true so we can confirm it becomes false after error handler
  component.loading = true;

  // Act
  component.GenerateTableRows();
  tick(); // flush async

  // Assert
  expect(displaySpy).toHaveBeenCalled(); // called with the server message
  // If you want exact string:
  expect(displaySpy).toHaveBeenCalledWith('Server failure for cat maps');

  // loading should be cleared in error handler
  expect(component.loading).toBeFalse();

  // LOADINGACTION(false) must have been dispatched
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any((component as any).LOADINGACTION || (window as any).LOADINGACTION));
  // If LOADINGACTION class is in scope, prefer:
  // expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));
