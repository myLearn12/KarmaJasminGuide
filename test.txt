it('LoadComboBoxSelectedValue: populates options/values and old values (excluding AltDivision bug)', fakeAsync(() => {
  // status source used by code
  spyOn(component.acctService, 'loadStatusData').and.returnValue([{ label: 'ACTIVE', value: 'A' }]);

  // ---- account + lookups
  component.regionid = '101';
  component.account = {
    status: 'ACTIVE',
    divisionId: 20,
    altdivision: 30,
    cycleId: 5,
    formulaId: 11,
    categoryId: 7,
    officer: '100',
    regionDescription: ''
  } as any;

  component.regions    = [{ regionId: 101, regionDescription: 'East' }] as any;
  component.divisions  = [{ divisionId: 20 }, { divisionId: 30 }] as any;
  component.cycles     = [{ cycleId: 5 }] as any;
  component.formulas   = [{ formulaId: 11 }] as any;
  component.categories = [{ categoryId: 7 }] as any;

  // IMPORTANT for officer .value
  component.officers = { '100': { officerNm: 'Officer X' } } as any;

  // source arrays for .options (match your component)
  component.cbStatusData      = [{ label: 'ACTIVE', value: 'A' }];
  component.cbDivisionData    = [{ label: 'DivA', value: '20' }];
  component.cbAltDivisionData = [{ label: 'DivB', value: '30' }];
  component.cbCycleData       = [{ label: 'Cycle5', value: '5' }];
  component.cbFormulaData     = [{ label: 'Formula11', value: '11' }];
  component.cbCategoryData    = [{ label: 'Cat7', value: '7' }];
  component.cbofficerData     = [{ label: 'Officer X', value: '100' }];

  // ---- stub ALL combo refs with both spellings the method uses
  const mk = () => ({ options: null as any, value: null as any });

  const cbStatusObj = mk();
  (component as any).cbStatus  = cbStatusObj;
  (component as any).cbstatus  = cbStatusObj;

  const cbDivisionObj = mk();
  (component as any).cbDivision = cbDivisionObj;

  const cbAltDivObj = mk();
  (component as any).cbAltDivision = cbAltDivObj;
  (component as any).cbaltDivision = cbAltDivObj;

  const cbCycleObj = mk();
  (component as any).cbcycle = cbCycleObj;   // code uses cbcycle (lower)
  (component as any).cbCycle = cbCycleObj;   // safety alias

  const cbFormulaObj = mk();
  (component as any).cbFormula = cbFormulaObj;

  const cbCategoryObj = mk();
  (component as any).cbCategory = cbCategoryObj;
  (component as any).cbcategory = cbCategoryObj;

  const cbOfficerObj = mk();
  (component as any).cbofficer = cbOfficerObj; // EXACT name used by method

  component.oldAccountValues = {} as any;

  // ---- act
  (component as any).LoadComboBoxSelectedValue();
  tick();

  // ---- asserts

  // region set
  expect(component.account.regionDescription).toBe('East');

  // options copied
  expect((component as any).cbStatus.options).toEqual(component.cbStatusData);
  expect((component as any).cbDivision.options).toEqual(component.cbDivisionData);
  expect((component as any).cbaltDivision.options).toEqual(component.cbAltDivisionData);
  expect((component as any).cbcycle.options).toEqual(component.cbCycleData);
  expect((component as any).cbFormula.options).toEqual(component.cbFormulaData);
  expect((component as any).cbcategory.options).toEqual(component.cbCategoryData);
  expect((component as any).cbofficer.options).toEqual(component.cbofficerData); // <- was null before

  // values (skip AltDivision due to known '=' bug)
  expect((component as any).cbstatus.value).toEqual(['A']);
  expect((component as any).cbDivision.value).toEqual(['20']);
  expect((component as any).cbcycle.value).toEqual(['5']);
  expect((component as any).cbFormula.value).toEqual(['11']);
  expect((component as any).cbCategory.value).toEqual(['7']);
  expect((component as any).cbofficer.value).toEqual(['100']); // <- was null before

  // old snapshots (match your methodâ€™s exact names)
  expect(component.oldcbStatusValue).toEqual((component as any).cbStatus.value);
  expect(component.oldcbDivisionValue).toEqual((component as any).cbDivision.value);
  // alt-division old value intentionally skipped due to bug
  expect((component as any).oldcbcycleValue ?? component.oldcbcycleValue).toEqual((component as any).cbcycle.value);
  expect(component.oldcbFormulavalue).toEqual((component as any).cbFormula.value);
  expect(component.oldcbCategoryValue).toEqual((component as any).cbCategory.value);
  expect(component.oldcbofficerValue).toEqual((component as any).cbofficer.value); // <- was mismatch before
  expect(component.oldAccountValues.regionDescription).toBe('East');
}));
