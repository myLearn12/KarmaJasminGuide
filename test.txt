it('logAccountAudit (clone): posts audit and shows success modal on complete', fakeAsync(() => {
  // Arrange
  component.isCloneAccount = true;
  component.account = {
    accountNbr: 'ACC-1',
    longacctnum: 'L1',
    accountNm: 'Name',
    status: 'A',
    dateopen: '2025-08-01',
    dateclosed: '',
    estacc: 0,
    revshare: '0.50',
    futureuse: '',
    regionDescription: 'East',
    estpp: 0, actpp: 0, endpp: 0, feepp: 0, cashpp: 0,
    accepfee: 0, disposition3: '', ofcrNm: '', officer: '', ozId: '', pcanumber: ''
  } as any;

  // combos used by method (toString() called)
  (component as any).cbStatus      = { value: ['A'] };
  (component as any).cbDivision    = { value: ['20'] };
  (component as any).cbAltDivision = { value: null };
  (component as any).cbCycle       = { value: ['5'] };
  (component as any).cbFormula     = { value: ['11'] };
  (component as any).cbCategory    = { value: ['7'] };

  // lookup arrays used by LoadComboBoxData / category checks
  component.divisions  = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'DA' }] as any;
  component.cycles     = [{ cycleId: 5, cycleDesc: 'Cycle 5' }] as any;
  component.formulas   = [{ formulaId: 11, formulaDesc: 'Formula 11', formulaCd: 'F11' }] as any;
  component.categories = [{ categoryId: 7, categoryDescription: 'Cat', categoryCode: '7' }] as any;

  // required stubs
  spyOn(component.acctService, 'getAccountStatusDesc').and.returnValue('Active');
  const utils = component['utils'] as any;
  spyOn(utils, 'getValidString').and.callFake((x: any) => (x === '' || x === null || x === undefined) ? null : String(x));
  spyOn(utils, 'getFormatedDecimal').and.callFake((n: any) => Number(n).toFixed(2));
  spyOn(utils, 'getDateAndDefaultTime').and.callFake((d: any) => (d ? d : null));
  spyOn(utils, 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) =>
    arr.map((r: any) => ({ label: r[label], value: String(r[id]) }))
  );
  spyOn(utils, 'getCurrentUser').and.returnValue('u1');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-25T00:00:00');

  // API + modal
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));
  (component as any)._successModal = { show: jasmine.createSpy('show') };

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  (component as any).logAccountAudit();
  tick();

  // Assert
  expect(postSpy).toHaveBeenCalled(); // endpoint verified by app code; here we ensure it was called
  expect(component.loading).toBeFalse();
  expect(dispatchSpy).toHaveBeenCalledWith(new LOADINGACTION(false));
  expect(component.successModalTitle).toBe('Clone Account');
  expect(component.successModalMessage).toContain('ACC-1');
  expect((component as any)._successModal.show).toHaveBeenCalled();
  expect(component.disableSavebtn).toBeFalse();
}));
