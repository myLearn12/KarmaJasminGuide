it('logAccountAudit: captures Long Account Number difference safely', fakeAsync(() => {
  component.isCloneAccount = false;

  // old vs new account values
  component.oldAccountValues = { longacctnum: 'OLD-LONG', regionDescription: 'East' } as any;
  component.account = {
    accountNbr: 'A1',
    longacctnum: 'NEW-LONG',
    regionDescription: 'West'
  } as any;

  // stub all combo-boxes used in method
  (component as any).cbStatus      = { value: ['A'] };
  (component as any).cbDivision    = { value: ['20'] };
  (component as any).cbAltDivision = { value: ['30'] };
  (component as any).cbCycle       = { value: ['5'] };
  (component as any).cbFormula     = { value: ['11'] };
  (component as any).cbCategory    = { value: ['7'] };
  (component as any).cbofficer     = { value: ['100'] };

  // lookups used by LoadComboBoxData
  component.regions   = [{ regionId: 1, regionDescription: 'West' }, { regionId: 2, regionDescription: 'East' }] as any;
  component.divisions = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'DA' }] as any;
  component.cycles    = [{ cycleId: 5, cycleDesc: 'Cycle 5' }] as any;
  component.formulas  = [{ formulaId: 11, formulaDesc: 'Formula 11', formulaCd: 'F11' }] as any;
  component.categories= [{ categoryId: 7, categoryDescription: 'Cat', categoryCode: '7' }] as any;

  // spies
  spyOn(component.acctService, 'getAccountStatusDesc').and.returnValue('OPEN');
  const utils = component['utils'] as any;
  spyOn(utils, 'getValidString').and.callFake((x: any) => (x ? String(x) : null));
  spyOn(utils, 'getFormatedDecimal').and.callFake((n: any) => Number(n).toFixed(2));
  spyOn(utils, 'getDateAndDefaultTime').and.returnValue(null);
  spyOn(utils, 'LoadComboBoxData').and.callFake((arr: any[], label: string, _code: string, id: string) =>
    arr.map((r: any) => ({ label: r[label], value: String(r[id]) }))
  );
  spyOn(utils, 'getCurrentUser').and.returnValue('u1');
  spyOn(utils, 'ToEstDate').and.returnValue('2025-08-25T00:00:00');

  spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));

  // Act
  (component as any).logAccountAudit();
  tick();

  // Assert
  const call = (component.feeApiservice.postRequest as jasmine.Spy).calls.mostRecent();
  expect(call).toBeDefined();

  const [, body] = call.args;
  const auditArr = JSON.parse(body.acctAuditData);
  expect(auditArr.length).toBeGreaterThan(0);

  const audit = auditArr[0];
  expect(audit.OldAccountValue).toContain('OLD-LONG');
  expect(audit.NewAccountValue).toContain('NEW-LONG');
}));
