it('onSearchButtonClick: when rbnTax.value true -> fetch id "1", loads rows and sets category combo', fakeAsync(() => {
  // Arrange
  (component as any).rbnTax = { value: true };
  (component as any).rbnNonTax = { value: false };

  // Ensure component knows the config URLs used in forkJoin
  (component as any).appConfigService = {
    getGetCatGlAcctMappingByIdUrl: '/api/catglmaps/',
    getAllCategoryUrl: '/api/categories'
  } as any;

  // what the two forkJoin calls should return
  const catGlmaps = [{ acct: 'A1' }];
  const categories = [{ categoryId: 7, categoryDescription: 'Estate', categoryCode: '4' }];

  // Spy feeApiservice.getRequest to return based on the URL
  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    if (url === (component as any).appConfigService.getGetCatGlAcctMappingByIdUrl + '1') {
      return of(catGlmaps);
    }
    if (url === (component as any).appConfigService.getAllCategoryUrl) {
      return of(categories);
    }
    return of(null);
  });

  // Provide utils.LoadComboBoxData predictable mapping
  const mappedCategories = [{ label: 'Estate', value: '7' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    if (label === 'categoryDescription') return mappedCategories;
    return [];
  });

  // ViewChild mock so assignment does not throw
  (component as any)._categoryComboBox = { options: null };
  (component as any).categoryComboBox = (component as any)._categoryComboBox;

  // Prevent heavy side effects
  spyOn(component as any, 'LoadTableRows').and.stub();

  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.onSearchButtonClick();
  tick(); // flush forkJoin + subscribe

  // Assert
  expect(component.feeApiservice.getRequest).toHaveBeenCalledWith(
    (component as any).appConfigService.getGetCatGlAcctMappingByIdUrl + '1'
  );
  expect((component as any).LoadTableRows).toHaveBeenCalledWith(catGlmaps);
  expect(component.loading).toBeFalse();
  expect(component.categoryComboBoxData).toEqual([{ options: mappedCategories }]);
  expect((component as any)._categoryComboBox.options).toEqual(JSON.parse(JSON.stringify(categories)));
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));


it('onSearchButtonClick: when rbnNonTax.value true -> fetch id "2", loads rows and sets category combo', fakeAsync(() => {
  // Arrange
  (component as any).rbnTax = { value: false };
  (component as any).rbnNonTax = { value: true };

  (component as any).appConfigService = {
    getGetCatGlAcctMappingByIdUrl: '/api/catglmaps/',
    getAllCategoryUrl: '/api/categories'
  } as any;

  const catGlmaps = [{ acct: 'B1' }];
  const categories = [{ categoryId: 8, categoryDescription: 'Other', categoryCode: '7' }];

  spyOn(component.feeApiservice, 'getRequest').and.callFake((url: string) => {
    if (url === (component as any).appConfigService.getGetCatGlAcctMappingByIdUrl + '2') {
      return of(catGlmaps);
    }
    if (url === (component as any).appConfigService.getAllCategoryUrl) {
      return of(categories);
    }
    return of(null);
  });

  const mappedCategories = [{ label: 'Other', value: '8' }];
  spyOn(component['utils'], 'LoadComboBoxData').and.callFake((arr: any[], label: string) => {
    if (label === 'categoryDescription') return mappedCategories;
    return [];
  });

  (component as any)._categoryComboBox = { options: null };
  (component as any).categoryComboBox = (component as any)._categoryComboBox;

  spyOn(component as any, 'LoadTableRows').and.stub();
  const dispatchSpy = spyOn(component['store'], 'dispatch');

  // Act
  component.onSearchButtonClick();
  tick();

  // Assert
  expect(component.feeApiservice.getRequest).toHaveBeenCalledWith(
    (component as any).appConfigService.getGetCatGlAcctMappingByIdUrl + '2'
  );
  expect((component as any).LoadTableRows).toHaveBeenCalledWith(catGlmaps);
  expect(component.loading).toBeFalse();
  expect(component.categoryComboBoxData).toEqual([{ options: mappedCategories }]);
  expect((component as any)._categoryComboBox.options).toEqual(JSON.parse(JSON.stringify(categories)));
  expect(dispatchSpy).toHaveBeenCalledWith(jasmine.any(LOADINGACTION));
}));