it('onAcceptButtonClick(ActionType.add): should regenerate table, show success, handle error, and write audit log on complete', fakeAsync(() => {
  // Arrange
  (component as any)._regionComboBox = { value: '1' };
  (component as any)._divisionComboBox = { value: '10' };

  component.regdivmap = {
    regDivId: 0,
    regionId: 1,
    divisionId: 10,
    activeIndic: true
  } as any;

  // ✅ Provide mock arrays so no .find() errors occur
  component.regions = [{ regionId: 1, regionDescription: 'Region A' }] as any;
  component.divisions = [{ divisionId: 10, divisionDesc: 'Division X', divisionCd: 'DX' }] as any;

  // ✅ Mock services and utilities
  spyOn<any>(component, 'validateFormControls').and.returnValue(false);
  const genSpy = spyOn<any>(component, 'GenerateTableRows').and.callFake(() => {});
  const setMsgSpy = spyOn<any>(component, 'SetMessageTypeAndValue').and.callFake(() => {});
  const errSpy = spyOn<any>(component, 'displayServiceErrors').and.callFake(() => {});
  const auditSpy = spyOn<any>(component['auditLogService'], 'writeAuditLog').and.callFake(() => {});

  // ✅ Mock URL config
  (component as any).appConfigService = {
    addRegDivMappingUrl: '/api/addRegDiv'
  };

  // ✅ Simulate success, then error, then complete (via Observable.of and Subject)
  const fake$ = of({}); // simulate successful HTTP observable
  const postSpy = spyOn(component.feeApiservice, 'postRequest').and.returnValue(fake$);

  // Act
  component.onAcceptButtonClick(ActionType.add);
  tick();

  // Assert — success (next)
  expect(postSpy).toHaveBeenCalledWith('/api/addRegDiv', jasmine.any(Object));
  expect(genSpy).toHaveBeenCalled();
  expect(setMsgSpy).toHaveBeenCalledWith(BlockMessageType.success, component.addSuccessMessage);

  // ✅ Simulate error flow
  postSpy.and.returnValue(throwError(() => ({ error: { statusMessage: 'Server crash' } })));
  component.onAcceptButtonClick(ActionType.add);
  tick();
  expect(errSpy).toHaveBeenCalledWith('Server crash');

  // ✅ Simulate complete flow
  postSpy.and.returnValue(of({})); // success again
  component.onAcceptButtonClick(ActionType.add);
  tick();

  expect(auditSpy).toHaveBeenCalledWith(
    'NA',
    'NA',
    jasmine.any(RegionDivisionMapping),
    jasmine.any(Object),
    component['auditLogService'].addAction,
    component.PageTitle
  );
}));