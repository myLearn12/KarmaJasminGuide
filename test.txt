describe('EditaccountComponent > logAccountAudit (edit)', () => {

  beforeEach(() => {
    component.isCloneAccount = false;

    // base values (shared)
    component.oldAccountValues = { longacctnum: 'OLD' } as any;
    component.account = { accountNbr: 'A1', longacctnum: 'NEW', regionDescription: 'West' } as any;

    // stub combos
    (component as any).cbStatus      = { value: ['A'] };
    (component as any).cbDivision    = { value: ['20'] };
    (component as any).cbAltDivision = { value: ['30'] };
    (component as any).cbCycle       = { value: ['5'] };
    (component as any).cbFormula     = { value: ['11'] };
    (component as any).cbCategory    = { value: ['7'] };

    // required old snapshots
    component.oldcbStatusValue      = ['B'];
    component.oldcbDivisionValue    = ['21'];
    component.oldcbAltDivisionValue = ['31'];
    component.oldcbCycleValue       = ['6'];
    component.oldcbFormulaValue     = ['12'];
    component.oldcbCategoryValue    = ['8'];

    // minimal lookups
    component.regions   = [{ regionId: 1, regionDescription: 'West' }] as any;
    component.divisions = [{ divisionId: 20, divisionDesc: 'Div A', divisionCd: 'DA' }] as any;
    component.cycles    = [{ cycleId: 5, cycleDesc: 'Cycle 5' }] as any;
    component.formulas  = [{ formulaId: 11, formulaDesc: 'Formula 11', formulaCd: 'F11' }] as any;
    component.categories= [{ categoryId: 7, categoryDescription: 'Cat', categoryCode: '7' }] as any;

    // stub utils
    const utils = component['utils'] as any;
    spyOn(utils, 'getValidString').and.callFake((x: any) => x ? String(x) : null);
    spyOn(utils, 'getFormatedDecimal').and.callFake((n: any) => Number(n).toFixed(2));
    spyOn(utils, 'getDateAndDefaultTime').and.returnValue(null);
    spyOn(utils, 'LoadComboBoxData').and.callFake((arr: any[], label: string, _c: string, id: string) =>
      arr.map((r: any) => ({ label: r[label], value: String(r[id]) }))
    );
    spyOn(utils, 'getCurrentUser').and.returnValue('u1');
    spyOn(utils, 'ToEstDate').and.returnValue('2025-08-25T00:00:00');

    spyOn(component.acctService, 'getAccountStatusDesc').and.returnValue('OPEN');

    spyOn(component.feeApiservice, 'postRequest').and.returnValue(of({}));
    spyOn(component as any, 'showEditSuccess');
  });

  it('should capture longacctnum diff', fakeAsync(() => {
    (component as any).logAccountAudit();
    tick();

    const [, body] = (component.feeApiservice.postRequest as jasmine.Spy).calls.mostRecent().args;
    const audits = JSON.parse(body.acctAuditData);

    expect(audits[0].OldAccountValue).toContain('OLD');
    expect(audits[0].NewAccountValue).toContain('NEW');
  }));

  it('should capture region change', fakeAsync(() => {
    component.oldAccountValues.regionDescription = 'East';
    component.account.regionDescription = 'West';

    (component as any).logAccountAudit();
    tick();

    const [, body] = (component.feeApiservice.postRequest as jasmine.Spy).calls.mostRecent().args;
    const audits = JSON.parse(body.acctAuditData);

    const merged = `${audits[0].OldAccountValue} || ${audits[0].NewAccountValue}`;
    expect(merged).toContain('Region: East');
    expect(merged).toContain('Region: West');
  }));

  it('should capture accrual difference', fakeAsync(() => {
    component.oldAccountValues.estacc = 10;
    component.account.estacc = 20;

    (component as any).logAccountAudit();
    tick();

    const [, body] = (component.feeApiservice.postRequest as jasmine.Spy).calls.mostRecent().args;
    const audits = JSON.parse(body.acctAuditData);

    const merged = `${audits[0].OldAccountValue} || ${audits[0].NewAccountValue}`;
    expect(merged).toContain('Estimated Accrual: 10.00');
    expect(merged).toContain('Estimated Accrual: 20.00');
  }));
});
